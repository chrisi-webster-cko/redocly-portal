openapi: '3.0.1'
info:
  version: '1.0.0'
  title: Checkout.com API Reference
  x-logo:
    url: 'https://assets.checkout.com/docs/logos/logo-checkout-api-dark.svg'
    backgroundColor: '#E6E7EC'
    altText: 'Checkout.com API logo'
  contact:
    name: Checkout.com Support
    url: 'https://checkout.com'
    email: support@checkout.com
  license:
    name: Checkout.com
    url: 'https://checkout.com/api/license/'
  termsOfService: 'https://checkout.com/terms/'
  description: >
    ##  Get started

    Checkout.com provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard <a href="https://www.checkout.com/docs/four/resources/codes/http-response-codes">HTTP response codes</a>.

    You can consume the APIs directly using your favorite HTTP/REST library.

    We have a testing environment called sandbox, which you can <a href="https://www.checkout.com/get-test-account">sign up for</a> to test API calls without affecting live data.

    # Authentication

    When you sign up for an account, you are given a public key, and either a set of client credentials or a secret key. You authenticate with our API by following the appropriate authentication flow, using either your API keys or your client credentials.

    Unless explicitly stated, all endpoints require authentication using either your client credentials or your secret key. Public keys should only be used in JavaScript or native applications.

    - <b>Client-side authentication</b>. Use your [public key](#section/Authentication/ApiPublicKey) for client-side authentication. It only has access to a limited set of our APIs – mostly those called as part of your payment environment.

    - <b>Server-to-server authentication</b>. Use your [secret key](#section/Authentication/ApiSecretKey) or [client credentials](#section/Authentication/OAuth) for server-to-server communication. Support for API keys depends on the endpoint.

    Never share your client credentials, API keys, or access tokens. Keep them guarded and secure.

    # Changelog

      | Date       | Description of change                                                         |
      | ---------- | ----------------------------------------------------------------------------- |
      | 2022/03/02 | Adds Transfers and Balances                                                   |
      | 2022/02/23 | Adds Hosted Payments Page and Payment Links                                   |
      | 2022/02/18 | Added `Increment Payment Authorization` code samples for Java & C#            |
      | 2022/02/02 | Adds `active` property for workflows                                          |
      | 2022/01/26 | Update code samples for Java.                                                 |
      | 2022/01/25 | Update code samples for C#.                                                   |
      | 2022/01/19 | Added test a workflow endpoint.                                               |
      | 2022/01/13 | Update code samples for Node JS.                                              |
      | 2021/11/29 | Increase max length of the NAS `success_url` and `failure_url` fields of the payment request (both from 255 to 1024).|
      | 2021/11/11 | Added `3ds.challenge_indicator` to card payment requests.                     |
      | 2021/11/03 | Adds `identification` object under parent `sender` object in payment request. |
      | 2021/10/18 | Added the `marketplaces.sub-entities` object to support split payments.       |
servers:
  - url: https://api.checkout.com
    description: Live API
  - url: https://api.sandbox.checkout.com
    description: Sandbox API
tags:
  - name: Access
    description: Create an access token to begin using our APIs.
  - name: Payments
    description: Process and manage payments from a variety of sources and to various destinations all within one integration.
  - name: Payment Links
    description: Create a Payment Link to accept and process payment details.
  - name: Hosted Payments Page
    description: Create a Hosted Payments Page to accept and process payment details.
  # - name: Sources
  #   description: Create a payment source for a customer that you can use for one or more payments.
  - name: Tokens
    description: Create a token that represents a card's details that you can later use to request a payment, without you having to process or store any sensitive information.
  - name: Instruments
    description: Create and manage your card and bank account payment instruments.
  - name: Forex
    description: Checkout.com Foreign Exchange services
  - name: Disputes
    description: Keep track of and act on your open disputes (also known as chargebacks) to submit the best possible response.
  - name: Marketplace
    description: Manage all your sub-entities (also known as sub-merchants) through one integration, globally.
  - name: Sessions
    description: Use Sessions to authenticate transactions with 3D Secure (3DS) and comply with Strong Customer Authentication (SCA) requirements.
  - name: Workflows
    description: Use Workflows to start receiving webhook notifications for your payments, disputes, and marketplace sub-entities.
  - name: Risk
    description: Evaluate the risk of a transaction at the pre-authentication and pre-capture stages of the payment process.
  - name: Apple Pay
    description: Manage your Apple Pay certificates in order to process payments via Apple Pay.
  - name: Transfers
    description: Transfer funds while managing the entities to transfer money to recoup funds from a seller, return money from a refund or to make up the difference when running a promotion.
  - name: Balances
    description: View balances for currency accounts belonging to an entity.

  # - name: Files
  #   description: |
  #     Upload files to be used as input to other APIs

x-tagGroups:
  - name: Set up
    tags:
      - Access
  - name: Handle payments and payouts
    tags:
      - Payments
      - Payment Links
      - Hosted Payments Page
      - Forex
      - Apple Pay
      - Transfers
      - Balances
  - name: Stored payment details
    tags:
      - Tokens
      - Instruments
      - Customers
  - name: Risk management
    tags:
      - Sessions
      - Disputes
      - Risk
  - name: Notifications
    tags:
      - Workflows
  - name: Marketplace
    tags:
      - Marketplace
paths:
  /:
    post:
      tags:
        - Marketplace
      security:
        - OAuth:
            - files
      servers:
        - url: https://files.checkout.com
          description: Production server
        - url: https://files.sandbox.checkout.com
          description: Sandbox server
      summary: Upload a file
      description: >-
        Our <a href="https://checkout.com/docs/four/marketplaces" target="_blank">Marketplace</a> solution provides an easy way to upload identity documentation required for full due diligence. Please <strong>note</strong> that the sub-domain – https://files.checkout.com – is slightly different to Checkout.com's other endpoints. <br><br>Read the <a href="https://checkout.com/docs/four/marketplaces/onboarding/api/full/upload-a-file" target="_blank">documentation</a> for more information.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MarketplaceFile'
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketplaceFileUploadResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable
        '429':
          description: Too many requests
  /applepay/certificates:
    post:
      tags:
        - Apple Pay
      security:
        - ApiPublicKey: [ ]
      summary: Upload a payment processing certificate
      description: |
        Upload a payment processing certificate. This will allow you to start processing payments via Apple Pay.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplePayCertificateRequest'
      responses:
        '201':
          description: Certificate uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplePayCertificateResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('sk_sbox_XXXXX', {\n	pk: 'pk_sbox_XXXXX',\n});\n\ntry {\n	const apple = await cko.applePay.upload({\n		content: 'XXXXXXX', // make sure you escape the characters\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /applepay/signing-requests:
    post:
      tags:
        - Apple Pay
      security:
        - ApiPublicKey: [ ]
      summary: Generate a certificate signing request
      description: |
        Generate a certificate signing request. You'll need to upload this to your Apple Developer account to download a payment processing certificate.
      responses:
        '200':
          description: Generated signing request successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplePaySigningRequestResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('sk_sbox_XXXXX', {\n	pk: 'pk_sbox_XXXXX',\n});\n\ntry {\n	const apple = await cko.applePay.generate();\n} catch (err) {\n	console.log(err.name);\n}"
  /balances/{id}:
    parameters:
      - $ref: '#/components/parameters/EntityId'
      - $ref: '#/components/parameters/Query'
    get:
      summary: Retrieve entity balances
      description: Use this endpoint to retrieve balances for each currency account belonging to an entity.
      security:
        - OAuth:
            - marketplace
      responses:
        '200':
          description: Balances retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '400':
          description: Query format not supported
        '401':
          description: Unauthorized
        '404':
          description: Entity not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Balances
  /connect/token:
    servers:
      - url: https://access.checkout.com
        description: Live API
      - url: https://access.sandbox.checkout.com
        description: Sandbox API
    post:
      summary: Request an access token
      tags:
        - Access
      responses:
        '200':
          description: OK - A successful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: 2YotnFZFEjr1zCsicMWpAA
                  token_type:
                    type: string
                    example: example
                  expires_in:
                    type: number
                    example: 3600
    
        '400':
          description: Bad request - An unsuccessful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - invalid_request
                      - invalid_client
                      - invalid_grant
                      - unauthorized_client
                      - unsupported_grant_type
                      - invalid_scope
      description: OAuth endpoint to exchange your access key ID and access key secret for an access token.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - client_credentials
                  example: client_credentials
                client_id:
                  type: string
                  description: 'Access key ID'
                client_secret:
                  type: string
                  description: 'Access key secret'
                scope:
                  type: string
                  description: The access key scope
                  example: gateway
            examples:
              example-1:
                value:
                  grant_type: client_credentials
                  client_id: ack_clckqmmnyfiupexjew7shh5ahe
                  client_secret: Pmg36sDWQ9WxtPR3
      x-code-samples:
        - lang: C#
          source: "// Please refer to https://github.com/checkout/checkout-sdk-net on how to setup the SDK with OAuth\ntry\n{\n    Four.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n        .ClientCredentials(\"client_id\", \"client_secret\")\n        .Scopes(FourOAuthScope.Files, FourOAuthScope.Flow, FourOAuthScope.Fx, FourOAuthScope.Gateway,\n            FourOAuthScope.Marketplace, FourOAuthScope.SessionsApp, FourOAuthScope.SessionsBrowser,\n            FourOAuthScope.Vault, FourOAuthScope.PayoutsBankDetails) // more scopes available\n        .Environment(Environment.Sandbox)\n        .FilesEnvironment(Environment.Sandbox)\n        .Build();\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: cURL
          source: "curl --location --request POST 'https://access.checkout.com/connect/token'\n  --header 'Content-Type: application/x-www-form-urlencoded'\n  --header 'Authorization: Basic dGVzdC1hY2Nlc3Mta2V5LWlkOnRlc3QtYWNjZXNzLWtleS1zZWNyZXQ='\n  --data-urlencode 'grant_type=client_credentials'\n  --data-urlencode 'scope=gateway'"
        - lang: Java
          source: "// Please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.FourOAuthScope;\nimport com.checkout.four.CheckoutApi;\n\n// SDK instantiation for OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FILES, FourOAuthScope.FLOW, FourOAuthScope.FX, FourOAuthScope.GATEWAY,\n        FourOAuthScope.MARKETPLACE, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER,\n        FourOAuthScope.VAULT, FourOAuthScope.PAYOUTS_BANK_DETAILS) // more scopes available\n    .build();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout();\n\ntry {\n	const access_token = await cko.access.request({\n		grant_type: 'client_credentials',\n		client_id: 'ack_XXXX',\n		client_secret: 'XXXXX',\n		scope: 'gateway',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /customers:
    post:
      tags:
        - Customers
      security:
        - OAuth:
            - vault
            - vault:customers
        - ApiSecretKey: []
      summary: Create a customer
      description: >
        <a href="https://www.checkout.com/docs/four/payments/store-payment-details/customers" target="_blank">Store a customer's details in a customer object to reuse in future payments</a>. When creating a customer, you can link payment instruments – the customer `id` returned can be passed as a source when making a payment.
        <br/><br>
        **NOTE:** Specify a `default` instrument, otherwise the `instruments` array will not be saved on creation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreCustomerResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing CustomerRequest = Checkout.Customers.Four.CustomerRequest;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Vault)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCustomerRequest request = new CustomerRequest\n{\n    Email = \"email@docs.checkout.com\",\n    Name = \"FirstName LastName\",\n    Phone = new Phone\n    {\n        CountryCode = \"1\",\n        Number = \"4155552671\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    IdResponse response = api.CustomersClient().Create(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Phone;\nimport com.checkout.common.four.IdResponse;\nimport com.checkout.customers.four.CustomerRequest;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nCustomerRequest request = CustomerRequest.builder()\n    .email(\"email@docs.checkout.com\")\n    .name(\"name\")\n    .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n    .instruments(Arrays.asList(\"instrument_id_1\", \"instrument_id_2\"))\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    IdResponse response = api.customersClient().create(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const customerResponse = await cko.customers.create({\n		email: 'JohnTest@test.com',\n		name: 'John Test',\n		phone: {\n			country_code: '+1',\n			number: '4155552671',\n		},\n		metadata: {\n			coupon_code: 'NY2018',\n			partner_id: 123989,\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /customers/{identifier}:
    get:
      security:
        - OAuth:
            - vault
            - vault:customers
        - ApiSecretKey: [ ]
      tags:
        - Customers
      summary: Get customer details
      description: Returns the details of a customer and their payment instruments.
      parameters:
        - in: path
          name: identifier
          required: true
          description: The customer's ID or email
          schema:
            type: string
            properties:
              id:
                type: string
                pattern: "^(cus)_(\\w{26})$"
              email:
                type: string
                format: email
                maxLength: 255
            additionalProperties: false
            oneOf:
              - required: [ id ]
              - required: [ email ]
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveCustomerResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Customers;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Vault)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    CustomerDetailsResponse response = api.CustomersClient().Get(\"customer_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.customers.four.CustomerResponse;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    CustomerResponse response = api.customersClient().get(\"customer_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const customerResponse = await cko.customers.get('cus_2tvaccfvs3lulevzg42vgyvtdq');\n} catch (err) {\n	console.log(err.name);\n}"
    patch:
      tags:
        - Customers
      security:
        - OAuth:
            - vault
            - vault:customers
        - ApiSecretKey: [ ]
      summary: Update customer details
      description: Update the details of a customer and link payment instruments to them.
      parameters:
        - in: path
          name: identifier
          schema:
            type: string
            pattern: "^(cus)_(\\w{26})$"
          required: true
          description: The customer's ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerDetailsRequest'
      responses:
        '204':
          description: Customer updated successfully
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Customer not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing CustomerRequest = Checkout.Customers.Four.CustomerRequest;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Vault)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCustomerRequest request = new CustomerRequest\n{\n    Email = \"email@docs.checkout.com\",\n    Name = \"FirstName LastName\",\n    Phone = new Phone\n    {\n        CountryCode = \"1\",\n        Number = \"4155552671\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    await api.CustomersClient().Update(\"customer_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\n\n\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Phone;\nimport com.checkout.customers.four.CustomerRequest;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nCustomerRequest customerRequest = CustomerRequest.builder()\n    .email(\"email@docs.checkout.com\")\n    .name(\"name\")\n    .phone(Phone.builder().countryCode(\"1\").number(\"4155552671\").build())\n    .instruments(Arrays.asList(\"instrument_id_1\", \"instrument_id_2\"))\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    api.customersClient().update(\"customer_id\", customerRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const customerResponse = await cko.customers.update('cus_2tvaccfvs3lulevzg42vgyvtdq', {\n		name: 'James Bond',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
    delete:
      tags:
        - Customers
      security:
        - OAuth:
            - vault
            - vault:customers
        - ApiSecretKey: [ ]
      summary: Delete a customer
      description: Delete a customer and all of their linked payment instruments.
      parameters:
        - in: path
          name: identifier
          required: true
          schema:
            type: string
            pattern: "^(cus)_(\\w{26})$"
          description: The customer's ID
      responses:
        '204':
          description: Customer deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Customer not found or not associated with client
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Vault)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.CustomersClient().Delete(\"customer_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    api.customersClient().delete(\"customer_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const customerResponse = await cko.customers.delete('cus_2tvaccfvs3lulevzg42vgyvtdq');\n} catch (err) {\n	console.log(err.name);\n}"
  /disputes:
    get:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:view
        - ApiSecretKey: [ ]
      summary: Get disputes
      description: >-
        Returns a list of all disputes against your business. The results will be
        returned in reverse chronological order, showing the last modified dispute
        (for example, where you've recently added a piece of evidence) first. You
        can use the optional parameters below to skip or limit results.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 250
            default: 50
          required: false
          description: The numbers of results to return
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of results to skip
        - in: query
          name: from
          schema:
            type: string
            format: ISO-8601
          required: false
          description: The date and time from which to filter disputes, based on the dispute's
            `last_update` field
        - in: query
          name: to
          schema:
            type: string
            format: ISO-8601
          required: false
          description: The date and time until which to filter disputes, based on the dispute's
            `last_update` field
        - in: query
          name: id
          schema:
            type: string
          required: false
          description: The unique identifier of the dispute
        - in: query
          name: entity_ids
          schema:
            type: string
            example: 'ent_wxglze3wwywujg4nna5fb7ldli,ent_vkb5zcy64zoe3cwfmaqvqyqyku'
          required: false
          description: One or more comma-separated client entities. This works like a logical *OR*
            operator
        - in: query
          name: sub_entity_ids
          schema:
            type: string
            example: 'ent_uzm3uxtssvmuxnyrfdffcyjxeu,ent_hy5wtzwzeuwefmsnjtdhw4scfi'
          required: false
          description: One or more comma-separated sub-entities. This works like a logical *OR*
            operator
        - in: query
          name: statuses
          schema:
            type: string
            example: 'evidence_required,evidence_under_review'
          required: false
          description: One or more comma-separated statuses. This works like a logical *OR*
            operator
        - in: query
          name: payment_id
          schema:
            type: string
          required: false
          description: The unique identifier of the payment
        - in: query
          name: payment_reference
          schema:
            type: string
          required: false
          description: An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`
        - in: query
          name: payment_arn
          schema:
            type: string
          required: false
          description: The acquirer reference number (ARN) that you can use to query the
            issuing bank
        - in: query
          name: payment_mcc
          schema:
            type: string
          required: false
          description: The merchant category code (MCC) of the payment (ISO 18245)
        - in: query
          name: this_channel_only
          schema:
            type: boolean
          required: false
          description:
            If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that
            business
      responses:
        '200':
          description: Disputes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputePaged'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable paging
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nDisputesQueryFilter request = new DisputesQueryFilter\n{\n    Limit = 250,\n    To = DateTime.Now,\n};\n\ntry\n{\n    DisputesQueryResponse response = api.DisputesClient().Query(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.DisputeStatus;\nimport com.checkout.disputes.four.DisputesQueryFilter;\nimport com.checkout.disputes.four.DisputesQueryResponse;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\nDisputesQueryFilter query = DisputesQueryFilter.builder()\n    .paymentId(\"payment_id\")\n    .from(LocalDateTime.now().minusYears(2).toInstant(ZoneOffset.UTC))\n    .to(Instant.now())\n    .paymentArn(\"payment_arn\")\n    .paymentReference(\"payment_reference\")\n    .statuses(String.join(\",\", DisputeStatus.EVIDENCE_UNDER_REVIEW.getStatus(), DisputeStatus.ARBITRATION_WON.getStatus()))\n    .limit(10)\n    .skip(5)\n    .build();\n\ntry {\n    DisputesQueryResponse response = api.disputesClient().query(query).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const disputes = await cko.disputes.get({\n		limit: 5,\n		id: 'dsp_bc94ebda8d275i461229',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /disputes/{dispute_id}:
    get:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:view
        - ApiSecretKey: [ ]
      summary: Get dispute details
      description: Returns all the details of a dispute using the dispute identifier.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    DisputeDetailsResponse response = api.DisputesClient().GetDisputeDetails(\"disputes_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.four.DisputeDetailsResponse;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\ntry {\n    DisputeDetailsResponse response = api.disputesClient().getDisputeDetails(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const disputeDetails = await cko.disputes.getDetails('dsp_bc94ebda8d275i461229');\n} catch (err) {\n	console.log(err.name);\n}"
  /disputes/{dispute_id}/accept:
    post:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:accept
        - ApiSecretKey: [ ]
      summary: Accept dispute
      description: >-
        If a dispute is legitimate, you can choose to accept it. This will close it
        for you and remove it from your list of open disputes. There are no further
        financial implications.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute accepted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.DisputesClient().Accept(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\ntry {\n    api.disputesClient().accept(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const accept = await cko.disputes.accept('dsp_bc94ebda8d275i461229');\n} catch (err) {\n	console.log(err.name);\n}"
  /disputes/{dispute_id}/evidence:
    put:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:provide-evidence
        - ApiSecretKey: [ ]
      summary: Provide dispute evidence
      description: >
        Adds supporting evidence to a dispute. Before using this endpoint, you first
        need to [upload your files](#tag/Disputes/paths/~1files/post) using the file
        uploader. You will receive a file id (prefixed by `file_`) which you can
        then use in your request.
        Note that this only attaches the evidence to the dispute, it does not send
        it to us. Once ready, you will need to submit it.
        **You must provide at least one evidence type in the body of your request.**
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvideEvidenceRequest'
      responses:
        '204':
          description: Dispute evidence provided successfully
        '400':
          description: Unprocessable
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
        '422':
          description: Unprocessable entity
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nDisputeEvidenceRequest request = new DisputeEvidenceRequest()\n{\n    ProofOfDeliveryOrServiceFile = \"file_xxxxxx\",\n    ProofOfDeliveryOrServiceText = \"proof of delivery or service text\",\n    InvoiceOrReceiptFile = \"file_xxxxxx\",\n    InvoiceOrReceiptText = \"Copy of the invoice\",\n    CustomerCommunicationFile = \"file_xxxxxx\",\n    CustomerCommunicationText = \"Copy of an email exchange with the cardholder\",\n    AdditionalEvidenceFile = \"file_xxxxxx\",\n    AdditionalEvidenceText = \"Scanned document\"\n};\n\ntry\n{\n    await api.DisputesClient().PutEvidence(\"disputes_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.four.DisputeEvidenceRequest;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\nDisputeEvidenceRequest evidenceRequest = DisputeEvidenceRequest.builder()\n    .proofOfDeliveryOrServiceFile(\"file_id\")\n    .proofOfDeliveryOrServiceText(\"proof of delivery or service text\")\n    .invoiceOrReceiptFile(\"file_id\")\n    .invoiceOrReceiptText(\"Copy of the invoice\")\n    .invoiceShowingDistinctTransactionsFile(\"file_id\")\n    .invoiceShowingDistinctTransactionsText(\"Copy of invoice #1244 showing two transactions\")\n    .customerCommunicationFile(\"file_id\")\n    .customerCommunicationText(\"Copy of an email exchange with the cardholder\")\n    .refundOrCancellationPolicyFile(\"file_id\")\n    .refundOrCancellationPolicyText(\"Copy of the refund policy\")\n    .recurringTransactionAgreementFile(\"file_id\")\n    .recurringTransactionAgreementText(\"Copy of the recurring transaction agreement\")\n    .additionalEvidenceFile(\"file_id\")\n    .additionalEvidenceText(\"Scanned document\")\n    .proofOfDeliveryOrServiceDateFile(\"file_id\")\n    .proofOfDeliveryOrServiceDateText(\"Copy of the customer receipt showing the merchandise was delivered on 2018-12-20\")\n    .build();\n\ntry {\n    api.disputesClient().putEvidence(\"dispute_id\", evidenceRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const evidence = await cko.disputes.provideEvidence('dsp_bc94ebda8d275i461229', {\n		proof_of_delivery_or_service_text: 'http://checkout.com/document.pdf',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
    get:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:view
        # - ApiKey: []
      summary: Get dispute evidence
      description: >
        Retrieves a list of the evidence submitted in response to a specific
        dispute.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute evidence retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    DisputeEvidenceResponse response = api.DisputesClient().GetEvidence(\"disputes_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.four.DisputeEvidenceResponse;\nimport com.checkout.four.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\ntry {\n    DisputeEvidenceResponse response = api.disputesClient().getEvidence(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const getEvidence = await cko.disputes.getEvidence('dsp_bc94ebda8d275i461229');\n} catch (err) {\n	console.log(err.name);\n}"
    post:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:provide-evidence
        # - ApiKey: []
      summary: Submit dispute evidence
      description: >-
        With this final request, you can submit the evidence that you have
        previously provided. Make sure you have provided all the relevant
        information before using this request. You will not be able to amend your
        evidence once you have submitted it.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute evidence submitted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.DisputesClient().SubmitEvidence(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\ntry {\n    api.disputesClient().submitEvidence(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const submitEvidence = await cko.disputes.submit('dsp_bc94ebda8d275i461229');\n} catch (err) {\n	console.log(err.name);\n}"
  /files:
    post:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:provide-evidence
        - ApiSecretKey: [ ]
      summary: Upload file
      description: >-
        Upload a file to use as evidence in a dispute. Your file must be in either
        JPEG/JPG, PNG or PDF format, and be no larger than 4MB.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable
        '429':
          description: Too many requests
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    IdResponse response = api.DisputesClient().SubmitFile(\"file_path\", \"dispute_evidence\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.FilePurpose;\nimport com.checkout.common.FileRequest;\nimport com.checkout.common.IdResponse;\nimport com.checkout.four.CheckoutApi;\nimport org.apache.http.entity.ContentType;\nimport java.io.File;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FILES) // more scopes available\n    .build();\n\nFile file = new File(\"evidence.pdf\");\nFileRequest fileRequest = FileRequest.builder()\n    .file(file)\n    .contentType(ContentType.create(\"application/pdf\"))\n    .purpose(FilePurpose.DISPUTE_EVIDENCE)\n    .build();\n\ntry {\n    IdResponse response = api.disputesClient().uploadFile(fileRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const file = await cko.files.upload({\n		path: fs.createReadStream('./test/files/evidence.jpg'),\n		purpose: 'dispute_evidence',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /files/{file_id}:
    get:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:view
        - ApiSecretKey: [ ]
      summary: Get file information
      description: Retrieve information about a file that was previously uploaded.
      parameters:
        - in: path
          name: file_id
          schema:
            type: string
          required: true
          description: The file identifier. It is always prefixed by `file_`.
      responses:
        '200':
          description: File information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResult'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: File not found
        '429':
          description: Too many requests or duplicate request detected
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Files;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    FileDetailsResponse response = api.DisputesClient().GetFileDetails(\"file_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.FileDetailsResponse;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FILES) // more scopes available\n    .build();\n\ntry {\n    FileDetailsResponse response = api.disputesClient().getFileDetails(\"file_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const getFile = await cko.files.getFile('file_zna32sccqbwevd3ldmejtplbhu');\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows:
    get:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get all workflows
      description: |
        Get all workflows
      responses:
        '200':
          description: Workflows retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-all-workflows-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '500':
          description: Internal Error
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetWorkflowsResponse response = api.WorkflowsClient().GetWorkflows().Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.GetWorkflowsResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    GetWorkflowsResponse response = api.workflowsClient().getWorkflows().get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.getAll();\n} catch (err) {\n	console.log(err.name);\n}"
    post:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Add a workflow
      description: |
        Add a new Flow workflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-workflow-request'
      responses:
        '201':
          description: Workflow added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/add-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four;\nusing Checkout.Workflows.Four.Actions;\nusing Checkout.Workflows.Four.Actions.Request;\nusing Checkout.Workflows.Four.Conditions.Request;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCreateWorkflowRequest request = new CreateWorkflowRequest\n{\n    Name = \"Webhooks workflow\",\n    Conditions = new List<WorkflowConditionRequest>()\n    {\n        new EventWorkflowConditionRequest()\n        {\n            Events = new Dictionary<string, ISet<string>>()\n            {\n                {\n                    \"gateway\", new HashSet<string>()\n                    {\n                        \"payment_approved\",\n                        \"payment_declined\",\n                        \"card_verification_declined\",\n                        \"card_verified\",\n                        \"payment_authorization_incremented\",\n                        \"payment_authorization_increment_declined\",\n                        \"payment_capture_declined\",\n                        \"payment_captured\",\n                        \"payment_refund_declined\",\n                        \"payment_refunded\",\n                        \"payment_void_declined\",\n                        \"payment_voided\"\n                    }\n                },\n                {\n                    \"dispute\", new HashSet<string>()\n                    {\n                        \"dispute_canceled\",\n                        \"dispute_evidence_required\",\n                        \"dispute_expired\",\n                        \"dispute_lost\",\n                        \"dispute_resolved\",\n                        \"dispute_won\"\n                    }\n                }\n            }\n        },\n        new EntityWorkflowConditionRequest()\n        {\n            Entities = new List<string>()\n            {\n                \"ent_xyfdshfudosfdshfdiosfds\",\n                \"ent_fidjosfjdisofdjsifdosfu\"\n            }\n        },\n        new ProcessingChannelWorkflowConditionRequest()\n        {\n            ProcessingChannels = new List<string>()\n            {\n                \"pc_axclravnqf5u5ejkweijnp5zc4\"\n            }\n        }\n    },\n    Actions = new List<WorkflowActionRequest>()\n    {\n        new WebhookWorkflowActionRequest()\n        {\n            Url = \"https://example.com/webhooks\",\n            Headers = new Dictionary<string, string>()\n            {\n                {\"Authorization\", \"70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf\"}\n            },\n            Signature = new WebhookSignature()\n            {\n                Method = \"HMACSHA256\",\n                Key = \"8V8x0dLK%AyD*DNS8JJr\"\n            }\n        }\n    }\n};\n\ntry\n{\n    CreateWorkflowResponse response = api.WorkflowsClient().CreateWorkflow(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.CreateWorkflowRequest;\nimport com.checkout.workflows.four.CreateWorkflowResponse;\nimport com.checkout.workflows.four.actions.WebhookSignature;\nimport com.checkout.workflows.four.actions.request.WebhookWorkflowActionRequest;\nimport com.checkout.workflows.four.conditions.request.EntityWorkflowConditionRequest;\nimport com.checkout.workflows.four.conditions.request.EventWorkflowConditionRequest;\nimport com.checkout.workflows.four.conditions.request.ProcessingChannelWorkflowConditionRequest;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nWebhookWorkflowActionRequest workflowActionRequest = WebhookWorkflowActionRequest.builder()\n    .url(\"https://docs.checkout.com/webhook\")\n    .headers(new HashMap<>())\n    .signature(WebhookSignature.builder().key(\"8V8x0dLK%AyD*DNS8JJr\").method(\"HMACSHA256\").build())\n    .build();\n\nEventWorkflowConditionRequest condition1 = EventWorkflowConditionRequest.builder()\n    .events(new HashMap<>())\n    .build();\n\nEntityWorkflowConditionRequest condition2 = EntityWorkflowConditionRequest.builder()\n    .entities(Collections.singletonList(\"workflow_entity_id\"))\n    .build();\n\nProcessingChannelWorkflowConditionRequest condition3 = ProcessingChannelWorkflowConditionRequest.builder()\n    .processingChannels(Collections.singletonList(\"processing_channel_id\"))\n    .build();\n\nCreateWorkflowRequest request = CreateWorkflowRequest.builder()\n    .name(\"name\")\n    .actions(Collections.singletonList(workflowActionRequest))\n    .conditions(Arrays.asList(condition1, condition2, condition3))\n    .build();\n\ntry {\n    CreateWorkflowResponse response = api.workflowsClient().createWorkflow(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.add({\n		name: 'Webhooks workflow',\n		conditions: [\n			{\n				type: 'event',\n				events: {\n					gateway: ['payment_approved', 'payment_declined'],\n				},\n			},\n			{\n				type: 'entity',\n				entities: ['ent_djigcqx4clmufo2sasgomgpqsq'],\n			},\n			{\n				type: 'processing_channel',\n				processing_channels: ['pc_zs5fqhybzc2e3jmq3efvybybpq'],\n			},\n		],\n		actions: [\n			{\n				type: 'webhook',\n				url: 'https://example.com/webhooks',\n				headers: {\n					Authorization: '70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf',\n				},\n				signature: {\n					method: 'HMACSHA256',\n					key: '8V8x0dLK%AyD*DNS8JJr',\n				},\n			},\n		],\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/{workflowId}:
    get:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get a workflow
      description: |
        Get the details of a workflow
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '200':
          description: Workflow retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetWorkflowResponse response = api.WorkflowsClient().GetWorkflow(\"workflow_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.GetWorkflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    GetWorkflowResponse response = api.workflowsClient().getWorkflow(\"workflow_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.get('wf_5zm7uccsc6bencaujumvutvfem');\n} catch (err) {\n	console.log(err.name);\n}"
    delete:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Remove a workflow
      description: |
        Removes a workflow so it is no longer being executed.
        Actions of already executed workflows will be still processed.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '204':
          description: Workflow removed successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.WorkflowsClient().RemoveWorkflow(\"workflow_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    api.workflowsClient().removeWorkflow(\"workflow_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.remove('wf_rou7m32mhmyeblg4xebx5pueoi');\n} catch (err) {\n	console.log(err.name);\n}"
    patch:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Patch a workflow
      description: |
        Update the name of a workflow.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch-workflow-request'
      responses:
        '200':
          description: Workflow updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patch-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nUpdateWorkflowRequest request = new UpdateWorkflowRequest {Name = \"workflow_name\"};\n\ntry\n{\n    UpdateWorkflowResponse response = api.WorkflowsClient().UpdateWorkflow(\"workflow_id\", request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.UpdateWorkflowRequest;\nimport com.checkout.workflows.four.UpdateWorkflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nUpdateWorkflowRequest request = UpdateWorkflowRequest.builder()\n    .name(\"new name\")\n    .build();\n\ntry {\n    UpdateWorkflowResponse response = api.workflowsClient().updateWorkflow(\"workflow_id\", request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.patch('wf_2i7z3lwdoe5uzmomm7yzrytqdy', {\n		name: 'Webhooks workflow updated',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/{workflowId}/actions/{workflowActionId}:
    put:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Update a workflow action
      description: |
        Update a workflow action.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
        - in: path
          name: workflowActionId
          schema:
            type: string
            pattern: ^wfa_[a-z0-9]{26}$
          required: true
          description: The workflow action identifier
          example: wfa_d5estuyxzshubhly2wu3hloehi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-update-workflow-action-request'
      responses:
        '200':
          description: Workflow action updated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow or workflow action not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Actions;\nusing Checkout.Workflows.Four.Actions.Request;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nWorkflowActionRequest request = new WebhookWorkflowActionRequest()\n{\n    Url = \"https://example.com/webhooks/checkout\",\n    Headers = new Dictionary<string, string>()\n    {\n        {\"Authorization\", \"70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf\"}\n    },\n    Signature = new WebhookSignature()\n    {\n        Method = \"HMACSHA256\",\n        Key = \"public-signing-key\"\n    }\n};\n\ntry\n{\n    await api.WorkflowsClient().UpdateWorkflowAction(\"workflow_id\", \"action_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.actions.WebhookSignature;\nimport com.checkout.workflows.four.actions.request.WebhookWorkflowActionRequest;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nWebhookWorkflowActionRequest request = WebhookWorkflowActionRequest.builder()\n    .signature(WebhookSignature.builder().key(\"8V8x0dLK%AyD*DNS8JJr\").method(\"HMACSHA256\").build())\n    .headers(new HashMap<>())\n    .url(\"https://docs.checkout.com/fail\")\n    .build();\n\ntry {\n    api.workflowsClient().updateWorkflowAction(\"workflow_id\", \"action_id\", request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.updateAction('wf_2i7z3lwdoe5uzmomm7yzrytqdy', 'wfa_5qxwp7stgcqufj63mkr42xyeqi', {\n		type: 'webhook',\n		url: 'https://example.com/updated',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/{workflowId}/conditions/{workflowConditionId}:
    put:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Update a workflow condition
      description: |
        Update a workflow condition.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
        - in: path
          name: workflowConditionId
          schema:
            type: string
            pattern: ^wfc_[a-z0-9]{26}$
          required: true
          description: The workflow condition identifier
          example: wfc_d5estuyxzshubhly2wu3hloehi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-update-workflow-condition-request'
      responses:
        '200':
          description: Workflow condition updated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow or workflow condition not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Conditions.Request;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nWorkflowConditionRequest request = new EntityWorkflowConditionRequest();\n\ntry\n{\n    await api.WorkflowsClient().UpdateWorkflowCondition(\"workflow_id\", \"condition_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.conditions.request.EventWorkflowConditionRequest;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nEventWorkflowConditionRequest request = EventWorkflowConditionRequest.builder()\n    .events(new HashMap<>())\n    .build();\n\ntry {\n    api.workflowsClient().updateWorkflowCondition(\"workflow_id\", \"condition_id\", request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.updateCondition(\n		'wf_2i7z3lwdoe5uzmomm7yzrytqdy',\n		'wfc_ybu4t6aruwju5l6ymlc67ya5ne',\n		{\n			type: 'event',\n			events: {\n				gateway: ['card_verification_declined', 'card_verified', 'payment_approved'],\n			},\n		}\n	);\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/{workflowId}/test:
    post:
      servers:
        - url: https://api.sandbox.checkout.com
          description: Sandbox
      security:
        - OAuth:
            - flow
            - flow:workflows
      tags:
        - Workflows
      summary: Test a workflow
      description: >
        Validate a workflow in our Sandbox environment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test-workflow-request'
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z2-7]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '204':
          description: Workflow test initiated
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                    example: 0HLHPN8802NUF:00000003
                  error_type:
                    type: string
                    example: request_invalid
                  error_codes:
                    type: array
                    items:
                      type: string
                      example: event_types_invalid
        '500':
          description: Internal Error
  /workflows/event-types:
    get:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get event types
      description: |
        Get a list of sources and their events for building new workflows
      responses:
        '200':
          description: Event types retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-event-types-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    IList<EventTypesResponse> response = api.WorkflowsClient().GetEventTypes().Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.events.EventTypesResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    List<EventTypesResponse> response = api.workflowsClient().getEventTypes().get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.getEventTypes();\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/events/{eventId}:
    get:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:events
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get an event
      description: |
        Get the details of an event
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: ^evt_[a-z0-9]{26}$
          required: true
          description: The event identifier
          example: evt_x5zm2po6kimubhlfitgt2mfwgi
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-event-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event not found
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Events;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetEventResponse response = api.WorkflowsClient().GetEvent(\"event_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.events.GetEventResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    GetEventResponse response = api.workflowsClient().getEvent(\"event_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.getEvent('evt_hsfxtjwidv6ulah5gdbiqwqnka');\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/events/{eventId}/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow by event
      description: |
        Reflows a past event denoted by the event ID and triggers the actions of any workflows with matching conditions.
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: ^evt_[a-z0-9]{26}$
          required: true
          description: The unique identifier for the event to be reflowed.
          example: evt_x5zm2po6kimubhlfitgt2mfwgi
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-id-validation-error'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = api.WorkflowsClient().ReflowByEvent(\"event_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflowByEvent(\"event_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowByEvent('evt_hsfxtjwidv6ulah5gdbiqwqnka');\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/events/{eventId}/workflow/{workflowId}/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow by event and workflow
      description: |
        Reflows a past event by event ID and workflow ID. Triggers all the actions of a specific event and workflow combination if the event denoted by the event ID matches the workflow conditions.
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: ^evt_[a-z0-9]{26}$
          required: true
          description: The unique identifier for the event to be reflowed.
          example: evt_x5zm2po6kimubhlfitgt2mfwgi
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The identifier of the workflow whose actions you want to trigger.
          example: wf_c8zm2po6kimubhlfitgt2mferf
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-id-validation-error'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = api.WorkflowsClient().ReflowByEventAndWorkflow(\"event_id\", \"workflow_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflowByEventAndWorkflow(\"event_id\", \"workflow_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowByEventAndWorkflow(\n		'evt_hsfxtjwidv6ulah5gdbiqwqnka',\n		'wf_6p73pesh75vu7fqo6p6exhpe54'\n	);\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/events/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow
      description: |
        Reflow past events attached to multiple event IDs and workflow IDs, or to multiple subject IDs and workflow IDs. If you don't specify any workflow IDs, all matching workflows will be retriggered.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/reflow-events-by-event-and-workflow-ids'
                - $ref: '#/components/schemas/reflow-events-by-subject-and-workflow-ids'
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ids-validation-error'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nReflowRequest request = new ReflowByEventsRequest()\n{\n    Events = new List<string>()\n    {\n        \"evt_lzmo6p0i3612judj754w1ngtil\",\n        \"evt_05z6xuagtti48ajyfbuekg6a0a\"\n    },\n    Workflows = new List<string>()\n    {\n        \"wf_sq8jnqi9i749hhb470bu308uk2\",\n        \"wf_bz91q7i4ks4sr0kasmas2xhp56\"\n\n    }\n};\n\ntry\n{\n    ReflowResponse response = api.WorkflowsClient().Reflow(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowByEventsRequest;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nReflowByEventsRequest request = ReflowByEventsRequest.builder()\n    .events(Arrays.asList(\"event_id_1\", \"event_id_2\"))\n    .workflows(Arrays.asList(\"workflow_id_1\", \"workflow_id_2\"))\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflow(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowEventsByEventAndWorkflowIds(\n		['evt_hsfxtjwidv6ulah5gdbiqwqnka'],\n		['wf_6p73pesh75vu7fqo6p6exhpe54']\n	);\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/events/subject/{subjectId}:
    get:
      servers:
        - url: https://api.checkout.com
          description: Live API
        - url: https://api.sandbox.checkout.com
          description: Sandbox API
      security:
        - OAuth:
            - flow
            - flow:events
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get subject events
      description: |
        Get all events that relate to a specific subject
      parameters:
        - in: path
          name: subjectId
          schema:
            type: string
          required: true
          description: The event identifier
          example: pay_wlu3wxc26jounofs5iez75qaqa
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject-events-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '404':
          description: Subject not found
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = api.WorkflowsClient().ReflowBySubject(\"subject_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.events.SubjectEventsResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    SubjectEventsResponse response = api.workflowsClient().getSubjectEvents(\"subject_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.getSubjectEvents('pay_ymhp72mhubcejmjjwcupzalm5e');\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/events/subject/{subjectId}/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow by subject
      description: |
        Reflows the events associated with a subject ID (for example, a payment ID or a dispute ID) and triggers the actions of any workflows with matching conditions.
      parameters:
        - in: path
          name: subjectId
          schema:
            type: string
            pattern: ^[a-z]{3}_[a-z0-9]{26}$
          required: true
          description: The subject identifier (for example, a payment ID or a dispute ID). The events associated with these subjects will be reflowed.
          example: pay_x5zm2po6kimubhlfitgt2mfwgi
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject-id-validation-error'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = api.WorkflowsClient().ReflowBySubject(\"subject_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\n\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflowBySubject(\"subject_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowBySubject('pay_ymhp72mhubcejmjjwcupzalm5e');\n} catch (err) {\n	console.log(err.name);\n}"
  /workflows/events/subject/{subjectId}/workflow/{workflowId}/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow by subject and workflow
      description: |
        Reflows the events associated with a subject ID (for example, a payment ID or a dispute ID) and triggers the actions of the specified workflow if the conditions match.
      parameters:
        - in: path
          name: subjectId
          schema:
            type: string
            pattern: ^[a-z]{3}_[a-z0-9]{26}$
          required: true
          description: The subject identifier (for example, a payment ID or a dispute ID). The events associated with these subjects will be reflowed.
          example: pay_x5zm2po6kimubhlfitgt2mfwgi
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The identifier of the workflow whose actions you want to trigger.
          example: wf_c8zm2po6kimubhlfitgt2mferf
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject-id-validation-error'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = api.WorkflowsClient().ReflowBySubjectAndWorkflow(\"subject_id\", \"workflow_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflowBySubjectAndWorkflow(\"subject_id\", \"workflow_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowBySubjectAndWorkflow(\n		'pay_ymhp72mhubcejmjjwcupzalm5e',\n		'wf_6p73pesh75vu7fqo6p6exhpe54'\n	);\n} catch (err) {\n	console.log(err.name);\n}"
  /forex/quotes:
    post:
      tags:
        - Forex
      security:
        - OAuth:
            - fx
      summary: Request a quote
      description: |
        Request an exchange rate between a source and destination currency pair that will be used to process one or more payouts. You must submit a payout with the FX quote identifier before the quote expires. If the FX quote identifier is omitted from a payout, and the source and destination currencies differ, the current market exchange rate will be used.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequest'
      responses:
        '201':
          description: Quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Forex;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Fx)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nQuoteRequest request = new QuoteRequest()\n{\n    SourceCurrency = Currency.GBP,\n    SourceAmount = 10,\n    DestinationCurrency = Currency.USD,\n    ProcessChannelId = \"pc_abcdefghijklmnopqrstuvwxyz\"\n};\n\ntry\n{\n    QuoteResponse response = api.ForexClient().RequestQuote(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Currency;\nimport com.checkout.forex.four.QuoteRequest;\nimport com.checkout.forex.four.QuoteResponse;\nimport com.checkout.four.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FX) // more scopes available\n    .build();\n\nQuoteRequest request = QuoteRequest.builder()\n    .sourceCurrency(Currency.GBP)\n    .sourceAmount(30000L)\n    .destinationCurrency(Currency.USD)\n    .processChannelId(\"process_channel_id\")\n    .build();\n\ntry {\n    QuoteResponse response = api.forexClient().requestQuote(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let forex = await cko.forex.request({\n		source_currency: 'GBP',\n		source_amount: 30000,\n		destination_currency: 'USD',\n		processing_channel_id: 'pc_zs5fqhybzc2e3jmq3efvybybpq',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /hosted-payments:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Hosted Payments Page
      summary: Create a Hosted Payments Page session
      operationId: createAHostedPaymentsSession
      description: |
        Create a Hosted Payments Page session and pass through all the payment information, like the amount, currency, country and reference.
    
        To get started with our Hosted Payments Page, contact your Solutions Engineer or integration@checkout.com.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostedPaymentsRequest'
      responses:
        '201':
          description: Created Hosted Payments Page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostedPaymentsResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /hosted-payments/{id}:
    get:
      security:
        - ApiSecretKey: []
      tags:
        - Hosted Payments Page
      summary: Get Hosted Payments Page details
      operationId: getHostedPaymentsPageDetails
      description: |
        Retrieve details about a specific Hosted Payments Page using the ID returned when it was created. In the response, you will see the status of the Hosted Payments Page.<br><br>
        For more information, see the <a target="_blank" href="https://docs.checkout.com/integrate/hosted-payments-page">Hosted Payments Page documentation</a>.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/HostedPaymentId'
      responses:
        '200':
          description: Hosted Payments Page details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHostedPaymentsResponse'
        '401':
          description: Unauthorized
        '404':
          description: Hosted Payments Page not found
  /instruments:
    post:
      tags:
        - Instruments
      security:
        - OAuth:
            - vault
            - vault:instruments
        - ApiSecretKey: [ ]
      summary: Create an instrument
      description: |
        Create a card or bank account payment instrument to use for future payments and payouts. <br><br>The parameters you need to provide when creating a bank account payment instrument depend on the account's country and currency. See <a href="https://docs.checkout.com/four/bank-payouts/payout-formatting" target="_blank">our docs</a> and the <a href="#tag/Instruments/paths/~1validation~1bank-accounts~1{country}~1{currency}/get">GET endpoint below</a>.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInstrumentRequest'
      responses:
        '201':
          description: Instrument created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInstrumentResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Common.Four;\nusing Checkout.Instruments.Four.Create;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.VaultInstruments)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCreateTokenInstrumentRequest request = new CreateTokenInstrumentRequest\n{\n    Token = \"tok_asoto22g2fsu7prwomy12sgfsa\",\n    AccountHolder = new AccountHolder()\n    {\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        BillingAddress = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        Phone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        }\n    },\n    Customer = new CreateCustomerInstrumentRequest()\n    {\n        Email = \"email@docs.checkout.com\",\n        Name = \"FirstName LastName\",\n        Phone = new Phone()\n        {\n            CountryCode = \"1\",\n            Number = \"4155552671\"\n        },\n        Default = true\n    }\n};\n\ntry\n{\n    CreateTokenInstrumentResponse response =\n        api.InstrumentsClient().Create<CreateTokenInstrumentResponse>(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Phone;\nimport com.checkout.common.four.AccountHolder;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.instruments.four.create.CreateCustomerInstrumentRequest;\nimport com.checkout.instruments.four.create.CreateInstrumentResponse;\nimport com.checkout.instruments.four.create.CreateInstrumentTokenRequest;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nCreateInstrumentTokenRequest request = CreateInstrumentTokenRequest.builder()\n    .token(\"token\")\n    .accountHolder(AccountHolder.builder()\n        .firstName(\"FirstName\")\n        .lastName(\"LastName\")\n        .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n        .billingAddress(Address.builder()\n            .addressLine1(\"CheckoutSdk.com\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .build())\n    .customer(CreateCustomerInstrumentRequest.builder()\n        .id(\"customer_id\")\n        .build())\n    .build();\n\ntry {\n    CreateInstrumentResponse response = api.instrumentsClient().create(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const instrument = await cko.instruments.create({\n		// infered type \"token\",\n		token: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /instruments/{id}:
    get:
      security:
        - OAuth:
            - vault
            - vault:instruments
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Get instrument details
      operationId: getInstrumentDetails
      description: Retrieve the details of a payment instrument.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(src)_(\\w{26})$"
          required: true
          description: The instrument ID
      responses:
        '200':
          description: Instrument retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveInstrumentResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Instruments.Four.Get;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.VaultInstruments)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetInstrumentResponse response = api.InstrumentsClient().Get(\"instrument_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.instruments.four.get.GetCardInstrumentResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    // Or GetBankAccountInstrumentResponse\n    GetCardInstrumentResponse response = (GetCardInstrumentResponse) api.instrumentsClient().get(\"instrument_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const instrument = await cko.instruments.get('src_udfsqsgpjykutgs26fiejgizau');\n} catch (err) {\n	console.log(err.name);\n}"
    patch:
      tags:
        - Instruments
      security:
        - OAuth:
            - vault
            - vault:instruments
        - ApiSecretKey: [ ]
      summary: Update an instrument
      description: |
        Update the details of a payment instrument.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^(src_)[a-z0-9]{26}$'
          example: src_ubfj2q76miwundwlk72vxt2i7q
          description: The instrument ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstrumentRequest'
      responses:
        '200':
          description: Instrument updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateInstrumentResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found or not associated with client
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Common.Four;\nusing Checkout.Instruments.Four.Update;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.VaultInstruments)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nUpdateInstrumentRequest request = new UpdateCardInstrumentRequest\n{\n    ExpiryMonth = 10,\n    ExpiryYear = 2027,\n    Name = \"FirstName LastName\",\n    AccountHolder = new AccountHolder()\n    {\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        BillingAddress = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        Phone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        }\n    },\n    Customer = new UpdateCustomerRequest()\n    {\n        Id = \"cus_y3oqhf46pyzuxjbcn2giaqnb44\",\n        Default = true\n    }\n};\n\ntry\n{\n    UpdateInstrumentResponse response = api.InstrumentsClient().Update(\"instrument_id\", request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Phone;\nimport com.checkout.common.four.AccountHolder;\nimport com.checkout.common.four.UpdateCustomerRequest;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.instruments.four.update.UpdateInstrumentCardRequest;\nimport com.checkout.instruments.four.update.UpdateInstrumentResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nUpdateInstrumentCardRequest updateRequest = UpdateInstrumentCardRequest.builder()\n    .expiryMonth(10)\n    .expiryYear(2027)\n    .name(\"name\")\n    .customer(UpdateCustomerRequest.builder().id(\"customer_id\").defaultCustomer(true).build())\n    .accountHolder(AccountHolder.builder()\n        .firstName(\"FirstName\")\n        .lastName(\"LastName\")\n        .phone(Phone.builder().countryCode(\"+1\").number(\"415 555 2671\").build())\n        .billingAddress(Address.builder()\n            .addressLine1(\"CheckoutSdk.com\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .build())\n    .build();\n\ntry {\n    UpdateInstrumentResponse response = api.instrumentsClient().update(\"instrument_id\", updateRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const instrumentResponse = await cko.instruments.update('src_udfsqsgpjykutgs26fiejgizau', {\n		expiry_year: 2030,\n	});\n} catch (err) {\n	console.log(err.name);\n}"
    delete:
      tags:
        - Instruments
      security:
        - OAuth:
            - vault
            - vault:instruments
        - ApiSecretKey: [ ]
      summary: Delete an instrument
      description: |
        Delete a payment instrument.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^(src_)[a-z0-9]{26}$'
          example: src_ubfj2q76miwundwlk72vxt2i7q
          description: The ID of the payment instrument to be deleted
      responses:
        '204':
          description: Instrument deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found or not associated with client
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.VaultInstruments)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.InstrumentsClient().Delete(\"instrument_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    api.instrumentsClient().delete(\"instrumentId\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const deleteOutcome = await cko.instruments.delete(instrument.id);\n} catch (err) {\n	console.log(err.name);\n}"
  /marketplace/entities:
    post:
      description: |
        Onboard a sub-entity so they can start receiving payments. Once created, Checkout.com will run due diligence checks.
        If the checks are successful, we'll enable payment capabilities for that sub-entity and they will start receiving payments.
      summary: Onboard a sub-entity
      requestBody:
        required: true
        description: The sub-entity to be onboarded.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCreateRequest'
            examples:
              Company:
                value:
                  reference: superhero1234
                  contact_details:
                    phone:
                      number: '2345678910'
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - '5669'
                  company:
                    business_registration_number: '452349600005'
                    legal_name: 'Super Hero Masks Inc.'
                    trading_name: 'Super Hero Masks'
                    principal_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    registered_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    representatives:
                      - first_name: 'John'
                        last_name: 'Doe'
                        address:
                          address_line1: '90 Tottenham Court Road'
                          city: 'London'
                          zip: 'W1T4TJ'
                          country: 'GB'
                        identification:
                          national_id_number: 'AB123456C'
                        phone:
                          number: '2345678910'
                        date_of_birth:
                          day: 05
                          month: 06
                          year: 1995
              Individual:
                value:
                  reference: superhero1234
                  contact_details:
                    phone:
                      number: '2345678910'
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - '5669'
                  individual:
                    first_name: 'John'
                    last_name: 'Doe'
                    trading_name: "John's Super Hero Masks"
                    registered_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    national_tax_id: 'TAX123456'
                    date_of_birth:
                      day: 05
                      month: 06
                      year: 1995
                    identification:
                      national_id_number: 'AB123456C'
      security:
        - OAuth:
            - marketplace
      responses:
        '201':
          description: Sub-entity onboarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBasicResponseWithLinks'
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: Sub-entity onboarding request conflicted with an existing sub-entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityLinks'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Marketplace;\nusing Phone = Checkout.Marketplace.Phone;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Marketplace)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nOnboardEntityRequest request = new OnboardEntityRequest\n{\n    Reference = \"reference\",\n    ContactDetails = new ContactDetails()\n    {\n        Phone = new Phone()\n        {\n            Number = \"2345678910\"\n        }\n    },\n    Profile = new Profile()\n    {\n        Urls = new List<string>()\n        {\n            \"https://www.superheroexample.com\"\n        },\n        Mccs = new List<string>()\n        {\n            \"5669\"\n        }\n    },\n    Individual = new Individual()\n    {\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        TradingName = \"John's Super Hero Masks\",\n        RegisteredAddress = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        NationalTaxId = \"TAX123456\",\n        DateOfBirth = new DateOfBirth()\n        {\n            Day = 5,\n            Month = 6,\n            Year = 1995\n        },\n        Identification = new Identification()\n        {\n            NationalIdNumber = \"AB123456C\"\n        }\n    }\n};\n\ntry\n{\n    OnboardEntityResponse response = api.MarketplaceClient().CreateEntity(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.marketplace.ContactDetails;\nimport com.checkout.marketplace.DateOfBirth;\nimport com.checkout.marketplace.Document;\nimport com.checkout.marketplace.DocumentType;\nimport com.checkout.marketplace.Identification;\nimport com.checkout.marketplace.Individual;\nimport com.checkout.marketplace.OnboardEntityRequest;\nimport com.checkout.marketplace.OnboardEntityResponse;\nimport com.checkout.marketplace.Phone;\nimport com.checkout.marketplace.Profile;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.MARKETPLACE) // more scopes available\n    .build();\n\nOnboardEntityRequest onboardEntityRequest = OnboardEntityRequest.builder()\n    .reference(\"reference\")\n    .contactDetails(ContactDetails.builder()\n        .phone(Phone.builder().number(\"2345678910\").build())\n        .build())\n    .profile(Profile.builder()\n        .urls(Arrays.asList(\"https://docs.checkout.com/1\", \"https://docs.checkout.com/2\"))\n        .mccs(Collections.singletonList(\"0742\"))\n        .build())\n    .individual(Individual.builder()\n        .firstName(\"FirstName\")\n        .lastName(\"LastName\")\n        .tradingName(\"TradingName\")\n        .registeredAddress(Address.builder()\n            .addressLine1(\"Checkout.com\")\n            .addressLine1(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"WIT 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .nationalTaxId(\"TAX123456\")\n        .dateOfBirth(DateOfBirth.builder()\n            .day(5)\n            .month(6)\n            .year(1990)\n            .build())\n        .identification(Identification.builder()\n            .nationalIdNumber(\"AB123456C\")\n            .document(Document.builder()\n                    .back(\"number\")\n                    .front(\"number\")\n                    .type(DocumentType.DRIVING_LICENSE)\n                    .build())\n            .build())\n        .build())\n    .build();\n\ntry {\n    OnboardEntityResponse response = api.marketplaceClient().createEntity(onboardEntityRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['marketplace'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let marketplace = await cko.marketplace.onboardSubEntity({\n		reference: 'superhero1234',\n		contact_details: {\n			phone: {\n				number: '2345678910',\n			},\n		},\n		profile: {\n			urls: ['https://www.superheroexample.com'],\n			mccs: ['0742'],\n		},\n		company: {\n			business_registration_number: '452349600005',\n			legal_name: 'Super Hero Masks Inc.',\n			trading_name: 'Super Hero Masks',\n			principal_address: {\n				address_line1: '90 Tottenham Court Road',\n				city: 'London',\n				zip: 'W1T4TJ',\n				country: 'GB',\n			},\n			registered_address: {\n				address_line1: '90 Tottenham Court Road',\n				city: 'London',\n				zip: 'W1T4TJ',\n				country: 'GB',\n			},\n			representatives: [\n				{\n					first_name: 'John',\n					last_name: 'Doe',\n					address: {\n						address_line1: '90 Tottenham Court Road',\n						city: 'London',\n						zip: 'W1T4TJ',\n						country: 'GB',\n					},\n					identification: {\n						national_id_number: 'AB123456C',\n					},\n					phone: {\n						number: '2345678910',\n					},\n					date_of_birth: {\n						day: 5,\n						month: 6,\n						year: 1995,\n					},\n				},\n			],\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /marketplace/entities/{id}:
    parameters:
      - in: path
        name: id
        description: The ID of the sub-entity.
    
        required: true
        allowEmptyValue: false
        example: ent_w4jelhppmfiufdnatam37wrfc4
        style: simple
        schema:
          type: string
    get:
      description: Use this endpoint to retrieve a sub-entity and its full details.
      summary: Get sub-entity details
      security:
        - OAuth:
            - marketplace
      responses:
        '200':
          description: Sub-entity retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExtendedResponse'
              examples:
                Company:
                  value:
                    id: ent_wxglze3wwywujg4nna5fb7ldli
                    reference: superhero1234
                    capabilities:
                      payments:
                        enabled: false
                      payouts:
                        enabled: false
                    status: pending
                    contact_details:
                      phone:
                        number: '2345678910'
                    profile:
                      urls:
                        - https://www.superheroexample.com
                      mccs:
                        - '5669'
                    company:
                      business_registration_number: '452349600005'
                      legal_name: Super Hero Masks Inc.
                      trading_name: Super Hero Masks
                      principal_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      registered_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      representatives:
                        - first_name: John
                          middle_name:
                          last_name: Doe
                          address:
                            address_line1: 90 Tottenham Court Road
                            city: London
                            zip: W1T4TJ
                            country: GB
                          identification:
                            national_id_number: 'AB123456C'
                            document:
                              type: 'driving_license'
                              front: 'file_wxglze3wwywujg4nna5fb7ldli'
                              back: 'file_adglze3wwywujg4nna5fb7l1sg'
                          phone:
                            number: '2345678910'
                          date_of_birth:
                            day: 05
                            month: 06
                            year: 1995
                    instruments:
                      - id: src_hmnkhxlshf3uhljow7zt7sf2cq
                        label: Peter's Personal Account
                    _links:
                      self:
                        href: https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli
                Individual:
                  value:
                    id: ent_wxglze3wwywujg4nna5fb7ldli
                    reference: superhero1234
                    capabilities:
                      payments:
                        enabled: false
                      payouts:
                        enabled: false
                    contact_details:
                      phone:
                        number: '2345678910'
                    profile:
                      urls:
                        - https://www.superheroexample.com
                      mccs:
                        - '5669'
                    individual:
                      first_name: John
                      middle_name: Paul
                      last_name: Doe
                      trading_name: Super Hero Masks
                      legal_name: John Paul Doe
                      national_tax_id: '1234567'
                      registered_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      date_of_birth:
                        day: 05
                        month: 06
                        year: 1995
                      identification:
                        national_id_number: 'AB123456C'
                        document:
                          type: 'driving_license'
                          front: 'file_wxglze3wwywujg4nna5fb7ldli'
                          back: 'file_adglze3wwywujg4nna5fb7l1sg'
                    instruments:
                      - id: src_hmnkhxlshf3uhljow7zt7sf2cq
                        label: Peter's Personal Account
                    _links:
                      self:
                        href: https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '401':
          description: Unauthorized
        '404':
          description: Sub-entity not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Marketplace;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Marketplace)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    OnboardEntityDetailsResponse response = api.MarketplaceClient().GetEntity(\"entity_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.marketplace.OnboardEntityDetailsResponse;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.MARKETPLACE) // more scopes available\n    .build();\n\ntry {\n    OnboardEntityDetailsResponse response = api.marketplaceClient().getEntity(\"entity_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['marketplace'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let marketplace = await cko.marketplace.getSubEntityDetails('ent_aneh5mtyobxzazriwuevngrz6y');\n} catch (err) {\n	console.log(err.name);\n}"
    put:
      description: |
        You can update all fields under the Contact details, Profile, and Company objects. You can also add <strong>identification</strong> information to complete due diligence requirements.<br><br>
        <strong>Note:</strong> when you update a sub-entity we may conduct further due diligence checks when necessary. During these checks, your payment capabilities will remain the same.
      summary: Update sub-entity details
      requestBody:
        required: true
        description: The sub-entity to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityUpdateRequest'
            examples:
              Company:
                value:
                  contact_details:
                    phone:
                      number: '2345678910'
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - '5669'
                  company:
                    business_registration_number: '452349600005'
                    legal_name: 'Super Hero Masks Inc.'
                    trading_name: 'Super Hero Masks'
                    principal_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    registered_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    representatives:
                      - first_name: 'John'
                        last_name: 'Doe'
                        address:
                          address_line1: '90 Tottenham Court Road'
                          city: 'London'
                          zip: 'W1T4TJ'
                          country: 'GB'
                        identification:
                          national_id_number: 'AB123456C'
                        phone:
                          number: '2345678910'
                        date_of_birth:
                          day: 05
                          month: 06
                          year: 1995
              Individual:
                value:
                  contact_details:
                    phone:
                      number: '2345678910'
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - '5669'
                  individual:
                    first_name: 'John'
                    last_name: 'Doe'
                    trading_name: "John's Super Hero Masks"
                    registered_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    national_tax_id: 'TAX123456'
                    date_of_birth:
                      day: 05
                      month: 06
                      year: 1995
                    identification:
                      national_id_number: 'AB123456C'
      security:
        - OAuth:
            - marketplace
      responses:
        '200':
          description: Sub-entity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBasicResponseWithLinks'
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '401':
          description: Unauthorized
        '404':
          description: Sub-entity not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Marketplace;\nusing Phone = Checkout.Marketplace.Phone;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Marketplace)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nOnboardEntityRequest request = new OnboardEntityRequest\n{\n    Reference = \"reference\",\n    ContactDetails = new ContactDetails()\n    {\n        Phone = new Phone()\n        {\n            Number = \"2345678910\"\n        }\n    },\n    Profile = new Profile()\n    {\n        Urls = new List<string>()\n        {\n            \"https://www.superheroexample.com\"\n        },\n        Mccs = new List<string>()\n        {\n            \"5669\"\n        }\n    },\n    Individual = new Individual()\n    {\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        TradingName = \"John's Super Hero Masks\",\n        RegisteredAddress = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        NationalTaxId = \"TAX123456\",\n        DateOfBirth = new DateOfBirth()\n        {\n            Day = 5,\n            Month = 6,\n            Year = 1995\n        },\n        Identification = new Identification()\n        {\n            NationalIdNumber = \"AB123456C\"\n        }\n    }\n};\n\ntry\n{\n    OnboardEntityResponse response = api.MarketplaceClient().UpdateEntity(\"entity_id\", request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.marketplace.ContactDetails;\nimport com.checkout.marketplace.DateOfBirth;\nimport com.checkout.marketplace.Document;\nimport com.checkout.marketplace.DocumentType;\nimport com.checkout.marketplace.Identification;\nimport com.checkout.marketplace.Individual;\nimport com.checkout.marketplace.OnboardEntityRequest;\nimport com.checkout.marketplace.OnboardEntityResponse;\nimport com.checkout.marketplace.Phone;\nimport com.checkout.marketplace.Profile;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.MARKETPLACE) // more scopes available\n    .build();\n\nOnboardEntityRequest request = OnboardEntityRequest.builder()\n    .reference(\"reference\")\n    .contactDetails(ContactDetails.builder()\n        .phone(Phone.builder().number(\"415 555 2671\").build())\n        .build())\n    .profile(Profile.builder()\n        .urls(Collections.singletonList(\"https://docs.checkout.com\"))\n        .mccs(Collections.singletonList(\"0742\"))\n        .build())\n    .individual(Individual.builder()\n        .firstName(\"FirstName\")\n        .lastName(\"LastName\")\n        .tradingName(\"Trading\")\n        .registeredAddress(Address.builder()\n            .addressLine1(\"Checkout.com\")\n            .addressLine1(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"WIT 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .nationalTaxId(\"TAX123456\")\n        .dateOfBirth(DateOfBirth.builder()\n            .day(5)\n            .month(6)\n            .year(1995)\n            .build())\n        .identification(Identification.builder()\n            .nationalIdNumber(\"AB123456C\")\n            .document(Document.builder()\n                    .back(\"number\")\n                    .front(\"number\")\n                    .type(DocumentType.PASSPORT)\n                    .build())\n            .build())\n        .build())\n    .build();\n\ntry {\n    OnboardEntityResponse response = api.marketplaceClient().updateEntity(request, \"entity_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['marketplace'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let marketplace = await cko.marketplace.updateSubEntityDetails('ent_aneh5mtyobxzazriwuevngrz6y', {\n		reference: 'superhero12346',\n		contact_details: {\n			phone: {\n				number: '2345678910',\n			},\n		},\n		profile: {\n			urls: ['https://www.superheroexample.com'],\n			mccs: ['0742'],\n		},\n		company: {\n			business_registration_number: '452349600005',\n			legal_name: 'Super Hero Masks Inc.',\n			trading_name: 'Super Hero Masks',\n			principal_address: {\n				address_line1: '90 Tottenham Court Road',\n				city: 'London',\n				zip: 'W1T4TJ',\n				country: 'GB',\n			},\n			registered_address: {\n				address_line1: '90 Tottenham Court Road',\n				city: 'London',\n				zip: 'W1T4TJ',\n				country: 'GB',\n			},\n			representatives: [\n				{\n					first_name: 'John',\n					last_name: 'Doe',\n					address: {\n						address_line1: '90 Tottenham Court Road',\n						city: 'London',\n						zip: 'W1T4TJ',\n						country: 'GB',\n					},\n					identification: {\n						national_id_number: 'AB123456C',\n					},\n					phone: {\n						number: '2345678910',\n					},\n					date_of_birth: {\n						day: 5,\n						month: 6,\n						year: 1995,\n					},\n				},\n			],\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /marketplace/entities/{id}/instruments:
    parameters:
      - in: path
        name: id
        description: The ID of the sub-entity.
        required: true
        allowEmptyValue: false
        example: ent_w4jelhppmfiufdnatam37wrfc4
        style: simple
        schema:
          type: string
    post:
      description: Create a bank account payment instrument for your sub-entity that you can later use as the destination for their payouts.
      summary: Add a payment instrument
      requestBody:
        required: true
        description: A JSON payload containing the payment instrument details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarketplaceInstrumentCreateRequest'
            examples:
              BankAccount:
                value:
                  label: Peter's Personal Account
                  type: bank_account
                  account_number: '12345678'
                  bank_code: '050389'
                  currency: GBP
                  country: GB
                  account_holder:
                    first_name: Peter
                    last_name: Parker
                    billing_address:
                      address_line1: 90 Tottenham Court Road
                      city: London
                      state: London
                      zip: W1T 4TJ
                      country: GB
                  document:
                    type: bank_statement
                    file_id: file_wxglze3wwywujg4nna5fb7ldli
      security:
        - OAuth:
            - marketplace
      responses:
        '202':
          description: Instrument creation request accepted
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Marketplace;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Marketplace)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nMarketplacePaymentInstrument request = new MarketplacePaymentInstrument()\n{\n    Label = \"Peter's Personal Account\",\n    AccountNumber = \"12345678\",\n    BankCode = \"050389\",\n    Currency = Currency.GBP,\n    Country = CountryCode.GB,\n    AccountHolder = new MarketplaceAccountHolder()\n    {\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        BillingAddress = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        }\n    },\n    Document = new InstrumentDocument()\n    {\n        Type = \"bank_statement\",\n        FileId = \"file_wxglze3wwywujg4nna5fb7ldli\"\n    }\n};\n\ntry\n{\n    await api.MarketplaceClient().CreatePaymentInstrument(\"entity_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.common.four.AccountType;\nimport com.checkout.common.four.BankDetails;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.marketplace.InstrumentDocument;\nimport com.checkout.marketplace.MarketplacePaymentInstrument;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.MARKETPLACE) // more scopes available\n    .build();\n\nMarketplacePaymentInstrument marketplacePaymentInstrument = MarketplacePaymentInstrument.builder()\n    .accountNumber(\"123456789\")\n    .accountType(AccountType.CASH)\n    .bank(BankDetails.builder().name(\"bank_name\").address(Address.builder().build()).build())\n    .bankCode(\"bank_code\")\n    .bban(\"bban\")\n    .branchCode(\"123\")\n    .country(CountryCode.GB)\n    .currency(Currency.GBP)\n    .document(new InstrumentDocument(\"document\", \"file\"))\n    .iban(\"iban\")\n    .label(\"mkt-1\")\n    .swiftBic(\"BIC\")\n    .build();\n\ntry {\n    api.marketplaceClient().createPaymentInstrument(marketplacePaymentInstrument, \"entity_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['marketplace'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let marketplace = await cko.marketplace.addPaymentInstrument('ent_aneh5mtyobxzazriwuevngrz6y', {\n		label: \"Peter's Personal Account\",\n		type: 'bank_account',\n		account_number: '12345678',\n		bank_code: '050389',\n		currency: 'GBP',\n		country: 'GB',\n		account_holder: {\n			first_name: 'Peter',\n			last_name: 'Parker',\n			billing_address: {\n				address_line1: '90 Tottenham Court Road',\n				city: 'London',\n				state: 'London',\n				zip: 'W1T 4TJ',\n				country: 'GB',\n			},\n		},\n		document: {\n			type: 'bank_statement',\n			file_id: 'file_wxglze3wwywujg4nna5fb7ldli',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /payment-links:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payment Links
      summary: Create a Payment Link
      operationId: createAPaymentLinkSession
      description: |
        Create a Payment Link and pass through all the payment information, like the amount, currency, country and reference.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentLinksRequest'
      responses:
        '201':
          description: Create Payment Link Page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /payment-links/{id}:
    get:
      security:
        - ApiSecretKey: []
      tags:
        - Payment Links
      summary: Get Payment Link details
      operationId: getPaymentLinkDetails
      description: |
        Retrieve details about a specific Payment Link using its ID returned when the link was created. In the response, you will see the status of the Payment Link.<br><br>
        For more information, see the <a target="_blank" href="https://docs.checkout.com/integrate/payment-links">Payment Links documentation</a>.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/PaymentLinkId'
      responses:
        '200':
          description: Payment Link details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentLinkResponse'
        '401':
          description: Unauthorized
        '404':
          description: Payment Link session not found
  /payments:
    post:
      security:
        - OAuth:
            - gateway
            - gateway:payment
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Request a payment or payout
      operationId: requestAPaymentOrPayout
      description: |
        Send a payment or payout.<br><br><b>Note</b>: successful payout requests will always return a 202 response.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PaymentRequest'
                - $ref: '#/components/schemas/PayoutRequest'
            examples:
              Payment:
                value:
                  source:
                    type: token
                    token: tok_4gzeau5o2uqubbk6fufs3m7p54
                  amount: 6540
                  currency: USD
                  payment_type: Recurring
                  reference: 'ORD-5023-4E89'
                  description: 'Set of 3 masks'
                  capture: true
                  capture_on: '2019-09-10T10:11:12Z'
                  customer:
                    id: 'cus_udst2tfldj6upmye2reztkmm4i'
                    email: 'brucewayne@gmail.com'
                    name: 'Bruce Wayne'
                  billing_descriptor:
                    name: SUPERHEROES.COM
                    city: GOTHAM
                  shipping:
                    address:
                      address_line1: Checkout.com
                      address_line2: 90 Tottenham Court Road
                      city: London
                      state: London
                      zip: W1T 4TJ
                      country: GB
                    phone:
                      country_code: '+1'
                      number: 415 555 2671
                  3ds:
                    enabled: true
                    attempt_n3d: true
                    eci: '05'
                    cryptogram: AgAAAAAAAIR8CQrXcIhbQAAAAAA=
                    xid: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
                    version: '2.0.1'
                  previous_payment_id: 'pay_fun26akvvjjerahhctaq2uzhu4'
                  risk:
                    enabled: false
                  success_url: 'http://example.com/payments/success'
                  failure_url: 'http://example.com/payments/fail'
                  payment_ip: '90.197.169.245'
                  recipient:
                    dob: '1985-05-15'
                    account_number: '5555554444'
                    zip: W1T
                    last_name: Jones
                  metadata:
                    coupon_code: 'NY2018'
                    partner_id: 123989
              Payout:
                value:
                  source:
                    type: 'currency_account'
                    id: 'ca_y3oqhf46pyzuxjbcn2giaqnb44'
                  destination:
                    type: 'id'
                    id: 'src_gsd2agaqd2sernz5tpcfv555nq'
                  amount: 1000
                  currency: GBP
                  reference: 'PO-215-5721'
                  billing_descriptor:
                    reference: 'Withdrawal'
                  sender:
                    type: 'instrument'
                    reference: '8285282045818'
                  instruction:
                    purpose: 'Withdrawal'
                    scheme: 'local'
                    quote_id: 'qte_mbabizu24mvu3mela5njyhpit4'
                  processing_channel_id: 'pc_hpswyyx23geezflc2ocz3exn4y'
    
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
              example:
                id: 'pay_mbabizu24mvu3mela5njyhpit4'
                action_id: 'act_mbabizu24mvu3mela5njyhpit4'
                amount: 6540
                currency: 'USD'
                approved: true
                status: 'Authorized'
                auth_code: '770687'
                response_code: '10000'
                response_summary: 'Approved'
                3ds:
                  downgraded: true
                  enrolled: 'N'
                risk:
                  flagged: true
                source:
                  type: 'card'
                  id: 'src_nwd3m4in3hkuddfpjsaevunhdy'
                  billing_address:
                    address_line1: 'Checkout.com'
                    address_line2: '90 Tottenham Court Road'
                    city: 'London'
                    state: 'London'
                    zip: 'W1T 4TJ'
                    country: 'GB'
                  phone:
                    country_code: '+1'
                    number: '415 555 2671'
                  last4: '4242'
                  fingerprint: 'F31828E2BDABAE63EB694903825CDD36041CC6ED461440B81415895855502832'
                  bin: '424242'
                customer:
                  id: 'cus_udst2tfldj6upmye2reztkmm4i'
                  email: 'brucewayne@gmail.com'
                  name: 'Bruce Wayne'
                processed_on: '2019-09-10T10:11:12Z'
                reference: 'ORD-5023-4E89'
                processing:
                  retrieval_reference_number: '909913440644'
                  acquirer_transaction_id: '440644309099499894406'
                  recommendation_code: "02"
                eci: '06'
                scheme_id: '489341065491658'
                _links:
                  self:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4'
                  action:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions'
                  void:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/captures'
                  capture:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/voids'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '202':
          description: Payment asynchronous or further action required
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentAcceptedResponse'
                  - $ref: '#/components/schemas/PayoutAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                    example: 0HL80RJLS76I7
                  error_type:
                    type: string
                    example: request_invalid
                  error_codes:
                    type: array
                    items:
                      type: string
                      example: duplicate_request
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Payments;\nusing Checkout.Payments.Four.Request;\nusing Checkout.Payments.Four.Request.Source;\nusing Checkout.Payments.Four.Response;\nusing BillingDescriptor = Checkout.Payments.Four.BillingDescriptor;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nPaymentRequest request = new PaymentRequest\n{\n    Source = new RequestTokenSource()\n    {\n        Token = \"tok_4gzeau5o2uqubbk6fufs3m7p54\"\n    },\n    Amount = 10,\n    Currency = Currency.USD,\n    PaymentType = PaymentType.Recurring,\n    Reference = \"reference\",\n    Description = \"Set of 3 masks\",\n    Capture = true,\n    CaptureOn = new DateTime(),\n    Customer = new CustomerRequest()\n    {\n        Id = \"cus_udst2tfldj6upmye2reztkmm4i\",\n        Email = \"email@docs.checkout.com\",\n        Name = \"FirstName LastName\"\n    },\n    BillingDescriptor = new BillingDescriptor()\n    {\n        Name = \"SUPERHEROES.COM\",\n        City = \"GOTHAM\"\n    },\n    Shipping = new ShippingDetails()\n    {\n        Address = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        Phone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        }\n    },\n    ThreeDs = new ThreeDsRequest()\n    {\n        Enabled = true,\n        AttemptN3D = true,\n        Eci = \"05\",\n        Cryptogram = \"AgAAAAAAAIR8CQrXcIhbQAAAAAA=\",\n        Xid = \"MDAwMDAwMDAwMDAwMDAwMzIyNzY=\",\n        Version = \"2.0.1\"\n    },\n    PreviousPaymentId = \"pay_fun26akvvjjerahhctaq2uzhu4\",\n    Risk = new RiskRequest()\n    {\n        Enabled = false\n    },\n    SuccessUrl = \"https://example.com/payments/success\",\n    FailureUrl = \"https://example.com/payments/failure\",\n    PaymentIp = \"192.168.0.1\",\n    Recipient = new PaymentRecipient()\n    {\n        DateOfBirth = \"1985-05-15\",\n        AccountNumber = \"5555554444\",\n        Zip = \"WIT\",\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        Country = CountryCode.GB\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", 123989}\n    }\n};\n\ntry\n{\n    PaymentResponse response = api.PaymentsClient().RequestPayment(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.ChallengeIndicator;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.ThreeDSRequest;\nimport com.checkout.payments.four.request.PaymentRequest;\nimport com.checkout.payments.four.request.source.RequestCardSource;\nimport com.checkout.payments.four.response.PaymentResponse;\nimport com.checkout.payments.four.sender.PaymentIndividualSender;\nimport com.checkout.payments.four.sender.SenderIdentification;\nimport com.checkout.payments.four.sender.SenderIdentificationType;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nRequestCardSource source = RequestCardSource.builder()\n    .number(\"123456789\")\n    .expiryMonth(10)\n    .expiryYear(2027)\n    .cvv(\"123\")\n    .stored(false)\n    .build();\n\nPaymentIndividualSender sender = PaymentIndividualSender.builder()\n    .firstName(\"FirstName\")\n    .lastName(\"LastName\")\n    .address(Address.builder()\n        .addressLine1(\"Checkout\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"London\")\n        .zip(\"W1T 4TJ\")\n        .country(CountryCode.GB)\n        .build())\n    .identification(SenderIdentification.builder()\n        .type(SenderIdentificationType.DRIVING_LICENCE)\n        .number(\"1234\")\n        .issuingCountry(CountryCode.GB)\n        .build())\n    .build();\n\nThreeDSRequest threeDSRequest = ThreeDSRequest.builder()\n    .enabled(true)\n    .challengeIndicator(ChallengeIndicator.NO_CHALLENGE_REQUESTED)\n    .build();\n\nPaymentRequest request = PaymentRequest.builder().source(source).sender(sender)\n    .capture(false)\n    .reference(\"reference\")\n    .amount(10L)\n    .currency(Currency.GBP)\n    .threeDS(threeDSRequest)\n    .successUrl(\"https://docs.checkout.com/success\")\n    .failureUrl(\"https://docs.checkout.com/failure\")\n    .build();\n\ntry {\n    PaymentResponse response = api.paymentsClient().requestPayment(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.request({\n		source: {\n			// infered type: \"token\"\n			token: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n			billing_address: {\n				address_line1: 'Wall Street',\n				address_line2: 'Dollar Avenue',\n				city: 'London',\n				state: 'London',\n				zip: 'W1W W1W',\n				country: 'GB',\n			},\n			phone: {\n				country_code: '44',\n				number: '7123456789',\n			},\n		},\n		currency: 'USD',\n		amount: 1000,\n		payment_type: 'Regular',\n		reference: 'ORDER 1234',\n		description: 'Mint Tea',\n		customer: {\n			email: 'new_user@email.com',\n			name: 'John Smith',\n		},\n		metadata: {\n			myCustomProp: {\n				value: 1,\n			},\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n\n$method = new TokenSource('tok_ubfj2q76miwundwlk72vxt2i7q');\n$payment = new Payment($method, 'USD');\n\n$payment->amount = 5600;\n$payment->capture = false;\n$payment->reference = 'ORD-090857';\n$payment->threeDs = new ThreeDs(true);\n\ntry {\n    $details = $checkout->payments()->request($payment);\n\n    $redirection = $details->getRedirection();\n    if ($redirection) {\n        return $redirection;\n    }\n\n    return $details;\n\n} catch (CheckoutModelException $ex) {\n    return $ex->getErrors();\n} catch (CheckoutHttpException $ex) {\n    return $ex->getErrors();\n}"
  /payments/{id}:
    get:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-details
        - ApiSecretKey: [ ]
      summary: Get payment details
      description: |
        Returns the details of the payment with the specified identifier string.
    
        If the payment method requires a redirection to a third party (e.g., 3D Secure),
        the redirect URL back to your site will include a `cko-session-id` query parameter
        containing a payment session ID that can be used to obtain the details of the payment, for example:
    
        http://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay|sid)_(\\w{26})$"
          required: true
          description: The payment or payment session identifier
      responses:
        '200':
          description: Payment retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentDetails'
                  - $ref: '#/components/schemas/PayoutDetails'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four.Response;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetPaymentResponse response = api.PaymentsClient().GetPaymentDetails(\"payment_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.response.GetPaymentResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    GetPaymentResponse response = api.paymentsClient().getPayment(\"payment_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.get('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$threeDsSessionId = 'sid_y3oqhf46pyzuxjbcn2giaqnb44';\n\ntry {\n\n	$details = $checkout->payments()->details($threeDsSessionId);\n	return $details->getSourceId();\n\n} catch(CheckoutHttpException $ex) {\n	return $ex->getErrors();\n}"
  /payments/{id}/actions:
    get:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-details
        - ApiSecretKey: [ ]
      summary: Get payment actions
      description: |
        Returns all the actions associated with a payment ordered by processing date in descending order (latest first).
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      responses:
        '200':
          description: Payment actions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentActionsResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    IList<PaymentAction> response = api.PaymentsClient().GetPaymentActions(\"payment_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.PaymentAction;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    List<PaymentAction> response = api.paymentsClient().getPaymentActions(\"payment_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.getActions('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->actions($paymentID);"
  /payments/{id}/authorizations:
    post:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-authorizations
        - ApiSecretKey: [ ]
      summary: Increment authorization
      description: |
        Request an incremental authorization to increase the authorization amount or extend the authorization's validity period.
    
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationRequest'
      responses:
        '201':
          description: Authorization processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Payments;\nusing Checkout.Payments.Four.Request;\nusing Checkout.Payments.Four.Request.Source;\nusing Checkout.Payments.Four.Response;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nAuthorizationRequest authorizationRequest = new AuthorizationRequest\n{\n    Amount = 100, Reference = \"payment_reference\"\n};\n\ntry\n{\n    // Optional: idempotencyKey as a third parameter for idempotent requests\n    AuthorizationResponse response = api.PaymentsClient().IncrementPaymentAuthorization(\"payment_id\", authorizationRequest).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.request.AuthorizationRequest;\nimport com.checkout.payments.four.response.AuthorizationResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nAuthorizationRequest authorizationRequest = AuthorizationRequest.builder()\n    .amount(100L)\n    .reference(\"reference\")\n    .build();\n\ntry {\n    // Optional: idempotencyKey as a third parameter for idempotent requests\n    AuthorizationResponse response = api.paymentsClient().incrementPaymentAuthorization(\"payment_id\", authorizationRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const increment = await cko.payments.increment('pay_bvxdyo7xdssuhcx3e74dpcrfmu', {\n		amount: 200,\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /payments/{id}/captures:
    post:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-captures
        - ApiSecretKey: [ ]
      summary: Capture a payment
      description: |
        Captures a payment if supported by the payment method.
    
        For card payments, capture requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the capture is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureRequest'
      responses:
        '202':
          description: Capture accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptureAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCaptureRequest request = new CaptureRequest\n{\n    Amount = 10,\n    Reference = \"reference\",\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    CaptureResponse response = api.PaymentsClient().CapturePayment(\"payment_id\", request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.CaptureRequest;\nimport com.checkout.payments.four.CaptureResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nCaptureRequest captureRequest = CaptureRequest.builder()\n    .amount(10L)\n    .reference(\"partial capture\")\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    // or, capturePayment(\"payment_id\") for a full capture\n    CaptureResponse response = api.paymentsClient().capturePayment(\"payment_id\", captureRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.capture('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n		amount: 1000,\n		reference: 'CAPTURE ORDER 1234',\n		metadata: {\n			value: 'my value',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full capture\n$capture = new Capture($paymentID);\n\n// Or partial capture\n$capture = new Capture($paymentID);\n$capture->reference = 'your reference';\n$capture->amount = 100;\n\nreturn $checkout->payments()->capture($capture);"
  /payments/{id}/refunds:
    post:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-refunds
        - ApiSecretKey: [ ]
      summary: Refund a payment
      description: |
        Refunds a payment if supported by the payment method.
    
        For card payments, refund requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the refund is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '202':
          description: Refund accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Refund not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nRefundRequest request = new RefundRequest()\n{\n    Amount = 10,\n    Reference = \"reference\",\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    RefundResponse response = api.PaymentsClient().RefundPayment(\"payment_id\", request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.RefundRequest;\nimport com.checkout.payments.four.RefundResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nRefundRequest refundRequest = RefundRequest.builder()\n    .reference(\"partial refund\")\n    .amount(10L)\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    // or, refundPayment(\"payment_id\") for a full refund\n    RefundResponse response = api.paymentsClient().refundPayment(\"payment_id\", refundRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.refund('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n		amount: 1000,\n		reference: 'REFUND ORDER 1234',\n		metadata: {\n			value: 'my value',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full refund\n$refund = new Refund($paymentID);\n\n// Or partial refund\n$refund = new Refund($paymentID);\n$refund->reference = 'your reference';\n$refund->amount = 100;\n\nreturn $checkout->payments()->refund($refund);"
  /payments/{id}/voids:
    post:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-voids
        - ApiSecretKey: [ ]
      summary: Void a payment
      description: |
        Voids a payment if supported by the payment method.
    
        For card payments, void requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the void is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
      responses:
        '202':
          description: Void accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoidAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Void not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nVoidRequest request = new VoidRequest()\n{\n    Reference = \"reference\",\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    VoidResponse response = api.PaymentsClient().VoidPayment(\"payment_id\", request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.VoidRequest;\nimport com.checkout.payments.four.VoidResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nVoidRequest voidRequest = VoidRequest.builder()\n    .reference(\"reference\")\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    // or, voidPayment(\"payment_id\")\n    VoidResponse response = api.paymentsClient().voidPayment(\"payment_id\", voidRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.void('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n		amount: 1000,\n		reference: 'VOID ORDER 1234',\n		metadata: {\n			value: 'my value',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->void(new Voids($paymentID));"
  /risk/assessments/pre-authentication:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Risk
      summary: Request a pre-authentication risk scan
      operationId: preAuthenticationRiskAssessment
      description: |
        Perform a pre-authentication fraud assessment using your defined risk settings.
        #parameters:
      # - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreAuthenticationAssessmentRequest'
      responses:
        #   '200':
        #     description: Transaction already assessed
        #     content:
        #       application/json:
        #         schema:
        #           $ref: '#/components/schemas/PreAuthenticationAssessmentResponse'
        #       Cko-Request-Id:
        #         $ref: "#/components/headers/Cko-Request-Id"
        #       Cko-Version:
        #         $ref: "#/components/headers/Cko-Version"
        '201':
          description: Transaction assessed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreAuthenticationAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Risk;\nusing Checkout.Risk.PreAuthentication;\nusing Checkout.Risk.source;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nPreAuthenticationAssessmentRequest request = new PreAuthenticationAssessmentRequest()\n{\n    Date = DateTime.Now,\n    Source = new CardSourcePrism(),\n    Customer = new CustomerRequest()\n    {\n        Name = \"FirstName LastName\",\n        Email = \"email@docs.checkout.com\",\n    },\n    Payment = new RiskPayment()\n    {\n        Psp = \"Checkout.com\",\n        Id = \"78453878\"\n    },\n    Shipping = new RiskShippingDetails()\n    {\n        Address = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        }\n    },\n    Reference = \"reference\",\n    Description = \"Set of 3 masks\",\n    Amount = 10,\n    Currency = Currency.GBP,\n    Device = new Device()\n    {\n        Ip = \"90.197.169.245\",\n        Location = new Location()\n        {\n            Latitude = \"51.5107\",\n            Longitude = \"0.01313\"\n        },\n        Os = \"ISO\",\n        Type = \"Phone\",\n        Model = \"IPHone X\",\n        Date = DateTime.Now,\n        UserAgent =\n            \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\",\n        Fingerprint = \"34304a9e3fg09302\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"VoucherCode\", \"loyalty_10\"},\n        {\"discountApplied\", \"10\"},\n        {\"customer_id\", \"2190EF321\"}\n    }\n};\n\ntry\n{\n    PreAuthenticationAssessmentResponse response =\n        api.RiskClient().RequestPreAuthenticationRiskScan(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.common.CustomerRequest;\nimport com.checkout.common.Phone;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.risk.Device;\nimport com.checkout.risk.Location;\nimport com.checkout.risk.RiskPayment;\nimport com.checkout.risk.RiskShippingDetails;\nimport com.checkout.risk.preauthentication.PreAuthenticationAssessmentRequest;\nimport com.checkout.risk.preauthentication.PreAuthenticationAssessmentResponse;\nimport com.checkout.risk.source.CardSourcePrism;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCardSourcePrism cardSourcePrism = CardSourcePrism.builder()\n    .billingAddress(Address.builder()\n        .addressLine1(\"Checkout\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"London\")\n        .zip(\"W1T 4TJ\")\n        .country(CountryCode.GB)\n        .build())\n    .expiryMonth(10)\n    .expiryYear(2027)\n    .number(\"123456789\")\n    .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n    .build();\n\nPreAuthenticationAssessmentRequest request = PreAuthenticationAssessmentRequest.builder()\n    .date(Instant.now())\n    .source(cardSourcePrism)\n    .customer(new CustomerRequest(null, \"email@docs.checkout.com\", \"Name\"))\n    .payment(RiskPayment.builder().psp(\"checkout\").id(\"123456789\").build())\n    .shipping(RiskShippingDetails.builder().address(\n        Address.builder()\n                .addressLine1(\"Checkout\")\n                .addressLine2(\"90 Tottenham Court Road\")\n                .city(\"London\")\n                .state(\"London\")\n                .zip(\"W1T 4TJ\")\n                .country(CountryCode.GB)\n                .build()\n    ).build())\n    .reference(\"reference\")\n    .description(\"description\")\n    .amount(10L)\n    .currency(Currency.GBP)\n    .device(Device.builder()\n        .ip(\"90.197.169.245\")\n        .location(Location.builder().longitude(\"0.1313\").latitude(\"51.5107\").build())\n        .type(\"Phone\")\n        .os(\"iOS\")\n        .model(\"iPhone X\")\n        .date(Instant.now())\n        .userAgent(\"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\")\n        .fingerprint(\"34304a9e3fg09302\")\n        .build())\n    .metadata(Stream.of(\n        new AbstractMap.SimpleImmutableEntry<>(\"VoucherCode\", \"loyalty_10\"),\n        new AbstractMap.SimpleImmutableEntry<>(\"discountApplied\", \"10\"),\n        new AbstractMap.SimpleImmutableEntry<>(\"customer_id\", \"2190EF321\"))\n        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)))\n    .build();\n\ntry {\n    PreAuthenticationAssessmentResponse response = api.riskClient().requestPreAuthenticationRiskScan(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const risk = await cko.risk.requestPreAuthentication({\n		source: {\n			type: 'token',\n			token: 'tok_XXX',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /risk/assessments/pre-capture:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Risk
      summary: Request a pre-capture risk scan
      operationId: preCaptureRiskAssessment
      description: |
        Perform a pre-capture fraud assessment using your defined risk settings.<br><br> **Note**: If you’ve already requested a pre-authentication fraud assessment for the transaction, provide the `assessment_id` returned in that response in your request to carry over the data. If you do include the `assessment_id`, the other fields you provide in this request will only fill in any gaps in the data; they will not overwrite any data.
      # parameters:
      #   - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreCaptureAssessmentRequest'
      responses:
        '200':
          description: Transaction already assessed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreCaptureAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '201':
          description: Transaction assessed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreCaptureAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Risk;\nusing Checkout.Risk.PreCapture;\nusing Checkout.Risk.source;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nPreCaptureAssessmentRequest request = new PreCaptureAssessmentRequest()\n{\n    AssessmentId = \"string\",\n    Date = DateTime.Now,\n    Source = new CardSourcePrism(),\n    Customer = new CustomerRequest()\n    {\n        Name = \"FirstName LastName\",\n        Email = \"email@docs.checkout.com\",\n    },\n    Amount = 10,\n    Currency = Common.Currency.GBP,\n    Payment = new RiskPayment()\n    {\n        Psp = \"Checkout.com\",\n        Id = \"78453878\"\n    },\n    Shipping = new RiskShippingDetails()\n    {\n        Address = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        }\n    },\n    Device = new Device()\n    {\n        Ip = \"90.197.169.245\",\n        Location = new Location()\n        {\n            Latitude = \"51.5107\",\n            Longitude = \"0.01313\"\n        },\n        Os = \"ISO\",\n        Type = \"Phone\",\n        Model = \"IPHone X\",\n        Date = DateTime.Now,\n        UserAgent =\n            \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\",\n        Fingerprint = \"34304a9e3fg09302\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"VoucherCode\", \"loyalty_10\"},\n        {\"discountApplied\", \"10\"},\n        {\"customer_id\", \"2190EF321\"}\n    },\n    AuthenticationResult = new AuthenticationResult()\n    {\n        Attempted = true,\n        Challenged = true,\n        Succeeded = true,\n        LiabilityShifted = true,\n        Method = \"3ds\",\n        Version = \"2.0\"\n    },\n    AuthorizationResult = new AuthorizationResult()\n    {\n        AvsCode = \"V\",\n        CvvResult = \"N\"\n    }\n};\n\ntry\n{\n    PreCaptureAssessmentResponse response = api.RiskClient().RequestPreCaptureRiskScan(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Currency;\nimport com.checkout.common.CustomerRequest;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.risk.Device;\nimport com.checkout.risk.RiskPayment;\nimport com.checkout.risk.RiskShippingDetails;\nimport com.checkout.risk.precapture.AuthenticationResult;\nimport com.checkout.risk.precapture.AuthorizationResult;\nimport com.checkout.risk.precapture.PreCaptureAssessmentRequest;\nimport com.checkout.risk.precapture.PreCaptureAssessmentResponse;\nimport com.checkout.risk.source.CustomerSourcePrism;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nPreCaptureAssessmentRequest request = PreCaptureAssessmentRequest.builder()\n    .date(Instant.MAX)\n    .source(CustomerSourcePrism.builder().build())\n    .customer(new CustomerRequest(null, \"email@docs.checkout.com\", \"Name\"))\n    .payment(RiskPayment.builder().build())\n    .shipping(RiskShippingDetails.builder().build())\n    .amount(10L)\n    .currency(Currency.GBP)\n    .device(Device.builder().build())\n    .metadata(new HashMap<>())\n    .authenticationResult(AuthenticationResult.builder()\n        .attempted(true)\n        .challenged(true)\n        .liabilityShifted(true)\n        .method(\"3ds\")\n        .succeeded(true)\n        .version(\"2.0\")\n        .build())\n    .authorizationResult(AuthorizationResult.builder()\n        .avsCode(\"V\")\n        .cvvResult(\"N\")\n        .build())\n    .build();\n\ntry {\n    PreCaptureAssessmentResponse response = api.riskClient().requestPreCaptureRiskScan(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const risk = await cko.risk.requestPreCapture({\n		source: {\n			type: 'token',\n			token: 'tok_XXX',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /sessions:
    post:
      tags:
        - Sessions
      security:
        - OAuth:
            - sessions:app
            - sessions:browser
      summary: Request a session
      description: |
        Create a payment session to authenticate a cardholder before requesting a payment.
        Payment sessions can be linked to one or more payments (in the case of recurring and other merchant-initiated payments).
    
        The `next_actions` object in the response tells you which actions can be performed next.
    
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '201':
          description: Session processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionOkResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '202':
          description: Session accepted and further action required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the `channel_data` property in the request is browser related.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Not Implemented
        '503':
          description: Service not available. A temporary server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Sessions;\nusing Checkout.Sessions.Channel;\nusing Checkout.Sessions.Completion;\nusing Checkout.Sessions.Source;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nSessionRequest request = new SessionRequest\n{\n    Source = new SessionCardSource()\n    {\n        BillingAddress = new SessionAddress()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        HomePhone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        },\n        MobilePhone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        },\n        WorkPhone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        }\n    },\n    Amount = 10,\n    Currency = Currency.USD,\n    ProcessingChannelId = \"pc_5jp2az55l3cuths25t5p3xhwru\",\n    Marketplace = new MarketplaceData {SubEntityId = \"ent_ocw5i74vowfg2edpy66izhts2u\"},\n    AuthenticationCategory = Category.Payment,\n    ChallengeIndicator = ChallengeIndicatorType.ChallengeRequested,\n    BillingDescriptor = new SessionsBillingDescriptor {Name = \"SUPERHEROES.COM\"},\n    Reference = \"reference\",\n    TransactionType = TransactionType.GoodsService,\n    ShippingAddress = new SessionAddress(),\n    Completion = new NonHostedCompletionInfo {CallbackUrl = \"https://merchant.com/callback\"},\n    ChannelData = new BrowserSession()\n    {\n        AcceptHeader = \"Accept:  *.*, q=0.1\",\n        JavaEnabled = true,\n        Language = \"FR-fr\",\n        ColorDepth = \"16\",\n        ScreenHeight = \"1080\",\n        ScreenWidth = \"1920\",\n        Timezone = \"60\",\n        UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\",\n        ThreeDsMethodCompletion = ThreeDsMethodCompletion.Y,\n        IpAddress = \"1.12.123.255\"\n    }\n};\n\ntry\n{\n    SessionResponse response = api.SessionsClient().RequestSession(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.ChallengeIndicator;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.sessions.AuthenticationType;\nimport com.checkout.sessions.Category;\nimport com.checkout.sessions.SessionAddress;\nimport com.checkout.sessions.SessionRequest;\nimport com.checkout.sessions.SessionResponse;\nimport com.checkout.sessions.TransactionType;\nimport com.checkout.sessions.completion.HostedCompletionInfo;\nimport com.checkout.sessions.source.SessionCardSource;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\nSessionRequest sessionRequest = SessionRequest.builder()\n    .source(SessionCardSource.builder()\n        .expiryMonth(10)\n        .expiryYear(2027)\n        .number(\"12345678\")\n        .build())\n    .amount(10L)\n    .currency(Currency.USD)\n    .processingChannelId(\"processing_channel_id\")\n    .authenticationType(AuthenticationType.REGULAR)\n    .authenticationCategory(Category.PAYMENT)\n    .challengeIndicator(ChallengeIndicator.NO_PREFERENCE)\n    .reference(\"reference\")\n    .transactionType(TransactionType.GOODS_SERVICE)\n    .shippingAddress(SessionAddress.builderSessionAddress()\n        .addressLine1(\"Checkout.com\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"ENG\")\n        .country(CountryCode.GB)\n        .zip(\"W1T 4TJ\")\n        .build())\n    .completion(HostedCompletionInfo.builder()\n        .successUrl(\"https://docs.checkout.com/sessions/success\")\n        .failureUrl(\"https://docs.checkout.com/sessions/fail\")\n        .build())\n    .build();\n\ntry {\n    SessionResponse response = api.sessionsClient().requestSession(sessionRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let session = await cko.sessions.request({\n		source: {\n			type: 'card',\n			number: '4485040371536584',\n			expiry_month: 1,\n			expiry_year: 2030,\n		},\n		amount: 100,\n		currency: 'USD',\n		authentication_type: 'regular',\n		authentication_category: 'payment',\n		challenge_indicator: 'no_preference',\n		reference: 'ORD-5023-4E89',\n		transaction_type: 'goods_service',\n		processing_channel_id: 'pc_zs5fqhybzc2e3jmq3efvybybpq',\n		shipping_address: {\n			address_line1: 'Checkout.com',\n			address_line2: '90 Tottenham Court Road',\n			city: 'London',\n			state: 'GB',\n			zip: 'W1T 4TJ',\n			country: 'GB',\n		},\n		completion: {\n			type: 'non_hosted',\n			callback_url: 'https://example.com/sessions/callback',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /sessions/{id}:
    get:
      tags:
        - Sessions
      security:
        - OAuth:
            - sessions:app
            - sessions:browser
        - SessionSecret: [ ]
      summary: Get session details
      description: |
        Returns the details of the session with the specified identifier string.
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
        - name: channel
          in: header
          description: Optionally provide the type of channnel so you only get the relevant actions
          schema:
            type: string
            enum:
              - browser
              - app
            description: If a value is not provided, and if the `status` is `pending`, then `next_actions` will return `collect_channel_data` and if available, `issuer_fingerprint`.
            example: browser
      responses:
        '200':
          description: Session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the session was initiated with the scope `sessions:browser`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Sessions;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetSessionResponse response = api.SessionsClient().GetSessionDetails(\"session_id\").Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.sessions.GetSessionResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\ntry {\n    GetSessionResponse response = api.sessionsClient().getSessionDetails(\"session_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let getSession = await cko.sessions.get('sid_jlfm4ithpgpefdxgzzdnc3xrc4');\n} catch (err) {\n	console.log(err.name);\n}"
  /sessions/{id}/collect-data:
    put:
      security:
        - OAuth:
            - sessions:app
            - sessions:browser
        - SessionSecret: [ ]
      summary: Update a session
      description: Update a session by providing information about the environment.
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelData'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Sessions;\nusing Checkout.Sessions.Channel;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nBrowserSession request = new BrowserSession()\n{\n    AcceptHeader = \"Accept:  *.*, q=0.1\",\n    JavaEnabled = true,\n    Language = \"FR-fr\",\n    ColorDepth = \"16\",\n    ScreenWidth = \"1920\",\n    ScreenHeight = \"1080\",\n    Timezone = \"60\",\n    UserAgent =\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\",\n    ThreeDsMethodCompletion = ThreeDsMethodCompletion.Y,\n    IpAddress = \"1.12.123.255\"\n};\n\ntry\n{\n    GetSessionResponse response = api.SessionsClient().UpdateSession(\"session_id\", request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.sessions.GetSessionResponse;\nimport com.checkout.sessions.channel.BrowserSession;\nimport com.checkout.sessions.channel.ChannelData;\nimport com.checkout.sessions.channel.ThreeDsMethodCompletion;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\nChannelData channelData = BrowserSession.builder() // other channel data types available\n    .acceptHeader(\"Accept:  *.*, q=0.1\")\n    .javaEnabled(true)\n    .language(\"FR-fr\")\n    .colorDepth(\"16\")\n    .screenWidth(\"1920\")\n    .screenHeight(\"1080\")\n    .timezone(\"60\")\n    .userAgent(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\")\n    .threeDsMethodCompletion(ThreeDsMethodCompletion.Y)\n    .ipAddress(\"1.12.123.255\")\n    .build();\n\ntry {\n    GetSessionResponse response = api.sessionsClient().updateSession(\"session_id\", channelData).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let session = await cko.sessions.update('sid_rwhwl4kb3eeenglibbvej2qtdy', {\n		channel: 'browser',\n		accept_header: 'Accept:  *.*, q=0.1',\n		java_enabled: true,\n		language: 'FR-fr',\n		color_depth: '16',\n		screen_height: '1080',\n		screen_width: '1920',\n		timezone: '60',\n		user_agent:\n			'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',\n		ip_address: '1.12.123.255',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /sessions/{id}/complete:
    post:
      security:
        - OAuth:
            - sessions:app
            - sessions:browser
        - SessionSecret: [ ]
      summary: Complete a session
      description: |
        Completes a session by posting the the following request to the callback URL (only relevant for non hosted sessions):
        ```
        {
           "session_id": "sid_llraltf4jlwu5dxdtprcv7ba5i",
           "amount" : 6540,
           "currency": "USD",
           "status": "approved",
           "authentication_type": "regular",
           "authentication_category": "payment",
           "reference": "ORD-5023-4E89",
           "approved": true,
           "protocol_version": "2.1.0",
           "response_code": "Y",
           "response_reason": "01",
           "cryptogram": "MTIzNDU2Nzg5MDA5ODc2NTQzMjE=",
           "eci": "05",
           "xid": "XSUErNftqkiTdlkpSk8p32GWOFA",
           "cardholder_info": "Card declined. Please contact your issuing bank.",
           "challenged": true
        }
        ```
        <br/>
        The fields of the above are the same as they would be in a GET session response
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Session completed successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.SessionsClient().CompleteSession(\"session_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\ntry {\n    api.sessionsClient().completeSession(\"session_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let session = await cko.sessions.complete('sid_j47vcmk3uaaerlv3zv7xhzg6du');\n} catch (err) {\n	console.log(err.name);\n}"
  /sessions/{id}/issuer-fingerprint:
    put:
      security:
        - OAuth:
            - sessions:browser
        - SessionSecret: [ ]
      summary: Update session 3DS Method completion indicator
      description: Update the session's 3DS Method completion indicator based on the result of accessing the 3DS Method URL.
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreeDsMethodCompletion'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponseAfterChannelDataSupplied'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Sessions;\nusing Checkout.Sessions.Channel;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nThreeDsMethodCompletionRequest request = new ThreeDsMethodCompletionRequest()\n{\n    ThreeDsMethodCompletion = ThreeDsMethodCompletion.Y\n};\n\ntry\n{\n    GetSessionResponseAfterChannelDataSupplied response = api.SessionsClient().Update3dsMethodCompletionIndicator(\"session_secret\", \"session_id\", request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.sessions.ThreeDsMethodCompletionRequest;\nimport com.checkout.sessions.channel.ThreeDsMethodCompletion;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\nThreeDsMethodCompletionRequest threeDsMethodCompletionRequest = ThreeDsMethodCompletionRequest.builder()\n    .threeDsMethodCompletion(ThreeDsMethodCompletion.Y)\n    .build();\n\ntry {\n    api.sessionsClient().update3dsMethodCompletionIndicator(\"session_id\", threeDsMethodCompletionRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let updated = await cko.sessions.update3DSMethodCompletionIndicator('sid_aurdb2b3yv6eniu7mbrl7nfopm', 'U');\n} catch (err) {\n	console.log(err.name);\n}"
  /tokens:
    post:
      tags:
        - Tokens
      security:
        - ApiPublicKey: [ ]
      summary: Request a token
      description: |
        Exchange card details for a reference token that can be used later to request a card payment. Tokens are single use and expire after 15 minutes.
        To create a token, please authenticate using your public key.
    
        **Please note:** You should only use the `card` type for testing purposes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '201':
          description: Reference token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Tokens;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nCardTokenRequest request = new CardTokenRequest\n{\n    Number = \"4543474002249996\",\n    ExpiryMonth = 10,\n    ExpiryYear = 2027,\n    Name = \"FirstName LastName\",\n    Cvv = \"123\",\n    BillingAddress = new Address()\n    {\n        AddressLine1 = \"Checkout.com\",\n        AddressLine2 = \"90 Tottenham Court Road\",\n        City = \"London\",\n        State = \"London\",\n        Zip = \"W1T 4TJ\",\n        Country = CountryCode.GB\n    },\n    Phone = new Phone()\n    {\n        Number = \"4155552671\",\n        CountryCode = \"1\"\n    }\n};\n\ntry\n{\n    CardTokenResponse response = api.TokensClient().Request(request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.tokens.CardTokenRequest;\nimport com.checkout.tokens.CardTokenResponse;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCardTokenRequest request = CardTokenRequest.builder()\n    .number(\"1234567\")\n    .expiryMonth(10)\n    .expiryYear(2027)\n    .billingAddress(Address.builder()\n        .addressLine1(\"Checkout\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"London\")\n        .zip(\"W1T 4TJ\")\n        .country(CountryCode.GB)\n        .build())\n    .build();\n\ntry {\n    CardTokenResponse response = api.tokensClient().request(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const token = await cko.tokens.request({\n		// infered type: \"applepay\"\n		token_data: {\n			version: 'EC_v1',\n			data: 't7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzve...',\n			signature: 'MIAGCSqGbGUg...',\n			header: {\n				ephemeralPublicKey: 'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgA...',\n				publicKeyHash: 'tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6...',\n				transactionId: '3cee89679130a4b...',\n			},\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /transfers:
    post:
      security:
        - OAuth:
            - marketplace:transfer:create
      description: |
        Initiate a transfer of funds from source entity to destination entity.
      summary: Initiate a transfer of funds
      requestBody:
        required: true
        description: The details of the transfer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferRequest'
      responses:
        '201':
          description: Transfer successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransferResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Transfers
  /validation/bank-accounts/{country}/{currency}:
    get:
      tags:
        - Instruments
      security:
        - OAuth:
            - payouts:bank-details
      summary: Get bank account field formatting
      description: |
        Returns the bank account field formatting required to create bank account instruments or perform payouts for the specified country and currency.
      parameters:
        - in: path
          name: country
          schema:
            type: string
            minLength: 2
            maxLength: 2
          required: true
          description: |
            The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a>
        - in: path
          name: currency
          schema:
            type: string
            minLength: 3
            maxLength: 3
          required: true
          description: |
            The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
        - in: query
          name: account-holder-type
          schema:
            type: string
            enum:
              - individual
              - corporate
              - government
          description: |
            The type of account holder that will be used to filter the fields returned
        - in: query
          name: payment-network
          schema:
            type: string
            enum:
              - local
              - sepa
              - fps
              - ach
              - fedwire
              - swift
          description: |
            The banking network that will be used to filter the fields returned
      responses:
        '200':
          description: Bank account fields retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountFields'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Fields not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Common.Four;\nusing Checkout.Instruments.Four.Get;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.PayoutsBankDetails)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nBankAccountFieldQuery request = new BankAccountFieldQuery\n{\n    AccountHolderType = AccountHolderType.Individual, \n    PaymentNetwork = PaymentNetwork.Local\n};\n\ntry\n{\n    BankAccountFieldResponse response = api.InstrumentsClient().GetBankAccountFieldFormatting(CountryCode.GB, Currency.GBP, request).Result;\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-javaç\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.common.four.AccountHolderType;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.instruments.four.get.BankAccountFieldQuery;\nimport com.checkout.instruments.four.get.BankAccountFieldResponse;\nimport com.checkout.instruments.four.get.PaymentNetwork;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.PAYOUTS_BANK_DETAILS) // more scopes available\n    .build();\n\nBankAccountFieldQuery query = BankAccountFieldQuery.builder()\n    .accountHolderType(AccountHolderType.INDIVIDUAL)\n    .paymentNetwork(PaymentNetwork.LOCAL)\n    .build();\n\ntry {\n    BankAccountFieldResponse response = api.instrumentsClient().getBankAccountFieldFormatting(CountryCode.GB, Currency.GBP, query).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const bank = await cko.instruments.getBankAccountFieldFormatting('GB', 'GBP');\n} catch (err) {\n	console.log(err.name);\n}"
components:
  schemas:
    Address:
      type: object
      properties:
        address_line1:
          type: string
          description: The first line of the address
          maxLength: 200
          example: Checkout.com
        address_line2:
          type: string
          description: The second line of the address
          maxLength: 200
          example: 90 Tottenham Court Road
        city:
          type: string
          description: The address city
          maxLength: 50
          example: London
        state:
          type: string
          description: The address state
          example: London
        zip:
          type: string
          description: The address zip/postal code
          maxLength: 50
          example: W1T 4TJ
        country:
          type: string
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of the address
          example: GB
          maxLength: 2
          minLength: 2
    ApplePayCertificateRequest:
      type: object
      description: Certificate content to be added an account
      required: 
        - value
      properties:
        content:
          type: string
          description: The certificate content
          example: MIIBSDCB8AIBADCBjzELMAkGA1UEBhMCR0IxDzANBgNVBAgMBkxvbmRvbjEPMA0GA1UEBwwGTG9uZG9uMRUwEwYDVQQKDAxDaGVja291dC5jb20xCzAJBgNVBA8MAklUMRUwEwYDVQQDDAxjaGVja291dC5jb20xIzAhBgkqhkiG9w0BCQEWFHN1cHBvcnRAY2hlY2tvdXQuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXf/MDFRLSblykajGm0GE+lUNoOIEa0DbWc7Bv3s55bYtW1fJo2/MJIPojUKuKUx2VsEfGmmqXKbq4IhAr0bM8TAKBggqhkjOPQQDAgNHADBEAiAo1Dv4TXTacSeIfy4HDjzPMQY2+OxTW6szRJjGyfKgXQIgdHAX0BmI+1rozysjXv8MvoxehQIGACQ+UWJle+UZ2ms= 
    ApplePayCertificateResponse:
      type: object
      description: Response for an attached certificate for an account
      required: 
        - id
        - public_key_hash
        - valid_from
        - valid_until
      properties:
          id:
            type: string
            pattern: ^(alpc)_(\\w{26})$
            description: The identifier of the account domain
            example: aplc_hefptsiydvkexnzzb35zrlqgfq
      
          public_key_hash:
            type: string
            description: Hash of the certificate public key
            example: tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6Nl0=
      
          valid_from:
            type: string
            format: date-time
            description: When the certificate is valid from
            example: 2021-01-01T17:32:28Z
      
          valid_until:
            type: string
            format: date-time
            description: When the certificate is valid until
            example: 2025-01-01T17:32:28Z 
    ApplePaySigningRequestResponse:
      type: object
      description: Retrieve a signing request for an account to begin certification process
      required:
        - value
      properties:
        content:
          type: string
          description: The signing request content
          example: -----BEGIN CERTIFICATE REQUEST-----MIIBSDCB8AIBADCBjzELMAkGA1UEBhMCR0IxDzANBgNVBAgMBkxvbmRvbjEPMA0GA1UEBwwGTG9uZG9uMRUwEwYDVQQKDAxDaGVja291dC5jb20xCzAJBgNVBA8MAklUMRUwEwYDVQQDDAxjaGVja291dC5jb20xIzAhBgkqhkiG9w0BCQEWFHN1cHBvcnRAY2hlY2tvdXQuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXf/MDFRLSblykajGm0GE+lUNoOIEa0DbWc7Bv3s55bYtW1fJo2/MJIPojUKuKUx2VsEfGmmqXKbq4IhAr0bM8TAKBggqhkjOPQQDAgNHADBEAiAo1Dv4TXTacSeIfy4HDjzPMQY2+OxTW6szRJjGyfKgXQIgdHAX0BmI+1rozysjXv8MvoxehQIGACQ+UWJle+UZ2ms=-----END CERTIFICATE REQUEST----- 
    Balance:
      type: object
      title: Balance values
      description: The respective balance values.
      properties:
        pending:
          type: number
          description: Funds on the way to the sub-entity's account. These funds will be added to Available once settled.
          example: 10
        available:
          type: number
          description: The funds available to be used for transactions such as transfers or payouts.
          example: 50
        payable:
          type: number
          description: Funds being paid out of the sub-entity's account, but not yet settled.
          example: 0
        collateral:
          type: number
          description: The collateral balance.
          example: 0
    BalancesResponse:
      type: object
      title: Balances response
      description: A list of balances for each currency account returned from the request.
      properties:
        data:
          type: array
          title: Balances
          description: The list of requested balances.
          items:
            $ref: '#/components/schemas/CurrencyAccountBalance'
    CurrencyAccountBalance:
      type: object
      title: Currency Account Balance
      description: The currency account details and balance.
      properties:
        descriptor:
          type: string
          description: A descriptor for the currency account.
          example: Revenue Account 1
        holding_currency:
          type: string
          description: The holding currency of the currency account (the three character ISO 4217 code).
          example: EUR
        balances:
          $ref: '#/components/schemas/Balance'
    Batch:
      type: object
      required:
        - id
        - status
        - _links
      properties:
        id:
          type: string
          description: Batch identifier
          pattern: "^bat_(\\w{26})$"
          example: bat_cyukd74c4xoezfuarvuwdcpzou
        status:
          type: string
          description: The status of the batch
          example: Processing
        _links:
          type: object
          required:
            - self
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the batch
              example:
                href: 'https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6'
    SubmitBatchRequest:
      type: object
      description: The batch request
      required:
        - file_id
        - action
      properties:
        file_id:
          type: string
          pattern: "^file_(\\w{26})$"
          description: The identifier of the batch file previously uploaded via the [Files API](#tag/Files)
          example: 'file_6lbss42ezvoufcb2beo76rvwly'
        action:
          type: string
          description: The action to be performed against the batch
          enum:
            - payment
          example: 'payment'
        reference:
          type: string
          description: Your reference for the batch. If provided, this will be validated against the batch file's header
          example: payments-20180701
    SubmitBatchResponse:
      type: object
      required:
        - id
        - status
        - _links
      properties:
        id:
          type: string
          description: Batch identifier
          pattern: "^bat_(\\w{26})$"
          example: bat_cyukd74c4xoezfuarvuwdcpzou
        status:
          type: string
          description: The batch status
          example: Processing
        _links:
          type: object
          required:
            - self
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the batch
              example:
                href: 'https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6'
    CustomerRequest:
      type: object
      description: The customer's details
      properties:
        id:
          type: string
          pattern: "^(cus)_(\\w{26})$"
          description: The identifier of an existing customer
          example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
        email:
          type: string
          format: email
          description: The customer's email address
          maxLength: 255
          example: 'brucewayne@gmail.com'
        name:
          type: string
          description: The customer's name
          maxLength: 255
          example: 'Bruce Wayne'
    CustomerResponse:
      type: object
      description: Stored customer details
      required:
        - id
      properties:
        id:
          type: string
          pattern: "^(cus)_(\\w{26})$"
          description: The customer's unique identifier. This can be passed as a source when making a payment
          example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
        email:
          type: string
          description: The customer's email address
          example: 'brucewayne@gmail.com'
        name:
          type: string
          description: The customer's name
          example: 'Bruce Wayne'
    RetrieveCustomerBankAccountInstrumentResponse:
      type: object
      description: Bank account details
      required:
        - id
        - type
        - fingerprint
        - currency
        - country
      allOf:
        - $ref: '#/components/schemas/RetrieveCustomerInstrumentResponse'
      properties:
        type:
          description: The type of instrument
          type: string
        id:
          description: The unique identifier of the payment source or destination that can be used later for payments
          type: string
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
      
        fingerprint:
          type: string
          description: A token that can uniquely identify this instrument across all customers
          pattern: ^([a-z0-9]{26})$
          example: vnsdrvikkvre3dtrjjvlm5du4q
      
        account_type:
          description: The type of account
          type: string
          enum:
            - savings
            - current
            - cash
          example: savings
      
        account_number:
          description: Number (which can contain letters) that identifies the account
          type: string
          example: '13654567455'
      
        bank_code:
          description: Code that identifies the bank
          type: string
          example: 123-456
      
        branch_code:
          description: Code that identifies the bank branch
          type: string
          example: '6443'
      
        iban:
          description: Internationally agreed standard for identifying bank account
          type: string
          example: HU93116000060000000012345676
      
        bban:
          description: The combination of bank code and/or branch code and account number
          type: string
          example: 3704 0044 0532 0130 00
      
        swift_bic:
          description: 8 or 11 character code which identifies the bank or bank branch
          type: string
          example: '37040044'
      
        currency:
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the account's currency
          type: string
          example: GBP
      
        country:
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of where the account is based
          type: string
          example: GB
      
        account_holder:
          $ref: '#/components/schemas/AccountHolder'
      
        bank:
          $ref: '#/components/schemas/BankDetails'
    RetrieveCustomerCardInstrumentResponse:
      type: object
      description: card instrument response
      allOf:
        - $ref: '#/components/schemas/RetrieveCustomerInstrumentResponse'
      required:
        - id
        - fingerprint
        - expiry_month
        - expiry_year
        - last4
        - bin
      properties:
        type:
          description: The underlying instrument type (for instruments created from Checkout.com tokens, this will reflect the type of instrument that was tokenized).
          type: string
          example: 'card'
        id:
          description: The unique identifier of the payment source or destination that can be used later for payments
          type: string
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
        fingerprint:
          type: string
          description: A token that can uniquely identify this instrument across all customers
          pattern: ^([a-z0-9]{26})$
          example: vnsdrvikkvre3dtrjjvlm5du4q
        expiry_month:
          type: integer
          description: The expiry month
          minimum: 1
          example: 6
          maxLength: 2
        expiry_year:
          type: integer
          description: The expiry year
          example: 2025
          minLength: 4
          maxLength: 4
        scheme:
          type: string
          description: The card scheme
          example: 'VISA'
        last4:
          type: string
          description: The last four digits of the card number
          example: '9996'
          minLength: 4
          maxLength: 4
        bin:
          type: string
          description: The card issuer's bank identification number (BIN)
          example: '454347'
        card_type:
          type: string
          description: The card type
          enum:
            - Credit
            - Debit
            - Prepaid
            - Charge
          example: Credit
        card_category:
          type: string
          description: The card category
          enum:
            - Consumer
            - Commercial
          example: Consumer
        issuer:
          type: string
          description: The name of the card issuer
          example: 'GOTHAM STATE BANK'
        issuer_country:
          type: string
          maxLength: 2
          minLength: 2
          description: The card issuer's country (<a href="https://docs.checkout.com/resources/codes/country-codes" target="blank">two-letter ISO code</a>)
          example: 'US'
        product_id:
          type: string
          description: The issuer/card scheme product identifier
          example: 'F'
        product_type:
          type: string
          description: The issuer/card scheme product type
          example: CLASSIC
        account_holder:
          type: object
          description: The account holder details
          properties:
            first_name:
              description: The first name of the account holder
              type: string
              example: 'John'
            last_name:
              description: The last name of the account holder
              type: string
              example: 'Smith'
            billing_address:
              description: The billing address of the account holder
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number of the account holder
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    RetrieveCustomerInstrumentResponse:
      type: object
      discriminator:
        propertyName: type
        mapping:
          bank_account: '#/components/schemas/RetrieveCustomerBankAccountInstrumentResponse'
          card: '#/components/schemas/RetrieveCustomerCardInstrumentResponse'
      required:
        - type
      properties:
        type:
          description: The instrument type
          type: string
          example: 'card'
    RetrieveCustomerResponse:
      type: object
      description: Customer retrieved successfully
      required: 
        - id
        - email
      properties:
        id:
          type: string
          description: The customer's unique identifier
          example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
        email:
          type: string
          format: email
          description: The customer's email address
          example: 'brucewayne@gmail.com'
        default:
          type: string
          description: The ID for this customer's default instrument
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
        name:
          type: string
          description: The customer's name
          example: 'Bruce Wayne'
        phone:
          description: The customer's phone number
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
        metadata:
          type: object
          description: A set of key-value pairs that is attached to a customer
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
        instruments:
          type: array
          title: Instrument
          description: The details of the instruments linked to this customer
          items:
            $ref: '#/components/schemas/RetrieveCustomerInstrumentResponse'
    StoreCustomerRequest:
      type: object
      description: Create a customer
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The customer's email address
          maxLength: 255
          example: 'brucewayne@gmail.com'
        name:
          type: string
          description: The customer's name
          maxLength: 255
          example: 'Bruce Wayne'
        phone:
          description: The customer's phone number
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
        metadata:
          type: object
          description: Allows you to store additional information about a customer. You can include a maximum of 10 key-value pairs. Each key and value can be up to 100 characters long.
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
        default:
          type: string
          description: The ID of the instrument you want to set as this customer's default instrument
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
        instruments:
          type: array
          items:
            type: string
          description: The IDs of the instruments you want to link to this customer
          example: ['src_y3oqhf46pyzuxjbcn2giaqnb44', 'src_wmlfc3zyhqzehihu7giusaaawu']
    StoreCustomerResponse:
      type: object
      description: Customer created successfully
      required:
        - id
      properties:
        id:
          description: The customer's unique identifier
          type: string
          example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
    UpdateCustomerDetailsRequest:
      type: object
      description: The customer's details
      properties:
        email:
          type: string
          format: email
          description: The email address of the customer
          maxLength: 255
          example: 'brucewayne@gmail.com'
        name:
          type: string
          description: The name of the customer
          maxLength: 255
          example: 'Bruce Wayne'
        phone:
          description: The customer's phone number
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
        metadata:
          type: object
          description: Allows you to store additional information about a customer. You can include a maximum of 10 key-value pairs. Each key and value can be up to 100 characters long. Providing metadata in this request will replace any existing stored for this customer.
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
        default:
          type: string
          description: The ID of this customer's default instrument
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
        instruments:
          type: array
          items:
            type: string
          description: The IDs of the instruments you want to link to this customer
          example: ['src_y3oqhf46pyzuxjbcn2giaqnb44', 'src_wmlfc3zyhqzehihu7giusaaawu']
    Dispute:
      type: object
      properties:
        id:
          type: string
          pattern: "^(dsp)_(\\w{22})$"
          description: The dispute identifier. This is the same as the payment action ID
          example: 'dsp_rbhwd2qrg13uhrp2newf'
        entity_id:
          type: string
          description: The client entity linked to this dispute
          example: 'ent_wxglze3wwywujg4nna5fb7ldli'
        sub_entity_id:
          type: string
          description: The sub-entity linked to this dispute
          example: 'ent_uzm3uxtssvmuxnyrfdffcyjxeu'
        category:
          type: string
          description: The reason for the dispute. [Find out more](https://docs.checkout.com/four/risk-management/disputes#Disputes-Disputereasonsandrecommendedevidence)
          enum:
            [
              fraudulent,
              unrecognized,
              canceled_recurring,
              product_service_not_received,
              not_as_described,
              credit_not_issued,
              duplicate,
              incorrect_amount,
              general,
            ]
          example: 'fraudulent'
        amount:
          type: number
          description: The amount that is being disputed, in the processing currency. This amount can be positive or negative depending on the type of transaction the dispute is received against
          example: 999
        currency:
          type: string
          description: The processing currency
          example: 'GBP'
        reason_code:
          type: string
          description: The reason code provided by the card scheme
          example: '10.4'
        status:
          type: string
          description: The current status of the dispute
          enum:
            [
              evidence_required,
              evidence_under_review,
              resolved,
              won,
              lost,
              canceled,
              expired,
              accepted,
              arbitration_under_review,
              arbitration_won,
              arbitration_lost,
            ]
          example: 'evidence_required'
        resolved_reason:
          type: string
          description: If the dispute is automatically resolved, `resolved_reason` will contain the reason why it was resolved
          enum: [rapid_dispute_resolution, negative_amount, already_refunded]
          example: 'already_refunded'
        relevant_evidence:
          type: array
          description: <i>This list and the dispute categories will change over time. Your evidence logic should be informed by this field, not hard coded.</i>
          items:
            type: array
            items:
              type: string
            enum:
              [
                proof_of_delivery_or_service,
                invoice_or_receipt,
                invoice_showing_distinct_transactions,
                customer_communication,
                refund_or_cancellation_policy,
                recurring_transaction_agreement,
                additional_evidence,
              ]
            example: 'proof_of_delivery_or_service'
        evidence_required_by:
          type: string
          format: ISO-8601
          description: The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer
          example: '2018-08-21T00:00:00Z'
        received_on:
          type: string
          format: ISO-8601
          description: The date and time at which the dispute was issued
          example: '2018-08-01T04:00:10Z'
        last_update:
          type: string
          format: ISO-8601
          description: The date and time at which the dispute was last updated
          example: '2018-08-04T10:53:13Z'
        payment:
          type: object
          description: Provides details for the payment linked to the dispute
          allOf:
            - $ref: '#/components/schemas/PaymentData'
        _links:
          type: object
          properties:
            self:
              description: The dispute retrieval endpoint
              properties:
                href:
                  example: 'https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf'
            evidence:
              description: The dispute evidence retrieval endpoint
              properties:
                href:
                  example: 'https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf/evidence'
    DisputePaged:
      type: object
      properties:
        limit:
          type: integer
          description: The numbers of items to return
          example: 10
        skip:
          type: integer
          description: The number of results to skip
          example: 10
        from:
          type: string
          format: ISO-8601
          description: The date and time from which to filter disputes, based on the dispute's `last_update` field
          example: '2018-08-12T01:15:56Z'
        to:
          type: string
          format: ISO-8601
          description: The date and time until which to filter disputes, based on the dispute's `last_update` field
          example: '2018-08-13T11:09:01Z'
        id:
          type: string
          pattern: "^(dsp)_(\\w{22})$"
          description: The unique identifier of the dispute
          example: 'dsp_rbhwd2qrg13uhrp2newf'
        entity_ids:
          type: string
          description: One or more comma-separated client entities. This works like a logical *OR* operator
          example: 'ent_wxglze3wwywujg4nna5fb7ldli,ent_vkb5zcy64zoe3cwfmaqvqyqyku'
        sub_entity_ids:
          type: string
          description: One or more comma-separated sub-entities. This works like a logical *OR* operator
          example: 'ent_uzm3uxtssvmuxnyrfdffcyjxeu,ent_hy5wtzwzeuwefmsnjtdhw4scfi'
        statuses:
          type: string
          description: One or more comma-separated statuses. This works like a logical *OR* operator
          example: 'evidence_required,evidence_under_review'
        payment_id:
          type: string
          pattern: "^(pay)_(\\w{26})$"
          description: The unique identifier of the payment
          example: 'pay_88cb4e671m1da22e9bbbyx'
        payment_reference:
          type: string
          description: An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`
          example: 'th7zxa1kcnqmes8'
        payment_arn:
          type: string
          description: The acquirer reference number (ARN) that you can use to query the issuing bank
          example: '74548998294293193445538'
        payment_mcc:
          type: string
          description: The merchant category code (MCC) of the payment (ISO 18245)
          example: '5021'
        this_channel_only:
          type: boolean
          description: If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business
          example: true
        total_count:
          type: integer
          description: The total number of disputes retrieved (without taking into consideration skip and limit parameters)
          example: 1
        data:
          type: array
          description: The list of disputes
          items:
            $ref: '#/components/schemas/DisputeSummary'
    DisputeSummary:
      type: object
      properties:
        id:
          type: string
          pattern: "^(dsp)_(\\w{22})$"
          description: The dispute identifier. This is the same as the action ID in the reconciliation API or the charge ID in the Hub.
          example: 'dsp_rbhwd2qrg13uhrp2newf'
        entity_id:
          type: string
          description: The client entity linked to this dispute
          example: 'ent_wxglze3wwywujg4nna5fb7ldli'
        sub_entity_id:
          type: string
          description: The sub-entity linked to this dispute
          example: 'ent_uzm3uxtssvmuxnyrfdffcyjxeu'
        category:
          type: string
          description: The reason for the dispute. [Find out more](https://docs.checkout.com/four/risk-management/disputes#Disputes-Disputereasonsandrecommendedevidence)
          enum:
            [
              fraudulent,
              unrecognized,
              canceled_recurring,
              product_service_not_received,
              not_as_described,
              credit_not_issued,
              duplicate,
              incorrect_amount,
              general,
            ]
          example: 'fraudulent'
        status:
          type: string
          description: The current status of the dispute
          enum:
            [
              evidence_required,
              evidence_under_review,
              resolved,
              won,
              lost,
              canceled,
              expired,
              accepted,
              arbitration_under_review,
              arbitration_won,
              arbitration_lost,
            ]
          example: 'evidence_required'
        amount:
          type: number
          description: The amount that is being disputed, in the processing currency
          example: 999
        currency:
          type: string
          description: The currency the payment was made in
          example: 'GBP'
        reason_code:
          type: string
          description: The reason code provided by the card scheme
          example: '10.4'
        payment_id:
          type: string
          description: The unique payment identifier
          example: 'pay_88cb4e671m1da22e9bbbyx'
        payment_action_id:
          type: string
          description: The unique identifier of the payment action
          example: 'act_mbabizu24mvu3mela5njyhpit4'
        payment_reference:
          type: string
          description: An optional reference (such as an order ID) a merchant can use to later identify the charge. Previously known as TrackId
          example: 'th7zxa1kcnqmes8'
        payment_arn:
          type: string
          description: The acquirer reference number that can be used to query the issuing bank
          example: '74548998294293193445538'
        payment_mcc:
          type: string
          description: The merchant category code (MCC) of the payment (ISO 18245)
          example: '5021'
        payment_method:
          type: string
          description: The payment method/card scheme
          example: VISA
        evidence_required_by:
          type: string
          format: ISO-8601
          description: The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer
          example: '2018-08-22T00:00:00Z'
        received_on:
          type: string
          format: ISO-8601
          description: The date and time at which the dispute was issued
          example: '2018-08-01T01:15:56Z'
        last_update:
          type: string
          format: ISO-8601
          description: The date and time at which the dispute was last updated
          example: '2018-08-12T04:15:56Z'
        _links:
          type: object
          properties:
            self:
              description: The dispute retrieval endpoint
              properties:
                href:
                  example: 'https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf'
    Evidence:
      type: object
      properties:
        proof_of_delivery_or_service_file:
          type: string
          description: The file ID of the file you uploaded as a proof of delivery or service
          example: 'file_jmbfgkjromvcrn9t4qu4'
        proof_of_delivery_or_service_text:
          type: string
          description: A brief text description of the file. You can also use this field to provide a link
          example: 'Delivery slip signed by the customer'
        proof_of_delivery_or_service_date_text:
          type: string
          description: The date on which the item was delivered. You can also use this field to provide a link
          example: 'Merchandise was delivered on 2018-12-30'
    File:
      type: object
      required:
        - file
        - purpose
      properties:
        file:
          type: string
          description: The path of the file to upload, and its type. <br><i>This must be a local path.</i>
          example: 'file=@/path/receipt.png;type=image/png'
        purpose:
          type: string
          description: The purpose of the file upload. You must set this to `dispute_evidence`
          example: 'dispute_evidence'
    FilePurpose:
      type: string
      description: The list of file upload purposes. Currently this is only `dispute_evidence`
      example: 'dispute_evidence'
      enum:
        - dispute_evidence
    FileResult:
      type: object
      description: File was retrieved successfully
      properties:
        id:
          type: string
          description: The file identifier
          example: 'file_6lbss42ezvoufcb2beo76rvwly'
        filename:
          type: string
          description: The filename, including its extension
          example: 'receipt.jpg'
        purpose:
          $ref: '#/components/schemas/FilePurpose'
        size:
          type: integer
          description: The size of the file upload object (in bytes)
          example: 1024
        uploaded_on:
          type: string
          format: ISO-8601
          description: The date and time file was uploaded (in UTC)
          example: '2019-05-17T16:48:52Z'
        _links:
          type: object
          properties:
            self:
              description: The file information retrieval URL
              properties:
                href:
                  example: 'https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly'
            download:
              description: The temporary file download URL. This expires after 60 minutes
              properties:
                href:
                  example: 'https://file-bucket.s3.eu-west-1.amazonaws.com/ucdac/ucdac/6lbss42ezvoufcb2beo76rvwly?X-Amz-Expires=3600&x-amz-security-token=FQoDYXdzENL%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEa'
    FileUploadResponse:
      type: object
      description: File uploaded successfully
      properties:
        id:
          type: string
          description: The file identifier
          example: 'file_6lbss42ezvoufcb2beo76rvwly'
        _links:
          type: object
          properties:
            self:
              description: The file information retrieval URL
              properties:
                href:
                  example: 'https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly'
    PaymentData:
      type: object
      properties:
        id:
          type: string
          description: The payment's unique identifier
          example: 'pay_mbabizu24mvu3mela5njyhpit4'
        action_id:
          type: string
          description: The unique identifier of the payment action
          example: 'act_mbabizu24mvu3mela5njyhpit4'
        processing_channel_id:
          type: string
          pattern: "^(pc)_(\\w{26})$"
          description: The processing channel used for the payment
          example: 'pc_q4dbxom5jbgudnjzjpz7j2z6uq'
        amount:
          type: number
          description: The amount that is being disputed, in the processing currency
          example: 999
        currency:
          type: string
          description: The payment currency
          example: 'GBP'
        method:
          type: string
          description: The payment method used
          example: 'Visa'
        arn:
          type: string
          description: The acquirer reference number (ARN)
          example: 'AA246873253573571073808'
        mcc:
          type: string
          description: The merchant category code (MCC) for the payment (ISO 18245)
          example: '5021'
        3ds:
          type: object
          description: Provides information relating to the processing of 3D Secure payments
          properties:
            enrolled:
              type: string
              description: >
                Indicates the 3D Secure enrollment status of the issuer
                  * `Y` - Issuer enrolled
                  * `N` - Customer not enrolled
                  * `U` - Unknown
              example: Y
            version:
              type: string
              description: Indicates the version of 3D Secure that was used for authentication
              example: '2.1.0'
        eci:
          type: string
          description: |
            The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. 
            Applicable for 3D Secure and network token payments
          example: '06'
        has_refund:
          type: boolean
          description: Indicates if there is any refund against the payment
        processed_on:
          type: string
          format: ISO-8601
          description: The date and time at which the payment was requested
          example: '2018-08-01T08:18:10Z'
    ProvideEvidenceRequest:
      type: object
      properties:
        proof_of_delivery_or_service_file:
          type: string
          description: A file containing proof of delivery of goods or services
          example: 'file_jmbfgkjromvcrn9t4qu4'
        proof_of_delivery_or_service_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: 'http://checkout.com/document.pdf'
        invoice_or_receipt_file:
          type: string
          description: A file containing an invoice/receipt
          example: 'file_jmbfgkjromvcrn9t4qu4'
        invoice_or_receipt_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: 'Copy of the invoice'
        invoice_showing_distinct_transactions_file:
          type: string
          description: A file containing invoice showing two distinct transactions
          example: 'file_jmbfgkjromvcrn9t4qu4'
        invoice_showing_distinct_transactions_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: 'Copy of invoice #1244 showing two transactions'
        customer_communication_file:
          type: string
          description: A file containing customer cummunication
          example: 'file_jmbfgkjromvcrn9t4qu4'
        customer_communication_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: 'Copy of an email exchange with the cardholder'
        refund_or_cancellation_policy_file:
          type: string
          description: A file containing refund/cancellation policy
          example: 'file_jmbfgkjromvcrn9t4qu4'
        refund_or_cancellation_policy_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: 'Copy of the refund policy'
        recurring_transaction_agreement_file:
          type: string
          description: A file containing the recurring transaction agreement
          example: 'file_jmbfgkjromvcrn9t4qu4'
        recurring_transaction_agreement_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: 'Copy of the recurring transaction agreement'
        additional_evidence_file:
          type: string
          description: A file containing additional supporting documents
          example: 'file_jmbfgkjromvcrn9t4qu4'
        additional_evidence_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: 'Scanned document'
        proof_of_delivery_or_service_date_file:
          type: string
          description: A file showing the delivery date of the provided service/merchandise
          example: 'file_jmbfgkjromvcrn9t4qu4'
        proof_of_delivery_or_service_date_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: 'Copy of the customer receipt showing the merchandise was delivered on 2018-12-20'
        _links:
          type: object
          properties:
            self:
              description: The evidence retrieval endpoint
              properties:
                href:
                  example: 'https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf/evidence'
            parent:
              description: The dispute retrieval endpoint
              properties:
                href:
                  example: 'https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf'
    Error:
      type: object
      properties:
        request_id:
          type: string
          example: 0HL80RJLS76I7
        error_type:
          type: string
          example: request_malformed
    BillingDetails:
      type: object
      properties:
        address_line_1:
          type: string
          example: 372 Weimann Lane
        address_line_2:
          type: string
          example: Rolfson Alley
        post_code:
          type: string
          example: ew1 7zb
        country:
          type: string
          example: SJ
        city:
          type: string
          example: North Benedicthaven
        state:
          type: string
          example: Georgia
        phone:
          $ref: '#/components/schemas/Phone'
    Card:
      type: object
      properties:
        customer_id:
          type: string
          example: cust_7508EA38E86A4569AF12E483519E332D
        expiry_month:
          type: string
          example: '06'
        expiry_year:
          type: string
          example: 2018
        billing_details:
          $ref: '#/components/schemas/BillingDetails'
        id:
          type: string
          example: card_D44D7F4CCC6348698717CD80072808B0
        last4:
          type: string
          example: 424242******4242
        payment_method:
          type: string
          example: VISA
        fingerprint:
          type: string
          example: f639cab2745bee4140bf86df6b6d6e255c5945aac3788d923fa047ea4c208622
        name:
          type: string
          example: Test Customer
        cvv_check:
          type: string
          example: 'Y'
        avs_check:
          type: string
          example: S
    CustomerPaymentPlan:
      type: object
      properties:
        id:
          type: string
        customer_plan_id:
          type: string
        card_id:
          type: string
        customer_id:
          type: string
        name:
          type: string
        plan_track_id:
          type: string
        auto_cap_time:
          type: string
        value:
          type: integer
        currency:
          type: string
        cycle:
          type: string
        recurring_count:
          type: integer
        recurring_count_left:
          type: integer
        total_collected_value:
          type: integer
        total_collected_count:
          type: integer
        current_recurring_status:
          type: integer
        start_date:
          type: string
        previous_recurring_date:
          type: string
        next_recurring_date:
          type: string
    Data:
      type: object
      description: The event data
      properties:
        id:
          description: The payment unique identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        action_id:
          description: The unique identifier for the action performed against this payment
          allOf:
            - $ref: '#/components/schemas/ActionId'
        amount:
          type: integer
          description: The payment amount
          example: 6540
        currency:
          type: string
          description: The currency in which the payment was made (<a href="https://www.checkout.com/docs/four/resources/codes/currency-codes" target="blank">three-letter ISO code</a>)
          example: USD
          maxLength: 3
          minLength: 3
        approved:
          type: boolean
          description: Whether the payment request was approved
          example: true
        status:
          type: string
          description: The status of the payment
          enum:
            - Pending
            - Authorized
            - Voided
            - Partially Captured
            - Captured
            - Partially Refunded
            - Refunded
            - Declined
            - Canceled
          example: Authorized
        auth_code:
          type: string
          description: The acquirer authorization code, if the payment was authorized.
          example: '643381'
        response_code:
          type: string
          description: The gateway response code
          example: '10000'
        response_summary:
          type: string
          description: The gateway response summary
          example: 'Approved'
        3ds:
          type: object
          description: Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure
          allOf:
            - $ref: '#/components/schemas/3dsEnrollmentData'
          example:
            downgraded: true
            enrolled: N
        flagged:
          type: boolean
          description: Whether the payment was flagged by a risk check
          default: false
          example: true
        source:
          description: The source of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseSource'
        customer:
          type: object
          description: The customer to which this payment is linked
          allOf:
            - $ref: '#/components/schemas/CustomerResponse'
        processed_on:
          description: The date/time the payment was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format.
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
    EventId:
      type: string
      description: The unique event identifier
      maxLength: 30
      minLength: 30
      example: 'evt_az5sblvku4ge3dwpztvyizgcau'
    EventLinks:
      type: object
      description: The links related to the event
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the event
          example:
            href: 'https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau'
        webhooks-retry:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: A link to retry all of the webhooks configured for the event
          example:
            href: 'https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/retry'
    EventObject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EventId'
        type:
          type: string
          description: The event type
          example: payment_approved
        version:
          type: string
          description: Determines the version of the event sent
          example: '2.0'
        created_on:
          description: The date/time the event occurred
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        data:
          $ref: '#/components/schemas/Data'
        notifications:
          type: array
          description: The notifications (e.g., webhooks) that have been sent for the event
          items:
            $ref: '#/components/schemas/NotificationSummary'
        _links:
          $ref: '#/components/schemas/EventLinks'
    EventResult:
      type: object
      properties:
        total_count:
          type: integer
          example: 100
          description: The total number of events
        limit:
          type: integer
          description: The `limit` query parameter
          example: 10
        skip:
          type: integer
          example: 10
          description: The `skip` query parameter
        from:
          type: string
          format: date-time
          description: The `from` query parameter
          example: '2018-01-01T00:00:00Z'
        to:
          type: string
          format: date-time
          example: '2018-01-15T12:00:00Z'
          description: The `to` query parameter
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventSummary'
    EventSummary:
      type: object
      properties:
        id:
          type: string
          maxLength: 30
          minLength: 30
          description: The event identifier
          example: evt_az5sblvku4ge3dwpztvyizgcau
        type:
          type: string
          description: The event type
          example: payment_approved
        created_on:
          description: The date/time the event occurred
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        _links:
          $ref: '#/components/schemas/EventLinks'
    EventTypesObject:
      type: object
      properties:
        version:
          type: string
          example: '2.0'
        event_types:
          type: array
          items:
            type: string
          example:
            - card_verification_declined
            - card_verified
            - dispute_canceled
            - dispute_evidence_required
            - dispute_expired
            - dispute_lost
            - dispute_resolved
            - dispute_won
            - payment_approved
            - payment_risk_matched
            - payment_pending
            - payment_declined
            - payment_expired
            - payment_cancelled
            - payment_voided
            - payment_void_declined
            - payment_captured
            - payment_capture_declined
            - payment_capture_pending
            - payment_refunded
            - payment_refund_declined
            - payment_refund_pending
            - payment_chargeback
            - payment_retrieval
    Notification:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/NotificationId'
        url:
          type: string
          description: The notification endpoint
          example: https://example.com/webhooks
        success:
          type: boolean
          description: Whether the notification eventually succeeded
          example: false
        content_type:
          type: string
          description: The content type of the data sent to the endpoint
          example: json
        attempts:
          type: array
          description: The notification events ordered by timestamp in descending order (latest first)
          items:
            $ref: '#/components/schemas/NotificationAttempt'
        _links:
          type: object
          description: The links related to the notification
          properties:
            self:
              type: object
              description: The URI of the notification
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau
            retry:
              type: object
              description: A link to retry the notification to the configured webhook
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/wh_5nuzkt62ddxuho5rwsvt6pyesi/retry
    NotificationAttempt:
      type: object
      properties:
        status_code:
          type: integer
          description: The HTTP status code returned from the target server
          example: 400
        response_body:
          type: string
          description: The response body returned from the target server
          example: Bad Request
        retry_mode:
          type: string
          description: Whether the notification was sent automatically or requested manually
          enum:
            - Automatic
            - Manual
        timestamp:
          type: string
          description: The date/time the attempt was made
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
    NotificationId:
      type: string
      description: The unique notification identifier
      maxLength: 30
      minLength: 30
      example: 'ntf_az5sblvku4ge3dwpztvyizgcau'
    NotificationSummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/NotificationId'
        url:
          type: string
          description: The notification endpoint
          example: https://example.com/webhooks
        success:
          type: boolean
          description: Whether the notification eventually succeeded
          example: false
        _links:
          type: object
          description: The links related to the notification
          properties:
            self:
              type: string
              example:
                href: https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau
    Phone:
      type: object
      properties:
        country_code:
          type: string
          example: '975'
        number:
          type: string
          example: '174217187'
    Product:
      type: object
      properties:
        name:
          type: string
          example: Tablet 1 gold limited
        description:
          type: string
          example: Nokia Lumia
        sku:
          type: string
          example: 1aab2aa
        price:
          type: integer
          example: 100
        quantity:
          type: integer
          example: 1
        image:
          type: string
          example: 'http://www.test_Jabari.com/'
        shipping_cost:
          type: integer
          example: 10
        tracking_url:
          type: string
          example: 'https://www.tracker.com'
    ShippingDetails:
      type: object
      properties:
        address_line_1:
          type: string
          example: 333 Cormier Bypass
        address_line_2:
          type: string
          example: Rolfson Alley
        post_code:
          type: string
          example: BR3 6TK
        country:
          type: string
          example: GB
        city:
          type: string
          example: Bromley
        state:
          type: string
          example: Greater London
        phone:
          $ref: '#/components/schemas/Phone'
    get-event-action-response:
      type: object
      properties:
        event_id:
          type: string
          description: The unique event identifier
          example: evt_az5sblvku4ge3dwpztvyizgcau
        workflow_action_id:
          type: string
          description: The worfklow action identifier
          example: wfa_uzkxpffkvpiu5fe3h5ira7sqpa
        type:
          type: string
          description: The workflow action type
          example: webhook
        success:
          type: boolean
          description: Whether the workflow action was successful
          example: true
        invocations:
          type: array
          description: The results for each action invocation
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
                description: The date/time the action was invoked for the event
              success:
                type: boolean
                description: Whether the invocation completed successfully
              result:
                type: object
                description: The results returned from the action
              is_final:
                type: boolean
                description: Whether this is the final attempt
                example: false
          example:
            - timestamp: '2019-05-23T08:26:59Z'
              success: false
              result:
                status_code: '500'
                summary: Server Error
              is_final: false
            - timestamp: '2019-05-23T08:27:01Z'
              success: true
              result:
                status_code: '200'
                summary: OK
              is_final: true
    get-event-response:
      type: object
      additionalProperties: true
      properties:
        id:
          type: string
          description: The unique event identifier
          example: evt_az5sblvku4ge3dwpztvyizgcau
        source:
          type: string
          description: The source of the event
          example: gateway
        type:
          type: string
          description: The event type
          example: payment_approved
        timestamp:
          type: string
          format: date-time
          description: The date/time the event occurred
        version:
          type: string
          description: The version of the event
          example: 1.0.0
        data:
          $ref: '#/components/schemas/event-data'
        # workflows:
        #   type: array
        #   description: The workflows that were invoked for this particular event
        #   items:
        #     type: object
        #     properties:
        #       id:
        #         type: string
        #         description: The unique identifier of the workflow
        #         example: wf_wlu3wxc26jounofs5iez75qaqa
        #       name:
        #         type: string
        #         description: The name you provided for your workflow
        #         example: Webhooks workflow
        #       actions:
        #         type: array
        #         description: The actions that were invoked for this workflow
        #         items:
        #           type: object
        #           properties:
        #             id:
        #               type: string
        #               description: The worfklow action identifier
        #               example: wfa_uzkxpffkvpiu5fe3h5ira7sqpa
        #             type:
        #               type: string
        #               description: The type of workflow action
        #               example: webhook
        #             status:
        #               type: string
        #               enum:
        #                 - pending
        #                 - completed
        #                 - failed
        #               description: The status of the workflow action
        #               example: completed
        #             completed_on:
        #               type: string
        #               format: date-time
        #               description: The date/time the workflow action completed
        #             _links:
        #               type: object
        #               description: Links related to the workflow action
        #               minItems: 1
        #               required:
        #                 - self
        #               properties:
        #                 self:
        #                   type: object
        #                   allOf:
        #                     - $ref: '#/components/schemas/Link'
        #                   description: Workflow action results for this event
        #               example:
        #                 self:
        #                   href: "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/actions/wfa_uzkxpffkvpiu5fe3h5ira7sqpa"
        _links:
          $ref: '#/components/schemas/event-links'
    get-event-types-response:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: The unique identifier of the event source
            example: gateway
          display_name:
            type: string
            description: The display name of the event source
            example: Gateway
          description:
            type: string
            description: A description of the event source
            example: Events from the Checkout.com payment gateway
          events:
            type: array
            description: The events raised by the source
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The event type identifier
                  example: payment_approved
                display_name:
                  type: string
                  description: The display name of the event
                  example: Payment Authorized
                description:
                  type: string
                  description: A description of the event
                  example: Occurs when a payment is successfully authorized by the Checkout.com payment gateway
    event-data:
      type: object
      description: The event data
      example:
        {
          'id': 'pay_mbabizu24mvu3mela5njyhpit4',
          'action_id': 'act_y3oqhf46pyzuxjbcn2giaqnb44',
          'amount': 6540,
          'currency': 'USD',
          'approved': true,
          'status': 'Authorized',
          'auth_code': '643381',
          'response_code': '10000',
          'response_summary': 'Approved',
          '3ds': { 'downgraded': true, 'enrolled': 'N' },
          'flagged': true,
          'source':
            {
              'type': 'card',
              'id': 'src_nwd3m4in3hkuddfpjsaevunhdy',
              'billing_address':
                {
                  'address_line1': 'Checkout.com',
                  'address_line2': '90 Tottenham Court Road',
                  'city': 'London',
                  'state': 'London',
                  'zip': 'W1T 4TJ',
                  'country': 'GB',
                },
              'phone': { 'country_code': '+1', 'number': '415 555 2671' },
            },
          'customer': { 'id': 'cus_y3oqhf46pyzuxjbcn2giaqnb44', 'email': 'brucewayne@gmail.com', 'name': 'Bruce Wayne' },
          'processed_on': '2020-02-27T11:26:59Z',
          'reference': 'ORD-5023-4E89',
          'metadata': { 'coupon_code': 'NY2018', 'partner_id': 123989 },
        }
    event-links:
      type: object
      description: Links related to the event
      minItems: 1
      required:
        - self
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the event
      example:
        self:
          href: 'https://api.checkout.com/workflows/events/evt_az5sblvku4ge3dwpztvyizgcau'
        payment:
          href: 'https://api.checkout.com/payments/pay_wlu3wxc26jounofs5iez75qaqa'
        dispute:
          href: 'https://api.checkout.com/disputes/dsp_jfh5iqceqau0qw3ccf3p'
    source-events-hashmap:
      type: object
      additionalProperties:
        description: The event source
        type: array
        items:
          type: string
          description: The source event types
          example: payment_approved
      example:
        gateway:
          - card_verified
          - card_verification_declined
          - payment_approved
          - payment_pending
          - payment_declined
          - payment_voided
          - payment_captured
          - payment_refunded
        disputes:
          - dispute_canceled
          - dispute_evidence_required
          - dispute_expired
          - dispute_lost
          - dispute_resolved
          - dispute_won
    subject-events-response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: The unique event identifier
                example: evt_az5sblvku4ge3dwpztvyizgcau
              type:
                type: string
                description: The event type
                example: payment_approved
              timestamp:
                type: string
                format: date-time
                description: The date/time the event occurred
              _links:
                $ref: '#/components/schemas/event-links'
          example:
            - id: evt_zrrgsvsr47ou7fng4shy4mtf64
              type: payment_approved
              timestamp: '2019-05-23T08:25:53Z'
              _links:
                self:
                  href: https://api.checkout.com/events/evt_zrrgsvsr47ou7fng4shy4mtf64
            - id: evt_wgwdfyem4ode5furs5swyy6b2u
              type: payment_captured
              timestamp: '2019-05-24T07:00:53Z'
              _links:
                self:
                  href: https://api.checkout.com/events/evt_zrrgsvsr47ou7fng4shy4mtf64
    event-id-validation-error:
      type: object
      properties:
        request_id:
          type: string
          example: 0HL80RJLS76I7
        error_type:
          type: string
          example: request_invalid
        error_codes:
          type: array
          items:
            type: string
            example: event_id_invalid
    ids-validation-error:
      type: object
      properties:
        request_id:
          type: string
          example: 0HL80RJLS76I7
        error_type:
          type: string
          example: request_invalid
        error_codes:
          type: array
          items:
            type: string
            example: event_ids_invalid
          example: [event_ids_invalid, workflow_ids_invalid]
    reflow-events-by-event-and-workflow-ids:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          description: A list of IDs for the events you want reflowed.
          items:
            type: string
            description: The identifiers of the events you want reflowed.
            pattern: ^evt_[a-z0-9]{26}$
            example: evt_hnmnr6hdbslqlc38jd8mn35bk9
          example: [evt_lzmo6p0i3612judj754w1ngtil, evt_05z6xuagtti48ajyfbuekg6a0a]
        workflows:
          type: array
          description: A list of IDs for the workflows whose actions you want to retrigger.
          items:
            type: string
            description: The identifiers of the workflows you want retriggered.
            pattern: ^wf_[a-z0-9]{26}$
            example: wf_iiutwnpb1p8044f2aq2znez9c6
          example: [wf_sq8jnqi9i749hhb470bu308uk2, wf_bz91q7i4ks4sr0kasmas2xhp56]
    reflow-events-by-subject-and-workflow-ids:
      type: object
      required:
        - subjects
      properties:
        subjects:
          type: array
          description: A list of subject IDs (for example, payment IDs and disputes IDs). The events associated with these subjects will be reflowed.
          items:
            type: string
            description: The identifiers of the subjects (for example, payment IDs and dispute IDs) whose events you want reflowed.
            pattern: ^[a-z]{3}_[a-z0-9]{26}$
            example: pay_hnmnr6hdbslqlc38jd8mn35bk9
          example: [pay_lzmo6p0i3612judj754w1ngtil, pay_ol88zt9jviq4mkark1bo5b4i9sk]
        workflows:
          type: array
          description: A list of IDs for the workflows whose actions you want to retrigger.
          items:
            type: string
            description: The identifiers of the workflows you want retriggered.
            pattern: ^wf_[a-z0-9]{26}$
            example: wf_iiutwnpb1p8044f2aq2znez9c6
          example: [wf_sq8jnqi9i749hhb470bu308uk2, wf_bz91q7i4ks4sr0kasmas2xhp56]
    subject-id-validation-error:
      type: object
      properties:
        request_id:
          type: string
          example: 0HL80RJLS76I7
        error_type:
          type: string
          example: request_invalid
        error_codes:
          type: array
          items:
            type: string
            example: subject_id_invalid
    get-simulator-action:
      type: object
      description: Action that invokes the Flow simulator
      required:
        - api_key
      allOf:
        #- $ref: '#/components/schemas/get-workflow-action'
        - type: object
          required:
            - api_key
          properties:
            api_key:
              type: string
              description: The simulator API key (any value supported)
              example: 'secret123'
            _links:
              $ref: '#/components/schemas/workflow-action-links'
    get-slack-action:
      type: object
      description: Action that sends a message to Slack
      required:
        - url
      allOf:
        #- $ref: '#/components/schemas/get-workflow-action'
        - type: object
          required:
            - url
            - channel
          properties:
            url:
              type: string
              format: uri
              description: Your slack incoming webhook URL
              example: 'https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX'
            channel:
              type: string
              description: The slack channel you wish to send messages to
              example: '#notifications'
            message_template:
              type: string
              description: The message template in liquid format you wish to use for slack messages. If no template is provided, the full event data will be provided.
              example: 'A payment for {event.amount} {event.currency} was declined'
            _links:
              $ref: '#/components/schemas/workflow-action-links'
    get-webhook-action:
      type: object
      description: Action that sends a webhook
      required:
        - url
      allOf:
        - $ref: '#/components/schemas/get-workflow-action'
        - type: object
          required:
            - url
          properties:
            url:
              type: string
              format: uri
              description: Your webhook endpoint URL
              example: 'https://example.com/webhooks/checkout'
            headers:
              type: object
              description: Optional [HTTP headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) added to the request
              additionalProperties:
                type: string
                description: The HTTP header value
              example:
                Authorization: '70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf'
            signature:
              type: object
              description:
                Used to produce a signature of the webhook contents that will be included in the `Cko-Signature` header.
                This value can be computed by you on receipt of a webhook to validate its authenticity.
              required:
                - key
              properties:
                method:
                  type: string
                  description: The signing method, defaults to HMAC SHA256
                  example: HMACSHA256
                key:
                  type: string
                  description: The key used the sign the webhook
                  example: public-signing-key
            _links:
              $ref: '#/components/schemas/workflow-action-links'
    get-workflow-action:
      type: object
      description: The workflow action
      discriminator:
        propertyName: type
        mapping:
          webhook: '#/components/schemas/get-webhook-action'
          #slack: '#/components/schemas/get-slack-action'
          #simulator: '#/components/schemas/get-simulator-action'
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: The workflow action identifier
          example: wfa_tisekcawefze3l27uaai6hz74y
        type:
          type: string
          description: The type of workflow action
          example: webhook
    simulator-action:
      type: object
      description: Action that invokes the Flow simulator
      required:
        - api_key
      allOf:
        #- $ref: '#/components/schemas/workflow-action'
        - type: object
          required:
            - api_key
          properties:
            api_key:
              type: string
              description: The simulator API key (any value supported)
              example: 'secret123'
    slack-action:
      type: object
      description: Action that sends a message to Slack
      required:
        - url
      allOf:
        #- $ref: '#/components/schemas/workflow-action'
        - type: object
          required:
            - url
            - channel
          properties:
            url:
              type: string
              format: uri
              description: Your slack incoming webhook URL
              example: 'https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX'
            channel:
              type: string
              description: The slack channel you wish to send messages to
              example: '#notifications'
            message_template:
              type: string
              description: The message template in liquid format you wish to use for slack messages. If no template is provided, the full event data will be provided.
              example: 'A payment for {event.amount} {event.currency} was declined'
    webhook-action:
      type: object
      description: Action that sends a webhook
      required:
        - url
      allOf:
        - $ref: '#/components/schemas/workflow-action'
        - type: object
          required:
            - url
          properties:
            url:
              type: string
              format: uri
              description: Your webhook endpoint URL
              example: 'https://example.com/webhooks/checkout'
            headers:
              type: object
              description: Optional [HTTP headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) added to the request
              additionalProperties:
                type: string
                description: The HTTP header value
              example:
                Authorization: '70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf'
            signature:
              type: object
              description:
                Used to produce a signature of the webhook contents that will be included in the `Cko-Signature` header.
                This value can be computed by you on receipt of a webhook to validate its authenticity.
              required:
                - key
              properties:
                method:
                  type: string
                  description: The signing method. Defaults to HMAC SHA256.
                  example: HMACSHA256
                key:
                  type: string
                  description: The key used to sign the webhook
                  example: public-signing-key
    workflow-action:
      type: object
      description: The workflow action
      discriminator:
        propertyName: type
        mapping:
          webhook: '#/components/schemas/webhook-action'
          #simulator: '#/components/schemas/simulator-action'
          #slack: '#/components/schemas/slack-action'
      required:
        - type
      properties:
        type:
          type: string
          description: The type of workflow action
          example: webhook
    add-update-workflow-action-request:
      type: object
      description: The workflow action
      discriminator:
        propertyName: type
        mapping:
          webhook: '#/components/schemas/webhook-action'
          #slack: '#/components/schemas/slack-action'
          #simulator: '#/components/schemas/simulator-action'
      required:
        - type
      properties:
        type:
          type: string
          description: The type of workflow action
          example: webhook
      example:
        {
          'type': 'webhook',
          'url': 'https://example.com/webhooks',
          'headers': { 'Authorization': '70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf' },
        }
    add-update-workflow-condition-request:
      type: object
      description: The workflow condition
      discriminator:
        propertyName: type
        mapping:
          event: '#/components/schemas/event-condition'
          entity: '#/components/schemas/entity-condition'
          processing-channel: '#/components/schemas/processing-channel-condition'
      required:
        - type
      properties:
        type:
          type: string
          description: The type of the workflow condition
          example: event
      example: { 'type': 'event', 'events': { 'gateway': ['payment_approved', 'payment_pending', 'payment_declined'] } }
    add-workflow-action-response:
      type: object
      properties:
        id:
          type: string
          description: The workflow action identifier
          example: wfa_wlu3wxc26jounofs5iez75qaqa
        _links:
          $ref: '#/components/schemas/workflow-action-links'
    add-workflow-condition-response:
      type: object
      properties:
        id:
          type: string
          description: The workflow condition identifier
          example: wfc_wlu3wxc26jounofs5iez75qaqa
        _links:
          $ref: '#/components/schemas/workflow-condition-links'
    add-workflow-request:
      type: object
      properties:
        name:
          type: string
          description: A name you can use to describe your workflow
          example: Webhooks workflow
        active:
          type: boolean
          description: Indicates whether the workflow is currently active
          default: true
          example: true
        conditions:
          type: array
          description: Only one condition of the same type is permitted
          minItems: 1
          items:
            $ref: '#/components/schemas/workflow-condition'
        actions:
          type: array
          description: One or more workflow actions
          minItems: 1
          items:
            $ref: '#/components/schemas/workflow-action'
      example:
        {
          'name': 'Webhooks workflow',
          'active': true,
          'conditions':
            [
              {
                'type': 'event',
                'events':
                  {
                    'gateway':
                      [
                          'payment_approved',
                          'payment_declined',
                          'card_verification_declined',
                          'card_verified',
                          'payment_authorization_incremented',
                          'payment_authorization_increment_declined',
                          'payment_capture_declined',
                          'payment_captured',
                          'payment_refund_declined',
                          'payment_refunded',
                          'payment_void_declined',
                          'payment_voided',
                      ],
                    'dispute':
                      [
                          'dispute_canceled',
                          'dispute_evidence_required',
                          'dispute_expired',
                          'dispute_lost',
                          'dispute_resolved',
                          'dispute_won',
                      ],
                  },
              },
              { 'type': 'entity', 'entities': [ 'ent_xyfdshfudosfdshfdiosfds', 'ent_fidjosfjdisofdjsifdosfu' ] },
              { 'type': 'processing_channel', 'processing_channels': [ 'pc_axclravnqf5u5ejkweijnp5zc4' ] },
            ],
          'actions':
            [
              {
                'type': 'webhook',
                'url': 'https://example.com/webhooks',
                'headers': { 'Authorization': '70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf' },
                'signature': { 'method': 'HMACSHA256', 'key': '8V8x0dLK%AyD*DNS8JJr' },
              },
            ],
        }
    add-workflow-response:
      type: object
      properties:
        id:
          type: string
          description: The workflow identifier
          example: wf_wlu3wxc26jounofs5iez75qaqa
        _links:
          $ref: '#/components/schemas/workflow-links'
    entity-condition:
      type: object
      description: Condition that filters based on the entity
      required:
        - entities
      allOf:
        - $ref: '#/components/schemas/workflow-condition'
        - type: object
          required:
            - entities
          properties:
            entities:
              $ref: '#/components/schemas/source-entity-hashmap'
    event-condition:
      type: object
      description: Condition that enables a source
      required:
        - events
      allOf:
        - $ref: '#/components/schemas/workflow-condition'
        - type: object
          required:
            - events
          properties:
            events:
              $ref: '#/components/schemas/source-events-hashmap'
    get-entity-condition:
      type: object
      description: Condition that filters based on the entity
      required:
        - entities
      allOf:
        - $ref: '#/components/schemas/get-workflow-condition'
        - type: object
          required:
            - entities
          properties:
            entities:
              $ref: '#/components/schemas/source-entity-hashmap'
            _links:
              $ref: '#/components/schemas/workflow-condition-links'
    get-event-condition:
      type: object
      description: Condition that enables a source
      required:
        - events
      allOf:
        - $ref: '#/components/schemas/get-workflow-condition'
        - type: object
          required:
            - events
          properties:
            events:
              $ref: '#/components/schemas/source-events-hashmap'
            _links:
              $ref: '#/components/schemas/workflow-condition-links'
    get-processing-channel-condition:
      type: object
      description: Condition that filters based on the processing channel
      required:
        - processing_channels
      allOf:
        - $ref: '#/components/schemas/get-workflow-condition'
        - type: object
          required:
            - processing_channels
          properties:
            processing_channels:
              $ref: '#/components/schemas/source-processing-channel-hashmap'
            _links:
              $ref: '#/components/schemas/workflow-condition-links'
    get-workflow-condition:
      type: object
      description: The get workflow condition
      discriminator:
        propertyName: type
        mapping:
          event: '#/components/schemas/get-event-condition'
          entity: '#/components/schemas/get-entity-condition'
          processing_channel: '#/components/schemas/get-processing-channel-condition'
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: The workflow condition identifier
          example: wfc_tisekcawefze3l27uaai6hz74y
        type:
          type: string
          description: The type of the workflow condition
          example: event
    processing-channel-condition:
      type: object
      description: Condition that filters based on the NAS processing channel. It's not applicable for MBC accounts
      required:
        - processing_channels
      allOf:
        - $ref: '#/components/schemas/workflow-condition'
        - type: object
          required:
            - processing_channels
          properties:
            processing_channels:
              $ref: '#/components/schemas/source-processing-channel-hashmap'
    source-entity-hashmap:
      type: array
      items:
        type: string
      minItems: 1
      pattern: ^ent_[a-z0-9]{26}$
      description: ent_axclravnqf5u5ejkweijnp5zc4
      example:
        - ent_axclravnqf5u5ejkweijnp5zc4
        - ent_fidjosfjdisofdjsifdosfuzc4
    source-processing-channel-hashmap:
      type: array
      minItems: 1
      pattern: ^pc_[a-z2-7]{26}$
      description: pc_axclravnqf5u5ejkweijnp5zc4
      example:
          - pc_axclravnqf5u5ejkweijnp5zc4
          - pc_aascravnas5u5ejkseijnp9zc2
    workflow-condition:
      type: object
      description: The workflow condition
      discriminator:
        propertyName: type
        mapping:
          event: '#/components/schemas/event-condition'
          entity: '#/components/schemas/entity-condition'
          processing_channel: '#/components/schemas/processing-channel-condition'
      required:
        - type
      properties:
        type:
          type: string
          description: The type of the workflow condition
          example: event
    get-all-workflows-response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                pattern: ^wf_[a-z0-9]{26}$
                description: The unique identifier of the workflow
                example: wf_wlu3wxc26jounofs5iez75qaqa
              name:
                type: string
                description: The name of your workflow
                example: Webhooks workflow
              active:
                type: boolean
                description: Indicates whether the workflow is currently active
                example: true
              _links:
                $ref: '#/components/schemas/workflow-links'
    get-workflow-response:
      type: object
      properties:
        id:
          type: string
          description: The workflow identifier
          example: wf_34pacj7ae6wexju4avpecxvp6e
        name:
          type: string
          description: A name you can use to describe your workflow
          example: Webhooks workflow
        active:
          type: boolean
          description: Indicates whether the workflow is currently active
          example: true
        conditions:
          type: array
          description: One or more workflow conditions
          minItems: 1
          items:
            $ref: '#/components/schemas/get-workflow-condition'
        actions:
          type: array
          description: One or more workflow actions
          minItems: 1
          items:
            $ref: '#/components/schemas/get-workflow-action'
        _links:
          $ref: '#/components/schemas/workflow-links'
      example:
        {
          'id': 'wf_34pacj7ae6wexju4avpecxvp6e',
          'name': 'Webhooks workflow',
          'active': true,
          'conditions':
            [
              {
                'id': 'wfc_tisekcawefze3l27uaai6hz74e',
                'type': 'event',
                'events': { 'gateway': ['payment_approved', 'payment_pending', 'payment_declined'] },
                '_links':
                  {
                    'self':
                      {
                        'href': 'https://api.checkout.com/workflows/wf_34pacj7ae6wexju4avpecxvp6e/conditions/wfc_tisekcawefze3l27uaai6hz74e',
                      },
                  },
              },
              {
                'id': 'wfc_tisekcawefze3l27uaai6hz74y',
                'type': 'entity',
                'entities': ['ent_xyfdshfudosfdshfdiosfds', 'ent_fidjosfjdisofdjsifdosfu'],
                '_links':
                  {
                    'self':
                      {
                        'href': 'https://api.checkout.com/workflows/wf_34pacj7ae6wexju4avpecxvp6e/conditions/wfc_tisekcawefze3l27uaai6hz74y',
                      },
                  },
              },
              {
                'id': 'wfc_tisekcawefze3l27uaai6hz26y',
                'type': 'processing_channel',
                'processing_channels': ['pc_axclravnqf5u5ejkweijnp5zc4'],
                '_links':
                  {
                    'self':
                      {
                        'href': 'https://api.checkout.com/workflows/wf_34pacj7ae6wexju4avpecxvp6e/conditions/wfc_tisekcawefze3l27uaai6hz26y',
                      },
                  },
              },
            ],
          'actions':
            [
              {
                'id': 'wfa_itja4x7zgzye3andzqq62u4hvq',
                'type': 'webhook',
                'url': 'https://example.com/webhooks',
                'headers': { 'Authorization': '70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf' },
                'signature': { 'method': 'HMACSHA256', 'key': '8V8x0dLK%AyD*DNS8JJr' },
                '_links':
                  {
                    'self':
                      {
                        'href': 'https://api.checkout.com/workflows/wf_34pacj7ae6wexju4avpecxvp6e/actions/wfa_itja4x7zgzye3andzqq62u4hvq',
                      },
                  },
              },
            ],
          '_links': { 'self': { 'href': 'https://api.checkout.com/workflows/wf_wlu3wxc26jounofs5iez75qaqa' } },
        }
    patch-workflow-request:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: A name to describe the workflow
          example: Webhooks workflow
        active:
          type: boolean
          description: Indicates whether the workflow is currently active
          example: true
      example: { 'name': 'Webhooks workflow', 'active': true }
    patch-workflow-response:
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow
          example: 'Webhooks workflow'
        active:
          type: boolean
          description: Indicates whether the workflow is currently active
          example: true
    workflow-action-links:
      type: object
      description: Links related to the workflow action
      minItems: 1
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the workflow action
      example:
        self:
          href: 'https://api.checkout.com/workflows/wf_wlu3wxc26jounofs5iez75qaqa/actions/wfa_wlu3wxc26jounofs5iez75qaqa'
    workflow-condition-links:
      type: object
      description: Links related to the workflow condition
      minItems: 1
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the workflow condition
      example:
        self:
          href: 'https://api.checkout.com/workflows/wf_wlu3wxc26jounofs5iez75qaqa/conditions/wfc_wlu3wxc26jounofs5iez75qaqa'
    workflow-links:
      type: object
      description: Links related to the workflow
      minItems: 1
      required:
        - self
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the workflow
      example:
        self:
          href: 'https://api.checkout.com/workflows/wf_wlu3wxc26jounofs5iez75qaqa'
    test-workflow-request:
      type: object
      properties:
        event_types:
          type: array
          items:
            type: string
          description: Event types for which the workflow will execute
      example:
        {
          'event_types':
            [
              'payment_approved',
              'payment_declined',
              'card_verification_declined',
              'card_verified',
              'payment_authorization_incremented',
              'payment_authorization_increment_declined',
              'payment_capture_declined',
              'payment_captured',
              'payment_refund_declined',
              'payment_refunded',
              'payment_void_declined',
              'payment_voided',
              'dispute_canceled',
              'dispute_evidence_required',
              'dispute_expired',
              'dispute_lost',
              'dispute_resolved',
              'dispute_won',
            ],
        }
    QuoteId:
      type: string
      pattern: "^(qte)_(\\w{26})$"
      description: The FX quote identifier
      maxLength: 30
      minLength: 30
      example: 'qte_mbabizu24mvu3mela5njyhpit4'
    QuoteRequest:
      type: object
      required:
        - source_currency
        - destination_currency
        - processing_channel_id
      properties:
        source_currency:
          type: string
          description: The source three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
          example: GBP
        source_amount:
          type: integer
          description: |
            The amount to be converted from the source currency in the minor currency unit.
      
            The amount must be provided in the <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="_blank">minor currency unit</a>.
          example: 30000
        destination_currency:
          type: string
          description: The destination three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
          example: USD
        destination_amount:
          type: integer
          description: |
            The amount to be converted to the destination currency in the minor currency unit.
      
            The amount must be provided in the <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="_blank">minor currency unit</a>.
        processing_channel_id:
          type: string
          pattern: "^(pc)_(\\w{26})$"
          description: The processing channel used for the payment
          example: 'pc_abcdefghijklmnopqrstuvwxyz'
      example:
        source_currency: GBP
        source_amount: 30000
        destination_currency: USD
        processing_channel_id: 'pc_abcdefghijklmnopqrstuvwxyz'
    QuoteResponse:
      type: object
      properties:
        id:
          description: The quote's unique identifier
          allOf:
            - $ref: '#/components/schemas/QuoteId'
        source_currency:
          type: string
          description: The source three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
          example: GBP
        source_amount:
          type: integer
          description: The source currency amount
          example: 30000
        destination_currency:
          type: string
          description: The destination three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
          example: USD
        destination_amount:
          type: integer
          description: The destination currency amount
          example: 35700
        rate:
          type: number
          description: The quoted rate
          example: 1.19
        expires_on:
          type: string
          format: date-time
          description: The date/time that the quote expires
        is_single_use:
          type: boolean
          description: If the quote is restricted to a single use, or can be confirmed multiple times before expiry
          example: false
    GetHostedPaymentsResponse:
      type: object
      discriminator:
        propertyName: status
        mapping:
          Payment Pending: '#/components/schemas/GetHostedPaymentsResponseStatusPaymentPending'
          Payment Received: '#/components/schemas/GetHostedPaymentsResponseStatusPaymentReceived'
          Expired: '#/components/schemas/GetHostedPaymentsResponseStatusExpired'
      
      required:
        - id
        - status
        - amount
        - currency
        - billing
        - success_url
        - cancel_url
        - failure_url
        - _links
      
      properties:
        id:
          example: hpp_xGQBg0AXl3cM
          allOf:
            - $ref: '#/components/schemas/HostedPaymentId'
        status:
          type: string
          enum:
            - Payment Pending
            - Payment Received
            - Expired
          description: |
            The status of the Hosted Payments Page:
              - `Payment Pending`: The Hosted Payments Page can accept a payment from the customer. A payment may have been attempted by the customer but not completed successfully.
              - `Payment Received`: A payment has been received successfully using this Hosted Payments Page.
              - `Expired`: The Hosted Payments Page has expired and can no longer be accessed.
          example: Payment Pending
        payment_id:
          type: string
          description: Unique identifier for an in progress or completed payment for this Payment Link.
          example:
        amount:
          type: integer
          description: The original payment amount.
          example: 100
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/resources/codes/currency-codes" target="blank">ISO currency code</a> of the payment.<br>
          example: GBP
        reference:
          type: string
          description: Your reference for the payment.
          example: ORD-123A
        description:
          type: string
          description: A description of the payment.
          example: Payment for Gold Necklace
        customer:
          type: object
          description: The customer's details.
          properties:
            email:
              type: string
              format: email
              description: The email address for the customer.
              example: brucewayne@email.com
            name:
              type: string
              description: The customer's name.
              example: Bruce Wayne
        billing:
          type: object
          additionalProperties: false
          description: The billing details.
          required:
            - address
          properties:
            address:
              type: object
              description: The billing address.
              required:
                - country
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              type: object
              description: The customer's phone number.
              required:
                - number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        products:
          type: array
          description: Details about the provided products.
          items:
            type: object
            additionalProperties: false
            required:
              - name
              - price
            properties:
              name:
                type: string
                description: Descriptive item name.
                example: Gold Necklace
              quantity:
                type: integer
                description: The item quantity
                example: 1
              price:
                type: integer
                description: Minor units. Includes tax, excludes discounts.
                example: 200
        metadata:
          type: object
          description: Any additional information stored at the point of creation.
          additionalProperties: true
        success_url:
          type: string
          format: uri
          description: The provided URL your customer will be redirected to upon a successful payment.
          example: https://example.com/success
        cancel_url:
          type: string
          format: uri
          description: The provided URL your customer will be redirected to if the payment is cancelled.
          example: https://example.com/cancel
        failure_url:
          type: string
          format: uri
          description: The provided URL your customer will be redirected to upon a failed payment.
          example: https://example.com/failure
    GetHostedPaymentsResponseLinks:
      type: object
      description: The links related to the Hosted Payments Page.
      minItems: 2
      required:
        - self
        - redirect
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the Hosted Payments Page details.
        redirect:
          type: object
          description: The link to visit the Hosted Payments Page.
          allOf:
            - $ref: '#/components/schemas/Link'
        payment:
          type: object
          description: The URI of the in progress or completed payment for this Hosted Payments Page.
          allOf:
            - $ref: '#/components/schemas/Link'
        payment_actions:
          type: object
          description: The URI of the actions associated with the in progress or completed payment for this Hosted Payments Page.
          allOf:
            - $ref: '#/components/schemas/Link'
      example:
        self:
          href: 'https://api.sandbox.checkout.com/hosted-payments/hpp_xGQBg0AXl3cM'
        redirect:
          href: 'https://pay.sandbox.checkout.com/page/hpp_xGQBg0AXl3cM'
    GetHostedPaymentsResponseStatusExpired:
      type: object
      description: An expired Hosted Payments Page.
      allOf:
        - $ref: '#/components/schemas/GetHostedPaymentsResponse'
        - type: object
          properties:
            _links:
              allOf:
                - $ref: '#/components/schemas/GetHostedPaymentsResponseLinks'
    GetHostedPaymentsResponseStatusPaymentPending:
      type: object
      description: A Hosted Payments Page that can accept a payment from a customer.
      allOf:
        - $ref: '#/components/schemas/GetHostedPaymentsResponse'
        - type: object
          properties:
            _links:
              allOf:
                - $ref: '#/components/schemas/GetHostedPaymentsResponseLinks'
    GetHostedPaymentsResponseStatusPaymentReceived:
      type: object
      description: A Hosted Payments Page that has received a payment
      required:
        - payment_id
      allOf:
        - $ref: '#/components/schemas/GetHostedPaymentsResponse'
        - type: object
          properties:
            payment_id:
              example: pay_m3s3k65cfpl2hd2rv4by4vl4r4
            _links:
              required:
                - payment
                - payment_actions
              allOf:
                - $ref: '#/components/schemas/GetHostedPaymentsResponseLinks'
              example:
                self:
                  href: https://api.sandbox.checkout.com/hosted-payments/hpp_xGQBg0AXl3cM
                redirect:
                  href: https://pay.sandbox.checkout.com/page/hpp_xGQBg0AXl3cM
                payment:
                  href: https://api.sandbox.checkout.com/payments/pay_m3s3k65cfpl2hd2rv4by4vl4r4
                payment_actions:
                  href: https://api.sandbox.checkout.com/payments/pay_m3s3k65cfpl2hd2rv4by4vl4r4/actions
    HostedPaymentId:
      type: string
      pattern: '^hpp_[A-Za-z0-9_-]{12}$'
      description: The unique identifier for a Hosted Payments Page.
      maxLength: 16
      minLength: 16
    HostedPaymentsRequest:
      type: object
      required:
        - currency
        - billing
        - success_url
        - cancel_url
        - failure_url
      properties:
        amount:
          type: integer
          description: The payment amount. The exact format <a href="https://www.checkout.com/docs/four/resources/calculating-the-amount" target="_blank">depends on the currency</a>
          minimum: 1
          example: 1000
        currency:
          type: string
          description: The three-letter <a href="https://www.checkout.com/docs/four/resources/codes/currency-codes" target="blank">ISO currency code</a> of the payment
          example: GBP
          minLength: 3
          maxLength: 3
        payment_type:
          type: string
          description: This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)
          enum:
            - Regular
            - Recurring
          default: Regular
        payment_ip:
          type: string
          format: ipv4
          maxLength: 45
          description: The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses
        billing_descriptor:
          type: object
          description: An optional description that is displayed on the customer's statement identifying a purchase
          required:
            - name
            - city
          properties:
            name:
              type: string
              maxLength: 25
              description: A dynamic description of the change
            city:
              type: string
              minLength: 1
              maxLength: 13
              description: The city from which the charge originated
            reference:
              type: string
              maxLength: 50
              description: The reference shown on the statement. Required for payouts to bank accounts.
        reference:
          type: string
          description: A reference you can later use to identify this payment, such as an order number
          example: ORD-123A
          maxLength: 50
        description:
          type: string
          description: A description of the payment
          example: Payment for Gold Necklace
          maxLength: 100
        processing_channel_id:
          type: string
          pattern: "^(pc)_(\\w{26})$"
          description: The processing channel to be used for the payment
          example: 'pc_q4dbxom5jbgudnjzjpz7j2z6uq'
        marketplace:
          $ref: '#/components/schemas/MarketplaceData'
        customer:
          type: object
          description: The customer's details
          properties:
            email:
              type: string
              format: email
              description: An optional email address to associate with the customer
              example: brucewayne@email.com
              maxLength: 255
            name:
              type: string
              description: The customer's name. This will only set the name for new customers
              example: Bruce Wayne
              maxLength: 255
        shipping:
          type: object
          description: The address any products are being sent to.
          required:
            - address
          properties:
            address:
              type: object
              description: The customer's address to ship to.
              required:
                - country
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              type: object
              description: The customer's phone number
              required:
                - number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        billing:
          type: object
          additionalProperties: false
          description: The billing details
          required:
            - address
          properties:
            address:
              type: object
              description: The billing address
              required:
                - country
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              type: object
              description: The customer's phone number. This will override the phone number specified during tokenization
              required:
                - number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        recipient:
          $ref: '#/components/schemas/PaymentRecipient'
        processing:
          type: object
          description: Use the processing object to influence or override the data sent during card processing.
          properties:
            aft:
              type: boolean
              description: Indicates whether the payment is an [Account Funding Transaction](https://www.checkout.com/docs/four/payments/manage-payments/account-funding-transactions).
        allow_payment_methods:
          type: array
          description: >
            Use to specify which <a href="https://www.checkout.com/docs/four/payments/payment-methods" target="_blank">payment methods</a> should render on the page. <a href="https://checkout.com/docs/four/integrate/hosted-payments-page/manage-your-hosted-payments-page#Alternative_payment_methods" target="_blank">Check the requirements for each payment method</a>
          enum:
            - card
            - sofort
            - ideal
            - knet
            - bancontact
            - p24
            - multibanco
          example:
            - card
        products:
          type: array
          description: Details about the products in the order
          minItems: 1
          maxItems: 1000
          items:
            type: object
            additionalProperties: false
            required:
              - name
              - quantity
              - price
            properties:
              name:
                type: string
                description: Descriptive item name
                example: Gold Necklace
              quantity:
                type: integer
                description: The item quantity. Non-negative
                minimum: 1
                example: 1
              price:
                type: integer
                description: 'Minor units. Includes tax, excludes discounts. The exact format <a href="https://www.checkout.com/docs/four/resources/calculating-the-amount" target="_blank">depends on the currency</a>'
                minimum: 0
                example: 1000
        risk:
          $ref: '#/components/schemas/RiskRequest'
        success_url:
          type: string
          format: uri
          description: For redirect payment methods, this overrides the default success redirect URL configured on your account
          example: https://example.com/payments/success
          maxLength: 255
        cancel_url:
          type: string
          format: uri
          description: The URL to which the customer should be directed if they cancel the payment
          example: https://example.com/payments/cancel
          maxLength: 255
        failure_url:
          type: string
          format: uri
          description: For redirect payment methods, this overrides the default failure redirect URL configured on your account
          example: https://example.com/payments/failure
          maxLength: 255
        metadata:
          type: object
          title: The Metadata Schema
          description: Allows you to store additional information about the transaction. This object only allows one level of depth, so cannot accept non-primitive data types such as objects or arrays.
          additionalProperties: true
        locale:
          type: string
          description: Creates a translated version of the page in the specified language
          enum:
            - de-DE
            - en-GB
            - fr-FR
            - it-IT
            - nl-NL
            - es-ES
            - zh-HK
            - zh-TW
            - zh-CN
            - ja-JP
            - fil-PH
            - id-ID
            - ms-MY
            - th-TH
            - vi-VN
            - hi-IN
          default: en-GB
        3ds:
          type: object
          description: Information required for 3D Secure payments
          properties:
            enabled:
              type: boolean
              description: Whether to process this payment as a 3D Secure payment
              default: false
              example: false
            attempt_n3d:
              type: boolean
              description: Determines whether to attempt a 3D Secure payment as non-3D Secure should the card issuer not be enrolled
              default: false
              example: false
        capture:
          type: boolean
          description: Whether to capture the payment (if applicable).
          example: true
        capture_on:
          description: |
            A timestamp (ISO 8601 code) that determines when the payment should be captured.
            Providing this field will automatically set `capture` to true.
          allOf:
            - $ref: '#/components/schemas/Timestamp'
    HostedPaymentsResponse:
      type: object
      required:
        - id
        - _links
      properties:
        id:
          example: 'hpp_xGQBg0AXl3cM'
          allOf:
            - $ref: '#/components/schemas/HostedPaymentId'
        reference:
          type: string
          description: A reference you can later use to identify this payment, such as an order number.
          example: ORD-5023-4E89
        warnings:
          type: array
          description: Related to the `allow_payment_methods` object in the request. Included in the response if an alternative payment method is passed through, but no card schemes are configured against the account.
        _links:
          type: object
          description: The links related to the hosted payment.
          readOnly: true
          minItems: 1
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: 'https://api.sandbox.checkout.com/hosted-payments/hpp_xGQBg0AXl3cM'
            redirect:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: 'https://pay.sandbox.checkout.com/page/hpp_xGQBg0AXl3cM'
      example:
        id: 'hpp_xGQBg0AXl3cM'
        reference: 'ORD-123A'
        _links:
          self:
            href: 'https://api.sandbox.checkout.com/hosted-payments/hpp_xGQBg0AXl3cM'
          redirect:
            href: 'https://pay.sandbox.checkout.com/page/hpp_xGQBg0AXl3cM'
    AccountHolder:
      type: object
      description: The account holder details
      properties:
        type:
          description: The type of account holder
          type: string
          enum:
            - individual
            - corporate
            - government
          example: individual
      
        first_name:
          description: |
            The first name of the account holder
          type: string
          example: 'John'
      
        last_name:
          description: |
            The last name of the account holder
          type: string
          example: 'Smith'
      
        company_name:
          description: |
            The legal name of a registered company that holds the account
          type: string
          example: Test company
      
        tax_id:
          description: The account holder's tax number/reference
          type: string
          example: '123456'
      
        date_of_birth:
          description: The account holder's date of birth in `YYYY-MM-DD` format
          type: string
          format: date
          example: '1986-01-01'
      
        country_of_birth:
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of the account holder's country of birth
          type: string
          example: GB
      
        residential_status:
          description: The account holder's residential status
          type: string
          enum:
            - resident
            - non_resident
          example: resident
      
        billing_address:
          description: The billing address of the account holder
          allOf:
            - $ref: '#/components/schemas/Address'
      
        phone:
          description: The phone number of the account holder
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
      
        identification:
          $ref: '#/components/schemas/AccountHolderIdentification'
      
        email:
          description: The account holder's email address
          type: string
          format: email
          example: test.user@checkout.com
    AccountHolderIdentification:
      type: object
      description: Bank account holder's proof of identification
      properties:
        type:
          description: The type of identification used to identify the account holder
          type: string
          enum:
            - passport
            - driving_licence
            - national_id
            - company_registration
            - tax_id
          example: passport
        number:
          description: The identification number
          type: string
          example: 09876
        issuing_country:
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of the country that issued the identification
          type: string
          example: US
    BankDetails:
      type: object
      description: Details of the bank
      properties:
        name:
          description: The bank's name
          type: string
          example: Lloyds TSB
      
        branch:
          description: The bank branch's name
          type: string
          example: Bournemouth
      
        address:
          allOf:
            - $ref: '#/components/schemas/Address'
          description: The bank's contact address
    RetrieveInstrumentCustomerResponse:
      type: object
      description: Stored customer details
      required:
        - id
      properties:
        id:
          type: string
          pattern: "^(cus)_(\\w{26})$"
          description: The customer's unique identifier. This can be passed as a source when making a payment.
          example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
        email:
          type: string
          description: The customer's email address
          example: 'brucewayne@gmail.com'
        name:
          type: string
          description: The customer's name
          example: 'Bruce Wayne'
        default:
          description: This will be true if this instrument is set as the default for the customer
          type: boolean
          example: true
    StoreAccountHolderTokenRequest:
      type: object
      description: The account holder details
      properties:
        first_name:
          description: |
            The first name of the account holder
          type: string
          example: 'John'
      
        last_name:
          description: |
            The last name of the account holder
          type: string
          example: 'Smith'
      
        billing_address:
          description: The billing address of the account holder
          allOf:
            - $ref: '#/components/schemas/Address'
      
        phone:
          description: The phone number of the account holder
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
    UpdateCardAccountHolder:
      type: object
      description: The account holder details
      properties:
        first_name:
          description: |
            The first name of the account holder
          type: string
          example: 'John'
      
        last_name:
          description: |
            The last name of the account holder
          type: string
          example: 'Smith'
      
        billing_address:
          description: The billing address of the account holder
          allOf:
            - $ref: '#/components/schemas/Address'
      
        phone:
          description: The phone number of the account holder
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
    RetrieveBankAccountInstrumentResponse:
      type: object
      description: Bank account details
      required:
        - type
        - id
        - fingerprint
        - country
        - currency
      properties:
        type:
          description: The type of instrument
          type: string
        id:
          description: The unique identifier of the payment source or destination that can be used later for payments
          type: string
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
      
        fingerprint:
          type: string
          description: A token that can uniquely identify this instrument across all customers
          pattern: ^([a-z0-9]{26})$
          example: vnsdrvikkvre3dtrjjvlm5du4q
      
        account_type:
          description: The type of account
          type: string
          enum:
            - savings
            - current
            - cash
          example: savings
      
        account_number:
          description: Number (which can contain letters) that identifies the account
          type: string
          example: '13654567455'
      
        bank_code:
          description: Code that identifies the bank
          type: string
          example: 123-456
      
        branch_code:
          description: Code that identifies the bank branch
          type: string
          example: '6443'
      
        iban:
          description: Internationally agreed standard for identifying bank account
          type: string
          example: HU93116000060000000012345676
      
        bban:
          description: The combination of bank code and/or branch code and account number
          type: string
          example: 3704 0044 0532 0130 00
      
        swift_bic:
          description: 8 or 11 character code which identifies the bank or bank branch
          type: string
          example: '37040044'
      
        currency:
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the account's currency
          type: string
          example: GBP
      
        country:
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of where the account is based
          type: string
          example: GB
      
        account_holder:
          $ref: '#/components/schemas/AccountHolder'
      
        bank:
          $ref: '#/components/schemas/BankDetails'
      
        customer:
          $ref: '#/components/schemas/RetrieveInstrumentCustomerResponse'
    RetrieveCardInstrumentResponse:
      type: object
      description: card instrument response
      allOf:
        - $ref: '#/components/schemas/RetrieveInstrumentResponse'
      required:
        - fingerprint
        - expiry_month
        - expiry_year
        - last4
        - bin
      properties:
        type:
          description: The underlying instrument type (for instruments created from Checkout.com tokens, this will reflect the type of instrument that was tokenized).
          type: string
          example: 'card'
        id:
          description: The unique identifier of the payment source or destination that can be used later for payments
          type: string
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
        fingerprint:
          type: string
          description: A token that can uniquely identify this instrument across all customers
          pattern: ^([a-z0-9]{26})$
          example: vnsdrvikkvre3dtrjjvlm5du4q
        expiry_month:
          type: integer
          description: The expiry month
          minimum: 1
          example: 6
          maxLength: 2
        expiry_year:
          type: integer
          description: The expiry year
          example: 2025
          minLength: 4
          maxLength: 4
        name:
          type: string
          description: The name of the cardholder
          example: 'John Test'
        scheme:
          type: string
          description: The card scheme
          example: 'VISA'
        last4:
          type: string
          description: The last four digits of the card number
          example: '9996'
          minLength: 4
          maxLength: 4
        bin:
          type: string
          description: The card issuer's bank identification number (BIN)
          example: '454347'
        card_type:
          type: string
          description: The card type
          enum:
            - Credit
            - Debit
            - Prepaid
            - Charge
          example: Credit
        card_category:
          type: string
          description: The card category
          enum:
            - Consumer
            - Commercial
          example: Consumer
        issuer:
          type: string
          description: The name of the card issuer
          example: 'GOTHAM STATE BANK'
        issuer_country:
          type: string
          maxLength: 2
          minLength: 2
          description: The card issuer's country (<a href="https://docs.checkout.com/resources/codes/country-codes" target="blank">two-letter ISO code</a>)
          example: 'US'
        product_id:
          type: string
          description: The issuer/card scheme product identifier
          example: 'F'
        product_type:
          type: string
          description: The issuer/card scheme product type
          example: CLASSIC
        customer:
          $ref: '#/components/schemas/RetrieveInstrumentCustomerResponse'
        account_holder:
          type: object
          description: The account holder details
          properties:
            first_name:
              description: The first name of the account holder
              type: string
              example: 'John'
            last_name:
              description: The last name of the account holder
              type: string
              example: 'Smith'
            billing_address:
              description: The billing address of the account holder
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number of the account holder
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    RetrieveInstrumentResponse:
      type: object
      description: The response for type of instrument stored
      required:
        - type
        - id
      discriminator:
        propertyName: type
        mapping:
          bank_account: '#/components/schemas/RetrieveBankAccountInstrumentResponse'
          card: '#/components/schemas/RetrieveCardInstrumentResponse'
      properties:
        type:
          description: The underlying instrument type
          type: string
        id:
          description: The unique identifier of the payment source or destination that can be used later for payments
          type: string
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
    StoreBankAccountInstrumentRequest:
      type: object
      description: Store bank account details
      allOf:
        - $ref: '#/components/schemas/StoreInstrumentRequest'
        - type: object
      required:
        - currency
        - country
      properties:
        type:
          description: The type of instrument
          type: string
      
        account_type:
          description: The type of account
          type: string
          enum:
            - savings
            - current
            - cash
          example: savings
      
        account_number:
          description: Number (which can contain letters) that identifies the account
          type: string
          example: '13654567455'
      
        bank_code:
          description: Code that identifies the bank
          type: string
          example: 123-456
      
        branch_code:
          description: Code that identifies the bank branch
          type: string
          example: '6443'
      
        iban:
          description: Internationally agreed standard for identifying bank account
          type: string
          example: HU93116000060000000012345676
      
        bban:
          description: The combination of bank code and/or branch code and account number
          type: string
          example: 3704 0044 0532 0130 00
      
        swift_bic:
          description: 8 or 11 character code which identifies the bank or bank branch
          type: string
          example: '37040044'
      
        currency:
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the account's currency
          type: string
          example: GBP
      
        country:
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of where the account is based
          type: string
          example: GB
      
        processing_channel_id:
          description: The ID of the primary processing channel this instrument is intended to be used for
          type: string
          example: pc_u2l6xz5joigedmk7g5vxzt7rqy
      
        account_holder:
          $ref: '#/components/schemas/AccountHolder'
      
        bank:
          $ref: '#/components/schemas/BankDetails'
      
        # intermediary_bank:
        #   $ref: "#/components/schemas/bank_account_intermediary_bank"
        #   description: Details of the intermediary bank
      
        customer:
          $ref: '#/components/schemas/StoreCustomerInstrumentRequest'
    StoreBankAccountInstrumentResponse:
      type: object
      description: Store bank account instrument response
      allOf:
        - $ref: '#/components/schemas/StoreInstrumentResponse'
      required:
        - fingerprint
      properties:
        type:
          description: The underlying instrument type (for instruments created from Checkout.com tokens, this will reflect the type of instrument that was tokenized).
          type: string
          example: 'card'
        id:
          description: The unique identifier of the payment source or destination that can be used later for payments
          type: string
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
        fingerprint:
          type: string
          description: A token that can uniquely identify this instrument across all customers
          pattern: ^([a-z0-9]{26})$
          example: vnsdrvikkvre3dtrjjvlm5du4q
        customer:
          $ref: '#/components/schemas/CustomerResponse'
        bank:
          $ref: '#/components/schemas/BankDetails'
        swift_bic:
          description: 8 or 11 character code which identifies the bank or bank branch
          type: string
          example: '37040044'
        account_number:
          description: Number (which can contain letters) that identifies the account
          type: string
          example: '13654567455'
        bank_code:
          description: Code that identifies the bank
          type: string
          example: 123-456
        iban:
          description: Internationally agreed standard for identifying bank account
          type: string
          example: HU93116000060000000012345676
    StoreCustomerInstrumentRequest:
      type: object
      description: The customer's details
      properties:
        id:
          type: string
          pattern: "^(cus)_(\\w{26})$"
          description: The identifier of an existing customer
          example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
        email:
          type: string
          format: email
          description: An optional email address to associate with the customer
          maxLength: 255
          example: 'brucewayne@gmail.com'
        name:
          type: string
          description: The customer's name. This will only set the name for *new* customers.
          maxLength: 255
          example: 'Bruce Wayne'
        phone:
          description: The customer's phone number. This will only set the phone number for *new* customers.
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
        default:
          type: boolean
          description: If true, this instrument will become the default for the customer. If a *new* customer is created as a result of this request, the instrument will automatically be the default.
          example: true
    StoreInstrumentRequest:
      type: object
      description: The type of instrument to be stored
      discriminator:
        propertyName: type
        mapping:
          bank_account: '#/components/schemas/StoreBankAccountInstrumentRequest'
          token: '#/components/schemas/StoreTokenInstrumentRequest'
      required:
        - type
      properties:
        type:
          description: The type of instrument
          type: string
    StoreInstrumentResponse:
      type: object
      description: The response for type of instrument stored
      required:
        - type
        - id
      discriminator:
        propertyName: type
        mapping:
          bank_account: '#/components/schemas/StoreBankAccountInstrumentResponse'
          card: '#/components/schemas/StoreTokenInstrumentResponse'
      properties:
        type:
          description: The type of instrument
          type: string
        id:
          description: The unique identifier of the payment source or destination that can be used later for payments
          type: string
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
    StoreTokenInstrumentRequest:
      type: object
      description: Store token details
      allOf:
        - $ref: '#/components/schemas/StoreInstrumentRequest'
        - type: object
      required:
        - token
      properties:
        type:
          description: The type of instrument
          type: string
      
        token:
          type: string
          description: The Checkout.com token
          pattern: ^(tok)_(\w{26})$ | ^(card_tok)_(\w{12})$
          example: tok_asoto22g2fsu7prwomy12sgfsa
      
        account_holder:
          $ref: '#/components/schemas/StoreAccountHolderTokenRequest'
      
        customer:
          $ref: '#/components/schemas/StoreCustomerInstrumentRequest'
    StoreTokenInstrumentResponse:
      type: object
      description: card instrument response
      allOf:
        - $ref: '#/components/schemas/StoreInstrumentResponse'
      required:
        - fingerprint
        - expiry_month
        - expiry_year
        - last4
        - bin
      properties:
        type:
          description: The underlying instrument type (for instruments created from Checkout.com tokens, this will reflect the type of instrument that was tokenized).
          type: string
          example: 'card'
        id:
          description: The unique identifier of the payment source or destination that can be used later for payments
          type: string
          example: 'src_wmlfc3zyhqzehihu7giusaaawu'
        fingerprint:
          type: string
          description: A token that can uniquely identify this instrument across all customers
          pattern: ^([a-z0-9]{26})$
          example: vnsdrvikkvre3dtrjjvlm5du4q
        expiry_month:
          type: integer
          description: The expiry month
          minimum: 1
          example: 6
          maxLength: 2
        expiry_year:
          type: integer
          description: The expiry year
          example: 2025
          minLength: 4
          maxLength: 4
        scheme:
          type: string
          description: The card scheme
          example: 'VISA'
        last4:
          type: string
          description: The last four digits of the card number
          example: '9996'
          minLength: 4
          maxLength: 4
        bin:
          type: string
          description: The card issuer's bank identification number (BIN)
          example: '454347'
        card_type:
          type: string
          description: The card type
          enum:
            - Credit
            - Debit
            - Prepaid
            - Charge
          example: Credit
        card_category:
          type: string
          description: The card category
          enum:
            - Consumer
            - Commercial
          example: Consumer
        issuer:
          type: string
          description: The name of the card issuer
          example: 'GOTHAM STATE BANK'
        issuer_country:
          type: string
          maxLength: 2
          minLength: 2
          description: The card issuer's country (<a href="https://docs.checkout.com/resources/codes/country-codes" target="blank">two-letter ISO code</a>)
          example: 'US'
        product_id:
          type: string
          description: The issuer/card scheme product identifier
          example: 'F'
        product_type:
          type: string
          description: The issuer/card scheme product type
          example: CLASSIC
        customer:
          $ref: '#/components/schemas/CustomerResponse'
    UpdateBankInstrumentRequest:
      type: object
      description: Update bank account details
      allOf:
        - $ref: '#/components/schemas/UpdateInstrumentRequest'
        - type: object
      properties:
        type:
          description: This field is used for illustration purposes and does not need to be provided in the request.
          type: string
          enum: ['card', 'bank_account']
      
        account_type:
          description: The type of account
          type: string
          enum:
            - savings
            - current
            - cash
          example: savings
      
        account_number:
          description: Number (which can contain letters) that identifies the account
          type: string
          example: '13654567455'
      
        bank_code:
          description: Code that identifies the bank
          type: string
          example: 123-456
      
        branch_code:
          description: Code that identifies the bank branch
          type: string
          example: '6443'
      
        iban:
          description: Internationally agreed standard for identifying bank account
          type: string
          example: HU93116000060000000012345676
      
        bban:
          description: The combination of bank code and/or branch code and account number
          type: string
          example: 3704 0044 0532 0130 00
      
        swift_bic:
          description: 8 or 11 character code which identifies the bank or bank branch
          type: string
          example: '37040044'
      
        currency:
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the account's currency
          type: string
          example: GBP
      
        country:
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of where the account is based
          type: string
          example: GB
      
        processing_channel_id:
          description: The ID of the primary processing channel this instrument is intended to be used for
          type: string
          example: pc_u2l6xz5joigedmk7g5vxzt7rqy
      
        account_holder:
          $ref: '#/components/schemas/AccountHolder'
      
        bank:
          $ref: '#/components/schemas/BankDetails'
      
        customer:
          $ref: '#/components/schemas/UpdateCustomerRequest'
    UpdateBankInstrumentResponse:
      type: object
      description: The response for type of instrument stored
      required:
        - type
        - fingerprint
      discriminator:
        propertyName: type
        mapping:
          bank_account: '#/components/schemas/UpdateBankInstrumentResponse'
      properties:
        type:
          description: The type of instrument
          type: string
        fingerprint:
          description: A token that can uniquely identify this instrument across all customers
          pattern: '^([a-z0-9]{26})$'
          type: string
          example: 'smoua2sbuqhupeofwbe77n5nsm'
    UpdateCardInstrumentRequest:
      type: object
      description: Update bank account details
      allOf:
        - $ref: '#/components/schemas/UpdateInstrumentRequest'
        - type: object
      properties:
        type:
          description: This field is used for illustration purposes and does not need to be provided in the request.
          type: string
          enum: ['card', 'bank_account']
      
        expiry_month:
          type: integer
          description: The expiry month of the card
          minimum: 1
          example: 6
          minLength: 1
          maxLength: 2
      
        expiry_year:
          type: integer
          description: The expiry year of the card
          example: 2025
          minLength: 4
          maxLength: 4
      
        name:
          description: |
            Name of the cardholder
          type: string
          example: 'Mr. J Smith'
      
        account_holder:
          $ref: '#/components/schemas/UpdateCardAccountHolder'
      
        customer:
          $ref: '#/components/schemas/UpdateCustomerRequest'
    UpdateCardInstrumentResponse:
      type: object
      description: The response for type of instrument stored
      required:
        - type
        - fingerprint
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/UpdateCardInstrumentResponse'
      properties:
        type:
          description: The type of instrument
          type: string
        fingerprint:
          description: A token that can uniquely identify this instrument across all customers
          pattern: '^([a-z0-9]{26})$'
          type: string
          example: 'smoua2sbuqhupeofwbe77n5nsm'
    UpdateInstrumentRequest:
      type: object
      description: The type of instrument to be updated
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/UpdateCardInstrumentRequest'
          bank_account: '#/components/schemas/UpdateBankInstrumentRequest'
    UpdateInstrumentResponse:
      type: object
      description: The response for type of instrument stored
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/UpdateCardInstrumentResponse'
          bank_account: '#/components/schemas/UpdateBankInstrumentResponse'
    InvalidError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            details:
              type: array
              items:
                type: string
    IPAddress:
      type: string
      format: ipv4
      maxLength: 45
      example: '90.197.169.245'
    Link:
      type: object
      properties:
        href:
          description: The link URL
          type: string
      required:
        - href
    SelfLink:
      type: object
      allOf:
        - $ref: '#/components/schemas/Link'
      properties:
        rel:
          description: The link type
          type: string
          enum:
            - self
      required:
        - rel
    DateOfBirth:
      type: object
      title: Date of birth
      description: The date of birth of the person according to the Gregorian calendar.
      properties:
        day:
          type: number
          description: The calendar day of the month they were born.
          minimum: 1
          maximum: 31
          example: 16
        month:
          type: number
          description: The month of the year they were born.
          minimum: 1
          maximum: 12
          example: 03
        year:
          type: number
          description: The year they were born.
          minimum: 1900
          example: 1985
      required:
        - day
        - month
        - year
    EntityAddress:
      type: object
      title: Address
      properties:
        address_line1:
          type: string
          description: 'The first line of the address. Note that the length of line 1 and line 2 combined must be at least 5 characters long.'
          minLength: 1
          maxLength: 300
          example: '90 Tottenham Court Road'
        address_line2:
          type: string
          description: 'The second line of the address.'
          minLength: 0
          maxLength: 300
          example: null
        city:
          type: string
          description: 'The address city.'
          minLength: 2
          maxLength: 300
          example: 'London'
        state:
          type: string
          description: 'The address state. (In the US, this is required and needs to be an ISO 3166-1 state code.)'
          minLength: 0
          maxLength: 300
          example: null
        zip:
          type: string
          pattern: ^\d{5}(?:[-\s]\d{4})?$
          description: 'The address zip/postal code.'
          minLength: 1
          maxLength: 16
          example: 'W1T4TJ'
        country:
          type: string
          description: The two-letter <a href="https://www.checkout.com/docs/four/resources/codes/country-codes" target="blank">ISO country code</a> of the address.
          minLength: 2
          maxLength: 2
          pattern: '[a-zA-Z]{2}'
          format: ISO 3166-1
          example: 'GB'
    EntityBasicResponse:
      type: object
      title: Basic response
      readOnly: true
      properties:
        id:
          type: string
          description: The unique identifier of the sub-entity.
          example: ent_wxglze3wwywujg4nna5fb7ldli
        reference:
          type: string
          description: A unique reference you can later use to identify this sub-entity.
          minLength: 1
          maxLength: 15
          example: superhero1234
        capabilities:
          $ref: '#/components/schemas/EntityCapabilities'
        status:
          type: string
          title: Status
          description: The state of your sub-entity, which indicates what stage of onboarding its at and whether it's able to use its available capabilities
          example: requirements_due
          enum:
            - active
            - pending
            - restricted
            - requirements_due
            - inactive
            - rejected
        requirements_due:
          type: array
          title: Requirements Due
          description: The requirements due for this sub-entity before we will perform due diligence checks
          items:
            $ref: '#/components/schemas/EntityRequirement'
    EntityBasicResponseWithLinks:
      type: object
      title: Basic response with links
      allOf:
        - $ref: '#/components/schemas/EntityBasicResponse'
        - $ref: '#/components/schemas/EntityLinks'
    EntityCapabilities:
      type: object
      title: Capabilities
      properties:
        payments:
          type: object
          description: 'Payment related capabilities of a sub-entity.'
          properties:
            enabled:
              type: boolean
              description: True if payments are enabled.
          example:
            enabled: false
        payouts:
          type: object
          description: 'Payout related capabilities of a sub-entity.'
          properties:
            enabled:
              type: boolean
              description: 'True if payouts are enabled.'
          example:
            enabled: false
    EntityCompany:
      type: object
      title: Company
      description: 'Information about the company represented by the sub-entity. Include this object if you are onboarding a company or business. This is required if the individual object is omitted.'
      properties:
        business_registration_number:
          type: string
          description: 'The Business Registration Number of the sub-entity, such as Commercial Registration, Ministry of Commerce certificate number or equivalent registration number.'
          minLength: 2
          maxLength: 20
          example: '452349600005'
        legal_name:
          type: string
          description: 'The legal name of the sub-entity.'
          minLength: 2
          maxLength: 300
          example: Super Hero Masks Inc.
        trading_name:
          type: string
          description: "The trading name of the sub-entity, also referred to as 'doing business as'."
          minLength: 2
          maxLength: 300
          example: Super Hero Masks
        principal_address:
          description: 'The primary location of the company where business is performed.'
          allOf:
            - $ref: '#/components/schemas/EntityAddress'
        registered_address:
          description: 'The registered address of the company.'
          allOf:
            - $ref: '#/components/schemas/EntityAddress'
        representatives:
          type: array
          title: Representatives
          description: 'Information about representatives of this company.'
          minItems: 1
          maxItems: 5
          items:
            $ref: '#/components/schemas/EntityRepresentative'
    EntityContactDetails:
      type: object
      title: Contact details
      description: 'Contact details of this sub-entity.'
      properties:
        phone:
          $ref: '#/components/schemas/EntityPhone'
    EntityCreateRequest:
      type: object
      title: CreateRequest
      properties:
        reference:
          type: string
          description: A unique reference you can later use to identify this sub-entity.
          minLength: 1
          maxLength: 15
          example: superhero1234
        contact_details:
          title: Contact details
          allOf:
            - $ref: '#/components/schemas/EntityContactDetails'
            - type: object
              properties:
                phone:
                  description: 'The phone number of the sub-entity.'
                  allOf:
                    - $ref: '#/components/schemas/EntityPhone'
                  required:
                    - number
              required:
                - phone
        profile:
          title: Profile
          allOf:
            - $ref: '#/components/schemas/EntityProfile'
          required:
            - urls
            - mccs
        company:
          type: object
          title: Company
          description: 'Information about the company represented by the sub-entity. Include this object if you are onboarding a company or business. This is required if the individual object is omitted.'
          required:
            - legal_name
            - trading_name
            - principal_address
          properties:
            business_registration_number:
              type: string
              description: 'The Business Registration Number of the sub-entity, such as Commercial Registration, Ministry of Commerce certificate number or equivalent registration number.'
              minLength: 2
              maxLength: 20
              example: '452349600005'
            legal_name:
              type: string
              description: 'The legal name of the sub-entity.'
              minLength: 2
              maxLength: 300
              example: Super Hero Masks Inc.
            trading_name:
              type: string
              description: "The trading name of the sub-entity, also referred to as 'doing business as'."
              minLength: 2
              maxLength: 300
              example: Super Hero Masks
            principal_address:
              title: Address
              description: 'The primary location of the company where business is performed.'
              allOf:
                - $ref: '#/components/schemas/EntityAddress'
              required:
                - address_line1
                - city
                - zip
                - country
            registered_address:
              title: Address
              description: 'The registered address of the company.'
              allOf:
                - $ref: '#/components/schemas/EntityAddress'
              required:
                - address_line1
                - city
                - zip
                - country
            representatives:
              type: array
              title: Representatives
              description: 'Information about representatives of this company.'
              minItems: 1
              maxItems: 5
              items:
                allOf:
                  - $ref: '#/components/schemas/EntityRepresentative'
                  - type: object
                    required:
                      - first_name
                      - last_name
                    properties:
                      address:
                        required:
                          - country
        individual:
          type: object
          title: Individual
          description: 'Information about the individual represented by the sub-entity. Include this object if you are onboarding a sole proprietor. This is required if the company object is omitted.'
          required:
            - first_name
            - last_name
            - trading_name
            - registered_address
          properties:
            first_name:
              type: string
              description: "The person's first name."
              minLength: 2
              maxLength: 50
              example: 'John'
            middle_name:
              type: string
              description: "The person's middle name."
              maxLength: 50
              example: 'Paul'
            last_name:
              type: string
              description: "The person's last name."
              minLength: 2
              maxLength: 50
              example: 'Doe'
            trading_name:
              type: string
              description: "If applicable, the person's trading name."
              minLength: 2
              maxLength: 300
              example: Super Hero Masks
            national_tax_id:
              type: string
              description: "The sub-entity's tax identification code. For example, a value added tax (VAT) number in the UK."
              minLength: 2
              maxLength: 16
              example: '1234567'
            registered_address:
              title: Address
              description: 'The registered address of the person.'
              allOf:
                - $ref: '#/components/schemas/EntityAddress'
              required:
                - address_line1
                - city
                - zip
                - country
            date_of_birth:
              $ref: '#/components/schemas/DateOfBirth'
            identification:
              $ref: '#/components/schemas/EntityIdentification'
      required:
        - reference
        - contact_details
        - profile
    EntityExtendedResponse:
      type: object
      title: ExtendedResponse
      allOf:
        - $ref: '#/components/schemas/EntityBasicResponse'
        - type: object
          properties:
            contact_details:
              $ref: '#/components/schemas/EntityContactDetails'
            profile:
              $ref: '#/components/schemas/EntityProfile'
            company:
              $ref: '#/components/schemas/EntityCompany'
            individual:
              $ref: '#/components/schemas/EntityIndividual'
            instruments:
              type: array
              description: A collection of payment instruments added for this sub-entity.
              items:
                $ref: '#/components/schemas/MarketplaceInstrumentReference'
        - $ref: '#/components/schemas/EntityLinks'
    EntityIdentification:
      type: object
      title: Identification
      description: Identification details of an individual, used for verification.
      properties:
        national_id_number:
          type: string
          description: "The official ID number, as applicable in the representative's country. (For US, this must be numeric; otherwise, alpha-numeric.)"
          minLength: 1
          maxLength: 25
          example: AB123456C
        document:
          type: object
          description: 'A legal document used to verify identity.'
          properties:
            type:
              type: string
              description: The type of document.
              enum:
                - passport
                - national_identity_card
                - driving_license
                - citizen_card
                - residence_permit
                - electoral_id
              example: passport
            front:
              type: string
              description: The ID of the front side of the document as represented within Checkout.com systems.
              example: file_wxglze3wwywujg4nna5fb7ldli
            back:
              type: string
              description: The ID of the back side of the document as represented within Checkout.com systems. The back of the document is required for all document types apart from passports.
              example: file_adglze3wwywujg4nna5fb7l1sg
          required:
            - type
            - front
    EntityIndividual:
      type: object
      title: Individual
      description: 'Information about the individual represented by the sub-entity. Include this object if you are onboarding a sole proprietor. This is required if the company object is omitted.'
      properties:
        first_name:
          type: string
          description: "The person's first name."
          minLength: 2
          maxLength: 50
          example: 'John'
        middle_name:
          type: string
          description: "The person's middle name."
          maxLength: 50
          example: 'Paul'
        last_name:
          type: string
          description: "The person's last name."
          minLength: 2
          maxLength: 50
          example: 'Doe'
        legal_name:
          type: string
          description: 'The legal name of the person.'
          example: John Paul Doe
          readOnly: true
        trading_name:
          type: string
          description: "If applicable, the person's trading name."
          minLength: 2
          maxLength: 300
          example: Super Hero Masks
        national_tax_id:
          type: string
          description: "The sub-entity's Tax Identification Code. For example, a Value Added Tax (VAT) number in the UK."
          minLength: 2
          maxLength: 16
          example: '1234567'
        registered_address:
          title: Address
          description: 'The registered address of the person.'
          allOf:
            - $ref: '#/components/schemas/EntityAddress'
        date_of_birth:
          $ref: '#/components/schemas/DateOfBirth'
        identification:
          $ref: '#/components/schemas/EntityIdentification'
    EntityLinks:
      type: object
      title: Links
      properties:
        _links:
          additionalProperties:
            $ref: '#/components/schemas/Link'
          example:
            self:
              href: 'https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli'
    EntityPhone:
      type: object
      title: Phone
      properties:
        number:
          type: string
          description: "The phone number. This must only contain numeric characters and can't contain only zeros. (For US numbers: It cannot start with 0 or 1 and must be at least 10 characters in length.)"
          minLength: 8
          maxLength: 16
          example: '2345678910'
    EntityProfile:
      type: object
      title: Profile
      description: 'Information about the profile of the sub-entity, primarily regarding the products/services offered.'
      properties:
        urls:
          type: array
          description: 'A collection of website URLs the sub-entity accepts payments on. The array of items, when joined together with a space, should be no longer than 4,000 characters.'
          minItems: 1
          maxItems: 100
          items:
            type: string
            description: 'A URL of a website the sub-entity accepts payments on. Max length does not include the https or http protocol.'
            minLength: 4
            maxLength: 256
            example: 'https://www.superheroexample.com'
        mccs:
          type: array
          description: "A collection of 4-digit ISO 18245 merchant category codes classifying the sub-entity's industry."
          minItems: 1
          maxItems: 5
          items:
            type: string
            description: "A 4-digit ISO 18245 merchant category code classifying the sub-entity's industry."
            minLength: 4
            maxLength: 4
            example: '5669'
        default_holding_currency:
          type: string
          description: |
            The ISO 4217 currency code this sub-entity wants to hold funds in. Payments processed on behalf of this sub-entity will be routed to and held in this currency. <strong>This only applies if you have the Full account type.</strong><br><br>For example, the currency code 'AUD' represents the Australian Dollar in Australia. For more information, check out our <a href="https://docs.checkout.com/resources/codes/currency-codes" target="_blank">documentation on currency codes</a>.
          format: ISO 4217
          minLength: 3
          maxLength: 3
          example: 'GBP'
    EntityRepresentative:
      type: object
      title: Representative
      properties:
        id:
          type: string
          description: "The id of the company's sub-entity representative."
          example: 'rep_a6omkepkkfiutynatam37wrfc4'
          readOnly: true
        first_name:
          type: string
          description: "The person's first name."
          minLength: 2
          maxLength: 300
          example: 'John'
        middle_name:
          type: string
          description: "The person's middle name."
          maxLength: 300
          example: null
        last_name:
          type: string
          description: "The person's last name."
          minLength: 2
          maxLength: 300
          example: 'Doe'
        address:
          title: Address
          description: "The person's address."
          allOf:
            - $ref: '#/components/schemas/EntityAddress'
            - type: object
              properties:
                address_line1:
                  type: string
                  description: 'The first line of the address. If provided, the length of line 1 and line 2 combined must be at least 5 characters long.'
                  minLength: 0
                  maxLength: 300
                  example: '90 Tottenham Court Road'
        identification:
          $ref: '#/components/schemas/EntityIdentification'
        phone:
          description: 'The phone number of the person.'
          allOf:
            - $ref: '#/components/schemas/EntityPhone'
        date_of_birth:
          $ref: '#/components/schemas/DateOfBirth'
    EntityRepresentativeForUpdate:
      type: object
      title: RepresentativeForUpdate
      allOf:
        - type: object
          properties:
            id:
              readOnly: false
        - $ref: '#/components/schemas/EntityRepresentative'
    EntityRequirement:
      type: object
      title: Requirement
      readOnly: true
      properties:
        field:
          type: string
          description: The path to the field with a requirement due
          example: individual.identification.document
        reason:
          type: string
          description: The reason the field is required
          example: required
    EntityUpdateRequest:
      type: object
      title: UpdateRequest
      properties:
        contact_details:
          title: Contact details
          allOf:
            - $ref: '#/components/schemas/EntityContactDetails'
            - type: object
              properties:
                phone:
                  description: 'The phone number of the sub-entity.'
                  allOf:
                    - $ref: '#/components/schemas/EntityPhone'
                  required:
                    - number
              required:
                - phone
        profile:
          title: Profile
          allOf:
            - $ref: '#/components/schemas/EntityProfile'
          required:
            - urls
            - mccs
        company:
          type: object
          title: Company
          description: 'Information about the company represented by the sub-entity. Include this object if you are onboarding a company or business. This is required if the individual object is omitted.'
          required:
            - legal_name
            - trading_name
            - principal_address
          properties:
            business_registration_number:
              type: string
              description: 'The Business Registration Number of the sub-entity, such as Commercial Registration, Ministry of Commerce certificate number or equivalent registration number.'
              minLength: 2
              maxLength: 20
              example: '452349600005'
            legal_name:
              type: string
              description: 'The legal name of the sub-entity.'
              minLength: 2
              maxLength: 300
              example: Super Hero Masks Inc.
            trading_name:
              type: string
              description: "The trading name of the sub-entity, also referred to as 'doing business as'."
              minLength: 2
              maxLength: 300
              example: Super Hero Masks
            principal_address:
              title: Address
              description: 'The primary location of the company where business is performed.'
              allOf:
                - $ref: '#/components/schemas/EntityAddress'
              required:
                - address_line1
                - city
                - zip
                - country
            registered_address:
              title: Address
              description: 'The registered address of the company.'
              allOf:
                - $ref: '#/components/schemas/EntityAddress'
              required:
                - address_line1
                - city
                - zip
                - country
            representatives:
              type: array
              title: Representatives
              description: 'Information about representatives of this company'
              minItems: 1
              maxItems: 5
              items:
                allOf:
                  - $ref: '#/components/schemas/EntityRepresentativeForUpdate'
                  - type: object
                    required:
                      - first_name
                      - last_name
                    properties:
                      address:
                        required:
                          - country
        individual:
          type: object
          title: Individual
          description: 'Information about the individual represented by the sub-entity. Include this object if you are onboarding a sole proprietor. This is required if the company object is omitted.'
          required:
            - first_name
            - last_name
            - trading_name
            - registered_address
          properties:
            first_name:
              type: string
              description: "The individual's first name."
              minLength: 2
              maxLength: 50
              example: 'John'
            middle_name:
              type: string
              description: "The individual's middle name."
              maxLength: 50
              example: 'Paul'
            last_name:
              type: string
              description: "The individual's last name."
              minLength: 2
              maxLength: 50
              example: 'Doe'
            trading_name:
              type: string
              description: "If applicable, the individual's trading name."
              minLength: 2
              maxLength: 300
              example: Super Hero Masks
            national_tax_id:
              type: string
              description: "The sub-entity's tax identification code. For example, a value added tax (VAT) number in the UK."
              minLength: 2
              maxLength: 16
              example: '1234567'
            registered_address:
              title: Address
              description: 'The registered address of the individual.'
              allOf:
                - $ref: '#/components/schemas/EntityAddress'
              required:
                - address_line1
                - city
                - zip
                - country
            date_of_birth:
              $ref: '#/components/schemas/DateOfBirth'
            identification:
              $ref: '#/components/schemas/EntityIdentification'
      required:
        - contact_details
        - profile
    MarketplaceAccountHolder:
      type: object
      title: Account holder
      properties:
        type:
          title: Type
          description: The type of account holder.
          type: string
          enum:
            - individual
            - corporate
            - government
        first_name:
          title: First name
          description: "The account holder's first name. Required if `type` is `individual`."
          type: string
          example: Peter
        last_name:
          title: Last name
          description: "The account holder's last name. Required if `type` is `individual`."
          type: string
          example: Parker
        company_name:
          title: Company name
          description: 'The legal name of a registered company that holds the account. Required if `type` is `corporate`.'
          type: string
          example: Super Hero Masks Inc.
        tax_id:
          title: Tax ID
          description: The account holder's tax number/reference.
          type: string
          example: '123456'
        date_of_birth:
          title: Date of birth
          description: The account holder's date of birth.
          allOf:
            - $ref: '#/components/schemas/DateOfBirth'
        country_of_birth:
          title: Country of birth
          description: The two-letter ISO country code of the account holder's country of birth.
          type: string
          format: ISO 3166-1
          example: 'GB'
        residential_status:
          title: Residental status
          description: The two-letter ISO country code of the account holder's country of birth.
          type: string
          enum:
            - resident
            - non_resident
        billing_address:
          title: Billing address
          description: The billing address of the account holder.
          allOf:
            - $ref: '#/components/schemas/EntityAddress'
        phone:
          title: Phone
          description: The phone number of the account holder.
          allOf:
            - $ref: '#/components/schemas/EntityPhone'
        identification:
          $ref: '#/components/schemas/MarketplaceAccountHolderIdentification'
        email:
          title: Email
          description: The account holder's email address.
          type: string
          format: email
          example: peter.parker@superhero.masks
    MarketplaceAccountHolderIdentification:
      type: object
      title: Account holder identification
      description: Bank account holder's proof of identification.
      properties:
        type:
          title: Type
          description: The type of identification used to identify the account holder.
          type: string
          enum:
            - passport
            - driving_licence
            - national_id
            - company_registration
            - tax_id
        number:
          title: Number
          description: The identification number.
          type: string
          example: '09876'
        issuing_country:
          title: IssuingCountry
          description: The two-letter ISO country code of the country that issued the identification.
          type: string
          format: ISO 3166-1
          example: 'GB'
    MarketplaceBank:
      type: object
      title: Bank
      properties:
        name:
          title: Name
          description: The bank's name.
          type: string
          example: Lloyds TSB
        branch:
          title: Branch
          description: The bank branch's name.
          type: string
          example: London
        address:
          title: Address
          description: The bank's contact address.
          allOf:
            - $ref: '#/components/schemas/EntityAddress'
    MarketplaceInstrumentCreateRequest:
      type: object
      title: InstrumentCreateRequest
      properties:
        label:
          title: Label
          description: A reference you can later use to identify this payment instrument.
          type: string
          minLength: 1
          maxLength: 50
          example: Peter's Personal Account
        type:
          title: Type
          description: The type of instrument.
          type: string
          enum:
            - bank_account
        account_type:
          title: Account type
          description: The type of account.
          type: string
          enum:
            - savings
            - current
            - cash
        account_number:
          title: Account number
          description: Number (which can contain letters) that identifies the account.
          type: string
          example: '13654567455'
        bank_code:
          title: Bank code
          description: Code that identifies the bank.
          type: string
          example: '123-456'
        branch_code:
          title: Branch code
          description: Code that identifies the bank branch.
          type: string
          example: '6443'
        iban:
          title: IBAN
          description: Internationally agreed standard for identifying bank account.
          type: string
          minLength: 5
          maxLength: 34
          example: 'HU93116000060000000012345676'
        bban:
          title: BBAN
          description: The combination of bank code and/or branch code and account number.
          type: string
          example: '3704 0044 0532 0130 00'
        swift_bic:
          title: SwiftBic
          description: An 8 or 11 character code that identifies the bank or bank branch.
          type: string
          format: ISO 9362:2009
          example: '37040044'
        currency:
          title: Currency
          description: The three-letter ISO currency code of the account's currency.
          type: string
          format: ISO 4217
          minLength: 3
          maxLength: 3
          example: 'GBP'
        country:
          title: Country
          description: The two-letter ISO country code of where the account is based.
          type: string
          format: ISO 3166-1
          example: 'GB'
        document:
          title: Document
          type: object
          description: A legal document used to verify the bank account.
          properties:
            type:
              type: string
              description: The type of document.
              enum:
                - bank_statement
              default: bank_statement
              example: bank_statement
            file_id:
              type: string
              description: The ID of the file representing the uploaded document.
              example: file_wxglze3wwywujg4nna5fb7ldli
        account_holder:
          $ref: '#/components/schemas/MarketplaceAccountHolder'
        bank:
          $ref: '#/components/schemas/MarketplaceBank'
      required:
        - label
        - type
        - currency
        - country
        - document
    MarketplaceInstrumentReference:
      type: object
      title: InstrumentReference
      properties:
        id:
          title: ID
          description: The unique identifier of this payment instrument.
          type: string
          example: src_hmnkhxlshf3uhljow7zt7sf2cq
        label:
          title: Label
          description: The reference you can use to identify this payment instrument.
          type: string
          example: Peter's Personal Account
        status:
          description: The verification status of this payment instrument.
          type: string
          enum:
            - verified
            - unverified
            - pending
          example: verified
        document:
          title: Document
          type: object
          description: A legal document used to verify the bank account.
          properties:
            type:
              type: string
              description: The type of document.
              enum:
                - bank_statement
              default: bank_statement
              example: bank_statement
            file_id:
              type: string
              description: The ID of the file representing the uploaded document.
              example: file_wxglze3wwywujg4nna5fb7ldli
    MarketplaceFile:
      type: object
      required:
        - path
        - purpose
      properties:
        purpose:
          type: string
          description: The purpose of the file upload.
          enum:
            - bank_verification
            - identification
          example: 'identification'
        path:
          type: string
          description: The <strong>local</strong> path of the file to upload, and its type.
          example: 'file=@/path/passport.png;type=image/png'
    MarketplaceFileUploadResponse:
      type: object
      description: File uploaded successfully
      properties:
        id:
          type: string
          description: The file identifier
          example: 'file_6lbss42ezvoufcb2beo76rvwly'
        _links:
          type: object
          properties:
            self:
              description: The file information retrieval URL
              properties:
                href:
                  example: 'https://files.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly'
    PagingError:
      type: object
      properties:
        request_id:
          type: string
          example: 0HL80RJLS76I7
        error_type:
          type: string
          example: request_invalid
        error_codes:
          type: array
          items:
            type: string
            example: paging_limit_invalid
    GetPaymentLinkResponse:
      type: object
      discriminator:
        propertyName: status
        mapping:
          Active: '#/components/schemas/PaymentLinkResponseStatusActive'
          Payment Received: '#/components/schemas/PaymentLinkResponseStatusPaymentReceived'
          Expired: '#/components/schemas/PaymentLinkResponseStatusExpired'
      
      required:
        - id
        - status
        - amount
        - currency
        - expires_on
        - created_on
        - billing
        - _links
      
      properties:
        id:
          example: pl_ELqQJXdXzabU
          allOf:
            - $ref: '#/components/schemas/PaymentLinkId'
        status:
          type: string
          enum:
            - Active
            - Payment Received
            - Expired
          description: |
            The status of the Payment Link:
              - `Active`: The Payment Link can accept a payment from the customer. A payment may have been attempted by the customer but not completed successfully.
              - `Payment Received`: A payment has been received successfully using this Payment Link.
              - `Expired`: The Payment Link has expired and can no longer be accessed.
          example: Active
        payment_id:
          type: string
          description: Unique identifier for an in progress or completed payment for this Payment Link.
          example:
        amount:
          type: integer
          description: The original payment amount.
          example: 100
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/resources/codes/currency-codes" target="blank">ISO currency code</a> of the payment.<br>
          example: GBP
        reference:
          type: string
          description: Your reference for the payment.
          example: ORD-123A
        description:
          type: string
          description: A description of the payment.
          example: Payment for Gold Necklace
        created_on:
          type: string
          description: The date and time when the Payment Link was created.
          format: date-time
          example: '2021-08-19T20:25:28.725Z'
        expires_on:
          type: string
          description: The date and time when the Payment Link expires.
          format: date-time
          example: '2021-08-20T20:25:28+08:00'
        processing_channel_id:
          type: string
          pattern: "^(pc)_(\\w{26})$"
          description: The processing channel to be used for the payment
          example: 'pc_q4dbxom5jbgudnjzjpz7j2z6uq'
        marketplace:
          $ref: '#/components/schemas/MarketplaceData'
        customer:
          type: object
          description: The customer's details.
          properties:
            email:
              type: string
              format: email
              description: The email address for the customer.
              example: brucewayne@email.com
            name:
              type: string
              description: The customer's name.
              example: Bruce Wayne
        shipping:
          type: object
          description: The address any products are being sent to.
          required:
            - address
          properties:
            address:
              type: object
              description: The customer's address to ship to.
              required:
                - country
              allOf:
                - $ref: '#/components/schemas/Address'
        billing:
          type: object
          additionalProperties: false
          description: The billing details.
          required:
            - address
          properties:
            address:
              type: object
              description: The billing address.
              required:
                - country
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              type: object
              description: The customer's phone number.
              required:
                - number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        products:
          type: array
          description: Details about the provided products.
          items:
            type: object
            additionalProperties: false
            required:
              - name
              - quantity
              - price
            properties:
              name:
                type: string
                description: Descriptive item name.
                example: Gold Necklace
              quantity:
                type: integer
                description: The item quantity
                example: 1
              price:
                type: integer
                description: Minor units. Includes tax, excludes discounts.
                example: 200
        metadata:
          type: object
          title: The Metadata Schema
          description: Any additional information stored at the point of creation.
          additionalProperties: true
        return_url:
          type: string
          format: uri
          description: If provided, the success page will include a button that redirects your customer to the provided URL.
          example: https://example.com/success
          maxLength: 255
        locale:
          type: string
          description: Creates a translated version of the page in the specified language
          enum:
            - de-DE
            - en-GB
            - fr-FR
            - it-IT
            - nl-NL
            - es-ES
            - zh-HK
            - zh-TW
            - zh-CN
            - ja-JP
            - fil-PH
            - id-ID
            - ms-MY
            - th-TH
            - vi-VN
            - hi-IN
          default: en-GB
    PaymentLinkId:
      type: string
      pattern: '^pl_[A-Za-z0-9_-]{12}$'
      description: The unique identifier for a Payment Link.
      maxLength: 15
      minLength: 15
    PaymentLinkResponseLinks:
      type: object
      description: The links related to the Payment Link.
      minItems: 2
      required:
        - self
        - redirect
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the Payment Link details.
        redirect:
          type: object
          description: The link to visit the Payment Link page.
          allOf:
            - $ref: '#/components/schemas/Link'
        payment:
          type: object
          description: The URI of the in progress or completed payment for this Payment Link.
          allOf:
            - $ref: '#/components/schemas/Link'
        payment_actions:
          type: object
          description: The URI of the actions associated with the in progress or completed payment for this Payment Link.
          allOf:
            - $ref: '#/components/schemas/Link'
      example:
        self:
          href: 'https://api.sandbox.checkout.com/payment-links/pl_ELqQJXdXzabU'
        redirect:
          href: 'https://pay.sandbox.checkout.com/link/pl_ELqQJXdXzabU'
    PaymentLinkResponseStatusActive:
      type: object
      description: A Payment Link that is active and can accept a payment from a customer.
      allOf:
        - $ref: '#/components/schemas/GetPaymentLinkResponse'
        - type: object
          properties:
            _links:
              allOf:
                - $ref: '#/components/schemas/PaymentLinkResponseLinks'
    PaymentLinkResponseStatusExpired:
      type: object
      description: An expired Payment Link
      allOf:
        - $ref: '#/components/schemas/GetPaymentLinkResponse'
        - type: object
          properties:
            _links:
              allOf:
                - $ref: '#/components/schemas/PaymentLinkResponseLinks'
    PaymentLinkResponseStatusPaymentReceived:
      type: object
      description: A Payment Link that has received a payment
      required:
        - payment_id
      allOf:
        - $ref: '#/components/schemas/GetPaymentLinkResponse'
        - type: object
          properties:
            payment_id:
              example: pay_mbabizu24mvu3mela5njyhpit4
            _links:
              required:
                - payment
                - payment_actions
              allOf:
                - $ref: '#/components/schemas/PaymentLinkResponseLinks'
              example:
                self:
                  href: 'https://api.sandbox.checkout.com/payment-links/pl_ELqQJXdXzabU'
                redirect:
                  href: 'https://pay.sandbox.checkout.com/link/pl_ELqQJXdXzabU'
                payment:
                  href: https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4
                payment_actions:
                  href: https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions
    PaymentLinksRequest:
      type: object
      required:
        - amount
        - currency
        - billing
      properties:
        amount:
          type: integer
          description: The payment amount. The exact format <a href="https://www.checkout.com/docs/four/resources/calculating-the-amount" target="_blank">depends on the currency</a>.
          minimum: 1
          example: 200
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/resources/codes/currency-codes" target="blank">ISO currency code</a> of the payment.<br><i>The `currency` and `billing.address.country` fields determine which payment methods are shown on the payment page</i>.
          example: GBP
          minLength: 3
          maxLength: 3
        payment_type:
          type: string
          description: This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)
          enum:
            - Regular
            - Recurring
          default: Regular
        payment_ip:
          type: string
          format: ipv4
          maxLength: 45
          description: The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses
        billing_descriptor:
          type: object
          description: An optional description that is displayed on the customer's statement identifying a purchase
          required:
            - name
            - city
          properties:
            name:
              type: string
              maxLength: 25
              description: A dynamic description of the change
            city:
              type: string
              minLength: 1
              maxLength: 13
              description: The city from which the charge originated
            reference:
              type: string
              maxLength: 50
              description: The reference shown on the statement. Required for payouts to bank accounts.
        reference:
          type: string
          description: A reference you can later use to identify this payment, such as an order number.<br><i>Required for PayPal payments<i>.
          example: ORD-123A
          maxLength: 50
        description:
          type: string
          description: A description of the payment.
          example: Payment for Gold Necklace
          maxLength: 100
        expires_in:
          type: integer
          description: The time for which the link remains valid, in seconds.
          minimum: 1
          maximum: 1209600
          default: 86400
          example: 604800
        customer:
          type: object
          description: The customer's details.
          properties:
            email:
              type: string
              format: email
              description: An email address to associate with the customer.
              example: brucewayne@email.com
              maxLength: 255
            name:
              type: string
              description: The customer's name. This will only set the name for new customers.
              example: Bruce Wayne
              maxLength: 255
        shipping:
          type: object
          description: The address any products are being sent to.
          required:
            - address
          properties:
            address:
              type: object
              description: The customer's address to ship to.
              required:
                - country
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              type: object
              description: The customer's phone number
              required:
                - number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        billing:
          type: object
          additionalProperties: false
          description: The billing details.
          required:
            - address
          properties:
            address:
              type: object
              description: The billing address.
              required:
                - country
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              type: object
              description: The customer's phone number
              required:
                - number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        recipient:
          $ref: '#/components/schemas/PaymentRecipient'
        processing:
          type: object
          description: Use the processing object to influence or override the data sent during card processing
          properties:
            aft:
              type: boolean
              description: Indicates whether the payment is an [Account Funding Transaction](https://www.checkout.com/docs/four/payments/manage-payments/account-funding-transactions).
        allow_payment_methods:
          type: array
          description: >
            Use to specify which <a href="https://www.checkout.com/docs/four/payments/payment-methods" target="_blank">payment methods</a> should render on the page. <a href="https://checkout.com/docs/four/integrate/payment-links/manage-payment-links#Alternative_payment_methods" target="_blank">Check the requirements for each payment method</a>
          enum:
            - card
            - sofort
            - ideal
            - knet
            - bancontact
            - p24
            - multibanco
          example:
            - card
        products:
          type: array
          description: Details about the products in the order.
          minItems: 1
          maxItems: 1000
          items:
            type: object
            additionalProperties: false
            required:
              - name
              - quantity
              - price
            properties:
              name:
                type: string
                description: Descriptive item name.
                example: Gold Necklace
              quantity:
                type: integer
                description: The item quantity.
                minimum: 1
                example: 1
              price:
                type: integer
                description: Minor units. Includes tax, excludes discounts.
                minimum: 0
                example: 200
        metadata:
          type: object
          title: The Metadata Schema
          description: Allows you to store additional information about the transaction. This object only allows one level of depth, so cannot accept non-primitive data types such as objects or arrays.
          additionalProperties: true
        3ds:
          type: object
          description: Information required for 3D Secure payments.
          properties:
            enabled:
              type: boolean
              description: Whether to process this payment as a 3D Secure payment.
              default: false
            attempt_n3d:
              type: boolean
              description: Determines whether to attempt a 3D Secure payment as non-3D Secure should the card issuer not be enrolled.
              default: false
        risk:
          $ref: '#/components/schemas/RiskRequest'
        return_url:
          type: string
          format: uri
          description: If provided, the success page will include a button that redirects your customer to the provided URL.
          example: https://example.com/success
          maxLength: 255
        locale:
          type: string
          description: Creates a translated version of the page in the specified language
          enum:
            - de-DE
            - en-GB
            - fr-FR
            - it-IT
            - nl-NL
            - es-ES
            - zh-HK
            - zh-TW
            - zh-CN
            - ja-JP
            - fil-PH
            - id-ID
            - ms-MY
            - th-TH
            - vi-VN
            - hi-IN
          default: en-GB
        capture:
          type: boolean
          description: Whether to capture the payment (if applicable).
          example: true
        capture_on:
          description: |
            A timestamp (ISO 8601 code) that determines when the payment should be captured.
            Providing this field will automatically set `capture` to true.
          allOf:
            - $ref: '#/components/schemas/Timestamp'
    PaymentLinksResponse:
      type: object
      required:
        - id
        - _links
      properties:
        id:
          example: pl_ELqQJXdXzabU
          allOf:
            - $ref: '#/components/schemas/PaymentLinkId'
        expires_on:
          type: string
          description: The date and time when the Payment Link expires.
          format: date-time
          example: '2020-08-20T20:25:28+08:00'
        reference:
          type: string
          description: A reference you can later use to identify this payment, such as an order number.
          example: ORD-123A
        warnings:
          type: array
          description: Related to the `allow_payment_methods` object in the request. Included in the response if an alternative payment method is passed through, but no card schemes are configured against the account.
        _links:
          type: object
          description: The links related to the Payment Link session.
          readOnly: true
          minItems: 1
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: 'https://api.sandbox.checkout.com/payment-links/pl_ELqQJXdXzabU'
            redirect:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: 'https://pay.sandbox.checkout.com/link/pl_ELqQJXdXzabU'
    3dsData:
      type: object
      properties:
        downgraded:
          type: boolean
          description: Inidicates whether this was a 3D Secure payment downgraded to non-3D Secure (when `attempt_n3d` is specified)
          example: false
        enrolled:
          type: string
          description: >
            Indicates the 3D Secure enrollment status of the issuer
              * `Y` - Issuer enrolled
              * `N` - Customer not enrolled
              * `U` - Unknown
          example: Y
        signature_valid:
          type: string
          description: Verification to ensure the integrity of the response
          example: Y
        authentication_response:
          type: string
          description: >
            Indicates whether or not the cardholder was authenticated
              * `Y` - Customer authenticated
              * `N` - Customer not authenticated
              * `A` - An authentication attempt occurred but could not be completed
              * `U` - Unable to perform authentication
          example: Y
        cryptogram:
          type: string
          description: Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the integrity of the 3D secure payment data
          example: hv8mUFzPzRZoCAAAAAEQBDMAAAA=
        xid:
          type: string
          description: Unique identifier for the transaction assigned by the MPI
          example: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
        version:
          type: string
          description: Indicates the version of 3D Secure that was used for authentication
          example: '2.1.0'
        exemption:
          type: string
          enum:
            - low_value
            - secure_corporate_payment
            - trusted_listing
            - transaction_risk_assessment
          description: Specifies an exemption reason so that the payment is not processed using 3D Secure authentication. Learn more about exemptions in our <a href="https://docs.checkout.com/four/payments/regulation-support/sca-compliance-guide#SCAcomplianceguide-PossibleSCAexemptionsexemptions" target="_blank">SCA compliance guide</a>
          example: 'low_value'
    3dsEnrollmentData:
      type: object
      properties:
        downgraded:
          type: boolean
          description: Indicates whether this was a 3D Secure payment downgraded to non-3D-Secure (when `attempt_n3d` is specified)
          example: false
        enrolled:
          type: string
          description: >
            Indicates the 3D Secure enrollment status of the issuer
              * `Y` - Issuer enrolled
              * `N` - Customer not enrolled
              * `U` - Unknown
          example: Y
    3dsRequest:
      type: object
      description: Information required for 3D Secure payments
      properties:
        enabled:
          type: boolean
          description: Whether to process this payment as a 3D Secure payment
          default: false
          example: true
        attempt_n3d:
          type: boolean
          description: |
            Determines whether to attempt a 3D Secure payment as non-3D Secure
            should the card issuer not be enrolled
          default: false
          example: true
        eci:
          type: string
          description: The Electronic Commerce Indicator security level associated with the 3D Secure enrollment result. Required if using a third-party merchant plug-in (MPI)
          maxLength: 2
          example: '05'
        cryptogram:
          type: string
          description: A Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the cardholder authentication result (3D Secure). Required if using an external MPI
          maxLength: 50
          example: AgAAAAAAAIR8CQrXcIhbQAAAAAA=
        xid:
          type: string
          description: The 3D Secure transaction identifier. Required if using an external MPI with 3D Secure 2.X.X and a Mastercard card, or with 3D Secure 1.X.X for any supported card scheme
          maxLength: 100
          example: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
        version:
          type: string
          description: Indicates the version of 3D Secure that was used for authentication. Defaults to 1.0.0 if not provided
          maxLength: 10
          example: '2.0.1'
        exemption:
          type: string
          enum:
            - low_value
            - secure_corporate_payment
            - trusted_listing
            - transaction_risk_assessment
          description: Specifies an exemption reason so that the payment is not processed using 3D Secure authentication. Learn more about exemptions in our <a href="https://docs.checkout.com/four/payments/regulation-support/sca-compliance-guide#SCAcomplianceguide-PossibleSCAexemptionsexemptions" target="_blank">SCA compliance guide</a>
          example: 'low_value'
        challenge_indicator:
          type: string
          description: Indicates the preference for whether or not a 3DS challenge should be performed. The customer’s bank has the final say on whether or not the customer receives the challenge.
          enum:
            - no_preference
            - no_challenge_requested
            - challenge_requested
            - challenge_requested_mandate
          default: no_preference
    ActionId:
      type: string
      pattern: "^(act)_(\\w{26})$"
      description: The action identifier
      maxLength: 30
      minLength: 30
      example: 'act_y3oqhf46pyzuxjbcn2giaqnb44'
    AuthorizationRequest:
      type: object
      properties:
        amount:
          type: integer
          description: |
            The amount to increase the authorization by. Omit the amount or provide a value of `0` to extend the authorization validity period
          minimum: 0
          example: 6540
        reference:
          type: string
          description: A reference you can later use to identify this authorization request
          example: 'ORD-5023-4E89'
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to the authorization request. This can be useful for storing additional information in a structured format. **Note** that this object only allows one level of depth, so cannot accept non-primitive data types such as objects or arrays.
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
    AuthorizationResponse:
      type: object
      description: Authorization Response
      required:
        - action_id
        - amount
        - currency
        - approved
        - status
        - response_code
        - processed_on
        - _links
      properties:
        action_id:
          description: The unique identifier for the action performed against this payment
          allOf:
            - $ref: '#/components/schemas/ActionId'
        amount:
          type: integer
          description: The payment amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        approved:
          type: boolean
          description: Whether or not the authorization was successful
          example: true
        status:
          type: string
          description: The status of the payment
          enum:
            - Authorized
            - Declined
          example: Authorized
        auth_code:
          type: string
          description: The acquirer authorization code if the payment was authorized
          example: '643381'
        response_code:
          type: string
          description: The Gateway response code
          example: '10000'
        response_summary:
          type: string
          description: The Gateway response summary
          example: 'Approved'
        expires_on:
          type: string
          description: The timestamp (ISO 8601 code) for when the authorization's validity period ends
        balances:
          type: object
          description: The payment balances
          allOf:
            - $ref: '#/components/schemas/PaymentResponseBalances'
        processed_on:
          description: The date/time the payment was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        processing:
          type: object
          description: Returns information related to the processing of the payment
          properties:
            retrieval_reference_number:
              type: string
              description: 'A unique identifier for the authorization that is submitted to the card scheme during processing'
              example: '909913440644'
            acquirer_transaction_id:
              type: string
              description: 'A unique identifier for the transaction generated by the acquirer'
              example: '440644309099499894406'
            recommendation_code:
              type: string
              description: 'A <a href="https://docs.checkout.com/four/resources/codes/recommendation-codes" target="blank">code</a> that represents the next recommended action for the payment'
              example: "02"
        eci:
          type: string
          description: The final Electronic Commerce Indicator (ECI) security level used to authorize the payment.
            Applicable for 3D Secure and network token payments
          example: '06'
        scheme_id:
          type: string
          description: The scheme transaction identifier
          example: '489341065491658'
        _links:
          type: object
          description: The links related to the payment
          minItems: 2
          required:
            - self
            - actions
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
            actions:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to the payment's associated actions
            authorize:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to increment the authorization, where applicable
            void:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to void the payment, where applicable
            capture:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to capture the payment, where applicable
            refund:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to refund the payment, where applicable
          example:
            self:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44'
            actions:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions'
            authorize:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations'
            void:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/voids'
            capture:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/capture'
    BankAccountFields:
      type: object
      properties:
        sections:
          type: array
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The name of the section
                example: Account Details
              fields:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - display
                    - type
                    - required
                  properties:
                    id:
                      type: string
                      description: The field identifier
                      example: account_holder.first_name
                    section:
                      type: string
                      description: The section to display the field in
                      example: account
                    display:
                      type: string
                      description: The field's display name
                      example: First name
                    help_text:
                      type: string
                      description: The help text that explains the purpose of the field
                      example: The account holder's first name. Required if type is individual.
                    type:
                      type: string
                      description: The type of field
                      example: string
                    required:
                      type: boolean
                      description: Whether the field is required
                      example: true
                    validation_regex:
                      type: string
                      description: A regular expression that can be used to validate the input of the field
                      example: ^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,18}$
                    min_length:
                      type: integer
                      description: The minimum length of the field
                      example: 22
                    max_length:
                      type: integer
                      description: The maximum length of the field
                      example: 22
                    allowed_options:
                      type: array
                      description: The allowed options for the field
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: The option identifier
                            example: '1'
                          display:
                            type: string
                            description: The option display value
                            example: Beneficiary
                    dependencies:
                      type: array
                      description: The field's dependencies
                      items:
                        type: object
                        properties:
                          field_id:
                            type: string
                            description: The field identifier
                            example: entity_type
                          value:
                            type: string
                            description: The value of the dependent field that match in order for this field to be displayed
      example:
        sections:
          - name: Account Details
            fields:
              - id: iban
                type: string
                display: IBAN
                description: Number (which can contain letters) that identifies the account
                section: account
                required: true
                validation_regex: ^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,18}$
                min_length: 22
                max_length: 22
              - id: account_holder.first_name
                type: string
                display: First name
                description: The account holder's first name
                section: account
                required: true
              - id: account_holder.last_name
                type: string
                display: First name
                description: The account holder's last name
                section: account
                required: true
    BillingDescriptor:
      type: object
      description: |
        An optional description that is displayed on the customer's statement identifying a purchase.
      properties:
        name:
          type: string
          description: |
            A dynamic description of the payment. 
            Applies to card payments only.
          example: 'SUPERHEROES.COM'
          maxLength: 25
        city:
          type: string
          description: |
            The city from which the payment originated. 
            Applies to card payments only.
          minimum: 1
          example: 'GOTHAM'
          maxLength: 13
        reference:
          type: string
          description: |
            The reference that should be shown on the statement. 
            Required for payouts to bank accounts.
          maxLength: 50
      required:
        - name
        - city
    CaptureAcceptedResponse:
      type: object
      description: Capture response
      required:
        - action_id
      properties:
        action_id:
          description: The unique identifier for the capture action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        reference:
          type: string
          description: Your reference for the capture request
          example: 'ORD-5023-4E89'
        _links:
          type: object
          description: The links related to the capture
          readOnly: true
          minItems: 2
          properties:
            payment:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment to be captured. Use this to check the status of the payment
              example:
                href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44'
            redirect:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: For some alternative payments, the URI that the customer should be redirected to to complete the capture
              example:
                href: 'https://api.checkout.com/redirect/act_y3oqhf46pyzuxjbcn2giaqnb44'
          required:
            - payment
    CaptureRequest:
      type: object
      properties:
        amount:
          type: integer
          description: |
            The amount to capture. If not specified, the full payment amount will be captured
          minimum: 0
          example: 6540
        capture_type:
          type: string
          description: The type of capture. If set to `Final`, the remaining available-to-capture balance will be voided
          default: Final
          enum:
            - NonFinal
            - Final
          example: Final
        reference:
          type: string
          description: A reference you can later use to identify this capture request
          maxLength: 50
          example: 'ORD-5023-4E89'
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to the capture request. This can be useful for storing additional information in a structured format. **Note** that this object only allows one level of depth, so cannot accept non-primitive data types such as objects or arrays.
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
    Item:
      type: object
      description: The order line item or product that is being purchased
      properties:
        sku:
          type: string
          description: The stock-keeping unit (SKU) identifier of the item
          example: 858818ac
        name:
          type: string
          description: The name of the item or product
          example: Kevlar batterang
        description:
          type: string
          description: A description of the item or product
          example: The fastest, hardest batterang known to man
        image_url:
          type: string
          format: uri
          description: The URL of an image of the item or product
          example: http://example.com/batterang.jpg
        price:
          type: number
          description: The unit price of the item or product in the minor currency unit
          example: 34.50
        quantity:
          type: number
          description: The number of the items purchased
          example: 2
        shipping_cost:
          type: number
          description: The shipping cost of the item
          example: 2.99
        shipping_tracking_url:
          type: string
          format: uri
          description: A URL to track the shipping status of the item
          example: http://www.dhl.co.uk/en/express/tracking.html?AWB=41f280bbe12cd787b47c&brand=DHL
    MarketplaceData:
      type: object
      description: Information related to marketplace payments
      properties:
        sub_entity_id:
          type: string
          description: The sub-entity that the payment is being processed on behalf of
          example: 'ent_rgyzti4x74xubmu72m6r3pvksa'
        sub_entities:
          type: array
          description: The sub-entities that the payment is being processed on behalf of - use for split payments.
          minItems: 1
          maxItems: 10
          items:
            type: object
            required:
              - id
              - amount
            title: SubEntities
            properties:
              id:
                type: string
                description: 'The id of the sub-entity.'
                example: 'ent_w4jelhppmfiufdnatam37wrfc4'
              amount:
                type: integer
                description: |
                  The split amount - this will be credited to your sub-entity's currency account. The sum of all split amounts must be equal to the payment amount.      
      
                  The amount must be provided in the <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="blank">minor currency unit</a>.
                minimum: 0
                example: 1000
              reference:
                type: string
                description: A reference you can later use to identify this split, such as an order number.
                maxLength: 50
                example: 'ORD-5023-4E89'
              commission:
                type: object
                title: Commission
                description: |
                  Commission you'd like to collect from this split - this will be credited to your currency account. The commission cannot exceed the split amount.
      
                  Commission = (`amount` * `commission.percentage`) + `commission.amount`
                properties:
                  amount:
                    type: integer
                    description: |
                      Optional fixed amount of commission to collect.
      
                      The amount must be provided in the <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="blank">minor currency unit</a>.
                    minimum: 0
                    example: 1000
                  percentage:
                    type: number
                    description: |
                      Optional percentage of commission to collect.
      
                      Supports up to 8 decimal places.
                    minimum: 0
                    maximum: 100
                    example: 1.125
    Payment:
      type: object
      description: Payment response
      required:
        - id
        - requested_on
        - amount
        - currency
        - status
        - approved
        - _links
      properties:
        id:
          description: Payment unique identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        requested_on:
          description: The date/time the payment was requested
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        source:
          description: The source of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseSource'
        destination:
          description: The destination of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseDestination'
        amount:
          type: integer
          description: The original payment amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://www.checkout.com/docs/four/resources/codes/currency-codes" target="blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        payment_type:
          type: string
          description: This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)
          enum:
            - Regular
            - Recurring
            - MOTO
            - Installment
          default: Regular
          example: Recurring
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        description:
          type: string
          description: A description of the payment
          example: Set of 3 masks
        approved:
          type: boolean
          description: Whether the payment was successful
          example: true
        expires_on:
          type: string
          description: The timestamp (ISO 8601 code) for when the authorization's validity period expires
        status:
          type: string
          description: The status of the payment
          enum:
            - Pending
            - Authorized
            - Card Verified
            - Voided
            - Partially Captured
            - Captured
            - Partially Refunded
            - Refunded
            - Declined
            - Canceled
            - Paid
          example: Authorized
        balances:
          type: object
          description: The payment balances
          allOf:
            - $ref: '#/components/schemas/PaymentResponseBalances'
        3ds:
          type: object
          description: Provides information relating to the processing of 3D Secure payments
          allOf:
            - $ref: '#/components/schemas/3dsData'
        risk:
          type: object
          description: Returns the payments risk assessment results
          properties:
            flagged:
              type: boolean
              description: Whether the payment was flagged by a risk check
              default: false
              example: true
        customer:
          type: object
          description: The customer to which this payment is linked
          properties:
            id:
              type: string
              pattern: "^(cus)_(\\w{26})$"
              description: The unique identifier of the customer. This can be passed as a source when making a payment
              example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
            email:
              type: string
              description: The customer's email address
              example: 'brucewayne@gmail.com'
            name:
              type: string
              description: The customer's name
              example: 'Bruce Wayne'
          required:
            - id
        billing_descriptor:
          $ref: '#/components/schemas/BillingDescriptor'
        shipping:
          type: object
          description: The payment shipping details
          properties:
            address:
              description: The shipping address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number associated with the shipping address
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        payment_ip:
          description: The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses.
          allOf:
            - $ref: '#/components/schemas/IPAddress'
        marketplace:
          $ref: '#/components/schemas/MarketplaceData'
        recipient:
          $ref: '#/components/schemas/PaymentRecipient'
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
        eci:
          type: string
          description: |
            The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. 
            Applicable for 3D Secure and network token payments
          example: '06'
        scheme_id:
          type: string
          description: |
            The scheme transaction identifier
          example: '488341541494658'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/PaymentActionSummary'
          description: |
            A summary of the payment's actions, 
            returned when a session ID is used to get the payment details
        _links:
          type: object
          description: The links related to the payment
          minItems: 2
          required:
            - self
            - actions
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
            actions:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to the payment's associated actions
            authorize:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to increment the authorization, where applicable
            void:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to void the payment, where applicable
            capture:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to capture the payment, where applicable
            refund:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to refund the payment, where applicable
          example:
            self:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44'
            actions:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions'
            authorize:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations'
            refund:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/refund'
    PaymentAcceptedResponse:
      type: object
      description: Payment response
      required:
        - id
        - status
      properties:
        id:
          description: The payment's unique identifier
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        status:
          type: string
          description: The status of the payment
          enum:
            - Pending
        reference:
          type: string
          description: Your reference for the payment request
          example: ORD-5023-4E89
        customer:
          type: object
          description: The customer associated with the payment, if provided in the request
          allOf:
            - $ref: '#/components/schemas/CustomerResponse'
        3ds:
          type: object
          description: Provides 3D Secure enrollment status
          allOf:
            - $ref: '#/components/schemas/3dsEnrollmentData'
        _links:
          type: object
          description: The links related to the payment
          readOnly: true
          minItems: 2
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
              example:
                href: 'https://api.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4'
            redirect:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI that the customer should be redirected to in order to complete the payment
              example:
                href: 'https://api.checkout.com/3ds/pay_mbabizu24mvu3mela5njyhpit4'
          required:
            - self
    PaymentAction:
      type: object
      required:
        - id
        - type
        - amount
        - response_code
        - processed_on
      properties:
        id:
          description: The unique identifier of the payment action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        type:
          type: string
          description: The type of action
          enum:
            - Authorization
            - Card Verification
            - Void
            - Capture
            - Refund
            - Payout
            - Return
        processed_on:
          description: The date/time the action was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        amount:
          type: integer
          description: The action amount
          example: 6540
        approved:
          type: boolean
          description: Whether the action was successful
          example: true
        auth_code:
          type: string
          description: The acquirer authorization code for cards
          example: '643381'
        response_code:
          type: string
          description: The Gateway response code
          example: '10000'
        response_summary:
          type: string
          description: The Gateway response summary
          example: 'Approved'
        authorization_type:
          type: string
          description: The authorization type
          enum:
            - Final
            - Estimated
            - Incremental
          default: Final
          example: Estimated
        reference:
          type: string
          description: Your reference for the action
          example: 'ORD-5023-4E89'
        processing:
          type: object
          description: Returns information related to the processing of the payment
          properties:
            retrieval_reference_number:
              type: string
              description: 'A unique identifier for the authorization that is submitted to the card scheme during processing'
              example: '909913440644'
            acquirer_reference_number:
              type: string
              description: 'A unique identifier for the capture that is submitted to the card scheme during processing'
              example: '24021219099007452440793'
            acquirer_transaction_id:
              type: string
              description: 'A unique identifier for the transaction generated by the acquirer'
              example: '440644309099499894406'
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to an action
    PaymentActionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/PaymentAction'
      minItems: 1
      description: |
        The payment actions
      example:
        - 'id': 'act_fd3h6evhpn3uxdoqbuu3lqnqbm'
          'type': 'Refund'
          'processed_on': '2018-01-20T10:30:48Z'
          'amount': 1000
          'approved': true
          'response_code': '10000'
          'response_summary': 'Approved'
        - 'id': 'act_gefycn3jcvuupboxfmqrhk2aym'
          'type': 'Capture'
          'processed_on': '2018-01-17T10:30:48Z'
          'amount': 6540
          'approved': true
          'response_code': '10000'
          'response_summary': 'Approved'
          'processing':
            'acquirer_reference_number': '24021219099007452440793'
            'acquirer_transaction_id': '00745244079'
          'metadata':
            'shipping_ref': 'MQIBN2'
        - 'id': 'act_y3oqhf46pyzuxjbcn2giaqnb44'
          'type': 'Authorization'
          'processed_on': '2018-01-17T09:30:48Z'
          'amount': 6540
          'approved': true
          'auth_code': '643381'
          'response_code': '10000'
          'response_summary': 'Approved'
          'reference': 'ORD-5023-4E89'
          'processing':
            'retrieval_reference_number': '909913440644'
            'acquirer_transaction_id': '440644309099499894406'
    PaymentActionSummary:
      type: object
      required:
        - id
        - type
        - response_code
      properties:
        id:
          description: The unique identifier of the payment action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        type:
          type: string
          description: The type of action
          enum:
            - Authorization
            - Card Verification
            - Void
            - Capture
            - Refund
        response_code:
          type: string
          description: The Gateway response code
          example: '10000'
        response_summary:
          type: string
          description: The Gateway response summary
          example: 'Approved'
    PaymentDestination:
      type: object
      description: |
        A destination for OpenPay payments
      properties:
        id:
          type: string
          description: The OpenPay account identifier
          example: 'vendor-123456'
        amount:
          type: integer
          description: The amount to be credited to the destination in the major currency unit
          example: 10.50
      required:
        - id
        - amount
    PaymentDetails:
      type: object
      description: Payment response
      required:
        - id
        - requested_on
        - amount
        - currency
        - status
        - approved
        - _links
      properties:
        id:
          description: Payment unique identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        requested_on:
          description: The date/time the payment was requested
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        source:
          description: The source of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentDetailsResponseSource'
        destination:
          description: The destination of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseDestination'
        amount:
          type: integer
          description: The original payment amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        payment_type:
          type: string
          description: This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)
          enum:
            - Regular
            - Recurring
            - MOTO
            - Installment
          default: Regular
          example: Recurring
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        description:
          type: string
          description: A description of the payment
          example: Set of 3 masks
        approved:
          type: boolean
          description: Whether the payment was successful
          example: true
        expires_on:
          type: string
          description: The timestamp (ISO 8601 code) for when the authorization's validity period expires
        status:
          type: string
          description: The status of the payment
          enum:
            - Pending
            - Authorized
            - Card Verified
            - Voided
            - Partially Captured
            - Captured
            - Partially Refunded
            - Refunded
            - Declined
            - Canceled
            - Expired
            - Paid
          example: Authorized
        balances:
          type: object
          description: The payment balances
          allOf:
            - $ref: '#/components/schemas/PaymentResponseBalances'
        3ds:
          type: object
          description: Provides information relating to the processing of 3D Secure payments
          allOf:
            - $ref: '#/components/schemas/3dsData'
        risk:
          type: object
          description: Returns the payments risk assessment results
          properties:
            flagged:
              type: boolean
              description: Whether the payment was flagged by a risk check
              default: false
              example: true
        customer:
          type: object
          description: The customer to which this payment is linked
          properties:
            id:
              type: string
              pattern: "^(cus)_(\\w{26})$"
              description: The unique identifier of the customer. This can be passed as a source when making a payment
              example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
            email:
              type: string
              description: The customer's email address
              example: 'brucewayne@gmail.com'
            name:
              type: string
              description: The customer's name
              example: 'Bruce Wayne'
          required:
            - id
        billing_descriptor:
          $ref: '#/components/schemas/BillingDescriptor'
        shipping:
          type: object
          description: The payment shipping details
          properties:
            address:
              description: The shipping address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number associated with the shipping address
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        payment_ip:
          description:  The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses.
          allOf:
            - $ref: '#/components/schemas/IPAddress'
        sender:
          description: Information about the sender of the payment's funds
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentDetailsResponseSender'
        marketplace:
          $ref: '#/components/schemas/MarketplaceData'
        recipient:
          $ref: '#/components/schemas/PaymentRecipient'
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
        eci:
          type: string
          description: |
            The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. 
            Applicable for 3D Secure and network token payments
          example: '06'
        scheme_id:
          type: string
          description: |
            The scheme transaction identifier
          example: '488341541494658'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/PaymentActionSummary'
          description: |
            A summary of the payment's actions, 
            returned when a session ID is used to get the payment details
        _links:
          type: object
          description: The links related to the payment
          minItems: 2
          required:
            - self
            - actions
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
            actions:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to the payment's associated actions
            authorize:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to increment the authorization, where applicable
            void:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to void the payment, where applicable
            capture:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to capture the payment, where applicable
            refund:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to refund the payment, where applicable
          example:
            self:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44'
            actions:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions'
            authorize:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations'
            refund:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/refund'
    PaymentDetailsResponseSender:
      type: object
      description: Information about the sender of the payment's funds
      discriminator:
        propertyName: type
        mapping:
          individual: '#/components/schemas/01_PaymentResponseIndividualSender'
          corporate: '#/components/schemas/02_PaymentResponseCorporateSender'
          instrument: '#/components/schemas/03_PaymentResponseInstrumentSender'
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - individual
            - corporate
            - instrument
          description: The type of sender
          example: instrument
        reference:
          type: string
          description: The sender's reference for the payout
          example: '8285282045818'
    PaymentDetailsResponseSource:
      type: object
      description: Payment source
      
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/01_PaymentResponseCardSource'
          currency_account: '#/components/schemas/02_PaymentResponseCurrencyAccountSource'
      required:
        - type
      
      properties:
        type:
          type: string
          description: |
            The payment source type. For any payment request sources that result in a card token (token, source ID, etc.),
            this will be `card`
          example: 'card'
    PaymentId:
      type: string
      pattern: "^(pay)_(\\w{26})$"
      description: The payment identifier
      maxLength: 30
      minLength: 30
      example: 'pay_mbabizu24mvu3mela5njyhpit4'
    PaymentInstruction:
      type: object
      description: Details about the instruction for payouts to bank accounts
      properties:
        purpose:
          type: string
          description: An optional description of the payout purpose, for example `Insurance claim` or `Remittance`
          example: 'Remittance'
        charge_bearer:
          type: string
          description: Who should be charged the payout fee<br><i>Only required if making a payout using an international scheme<i>.
          enum:
            - OUR
            - SHA
        repair:
          type: boolean
          description: Determines whether the payout details can be modified to attempt to prevent a payout from being returned
        scheme:
          type: string
          description: The preferred payment scheme or network the bank transfer will be sent through
          enum:
            - swift
            - local
            - instant
        quote_id:
          type: string
          allOf:
            - $ref: '#/components/schemas/QuoteId'
          description: The FX quote identifier. If omitted, and the source and destination currencies differ, the current market exchange rate will be used
          minLength: 30
          maxLength: 30
          pattern: ^(qte)_[a-z2-7]{26}$
    PaymentInstructionResponse:
      type: object
      description: Instruction details for payouts to bank accounts.
      properties:
        value_date:
          description: The date (in ISO 8601 format) and time at which the recipient's account will be credited.
          type: string
          format: date-time
          example: 2020-06-12T22:27:42.512594Z
    PaymentRecipient:
      type: object
      description: Information about the recipient of the payment's funds. Relevant for [Account Funding Transactions](https://docs.checkout.com/four/payments/manage-payments/account-funding-transactions) and VISA or Mastercard [domestic UK transactions processed by financial institutions](https://docs.checkout.com/four/payments/regulation-support/requirements-for-financial-institutions).
      properties:
        dob:
          type: string
          format: date
          description: The recipient's date of birth (yyyy-mm-dd)
          maxLength: 10
          example: '1985-05-15'
        account_number:
          type: string
          description: The first six digits and the last four digits of the primary recipient's card, without spaces, or up to ten digits of the primary recipient's account number
          minLength: 10
          maxLength: 10
          example: '5555554444'
        zip:
          type: string
          description: The first part of the UK postcode (e.g., W1T 4TJ would be W1T)
          maxLength: 10
          example: 'W1T'
        first_name:
          type: string
          description: The recipient's first name
          maxLength: 50
          example: 'John'
        last_name:
          type: string
          description: The recipient's last name
          maxLength: 50
          example: 'Jones'
        country:
          type: string
          description: The country ([two-letter ISO country code](https://docs.checkout.com/four/resources/codes/country-codes)) of the recipient's address
          minLength: 2
          maxLength: 2
          example: 'GB'
    PaymentRequest:
      type: object
      required:
        - currency
      properties:
        source:
          $ref: '#/components/schemas/PaymentRequestSource'
        amount:
          type: integer
          description: |
            The payment amount. Omit the amount or provide a value of `0` to perform a card verification.       
      
            The amount must be provided in the <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="blank">minor currency unit</a>.
          minimum: 0
          example: 6540
        currency:
          type: string
          description: |
            The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="blank">ISO currency code</a>
          example: USD
          maxLength: 3
          minLength: 3
        payment_type:
          type: string
          description: This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)
          enum:
            - Regular
            - Recurring
            - MOTO
            - Installment
          default: Regular
          example: Recurring
        merchant_initiated:
          type: boolean
          description: Flags the payment as a merchant-initiated transaction (MIT). <a href="https://docs.checkout.com/four/payments/accept-payments/use-saved-details/about-stored-card-details" target="_blank">Must be set to `true` for all MITs</a>.
        reference:
          type: string
          description: A reference you can later use to identify this payment, such as an order number
          maxLength: 50
          example: 'ORD-5023-4E89'
        description:
          type: string
          description: A description of the payment
          maxLength: 100
          example: 'Set of 3 masks'
        authorization_type:
          type: string
          description: The authorization type
          enum:
            - Final
            - Estimated
          default: Final
          example: Estimated
        capture:
          type: boolean
          description: Whether to capture the payment (if applicable)
          default: true
          example: true
        capture_on:
          description: |
            A timestamp (ISO 8601 code) that determines when the payment should be captured.
            Providing this field will automatically set `capture` to true
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        customer:
          $ref: '#/components/schemas/CustomerRequest'
        billing_descriptor:
          $ref: '#/components/schemas/BillingDescriptor'
        shipping:
          type: object
          description: The shipping details
          properties:
            address:
              description: The shipping address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number associated with the shipping address
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        3ds:
          $ref: '#/components/schemas/3dsRequest'
        processing_channel_id:
          type: string
          pattern: "^(pc)_(\\w{26})$"
          description: The processing channel to be used for the payment
          example: 'pc_q4dbxom5jbgudnjzjpz7j2z6uq'
        previous_payment_id:
          type: string
          description: |
            For payments that use <a href="https://www.checkout.com/docs/four/payments/store-payment-details" target="blank">stored card details</a>, such as recurring payments –
            an existing payment identifier from the recurring series or the Scheme Transaction ID
          maxLength: 100
          example: 'pay_fun26akvvjjerahhctaq2uzhu4'
        risk:
          $ref: '#/components/schemas/RiskRequest'
        success_url:
          type: string
          format: uri
          description: For redirect payment methods, this overrides the default success redirect URL configured on your account
          maxLength: 1024
          example: 'http://example.com/payments/success'
        failure_url:
          type: string
          format: uri
          description: For redirect payment methods, this overrides the default failure redirect URL configured on your account
          maxLength: 1024
          example: 'http://example.com/payments/fail'
        payment_ip:
          description: The IP address used to make the payment. Used by our risk engine to check the customer's IP address – only accepts IPv4 addresses.
          allOf:
            - $ref: '#/components/schemas/IPAddress'
        sender:
          $ref: '#/components/schemas/PaymentRequestSender'
        recipient:
          $ref: '#/components/schemas/PaymentRecipient'
        marketplace:
          $ref: '#/components/schemas/MarketplaceData'
        processing:
          $ref: '#/components/schemas/ProcessingSettings'
        metadata:
          type: object
          description: Allows you to store additional information about a transaction with custom fields and up to five user-defined fields (`udf1` to `udf5`), which can be used for reporting purposes. `udf1` is also used for some of our risk rules. **Note** that this object only allows one level of depth, so cannot accept non-primitive data types such as objects or arrays.
          example:
            coupon_code: 'NY2018'
    PaymentRequestDestination:
      type: object
      description: The destination of the payout
      discriminator:
        propertyName: type
        mapping:
          id: '#/components/schemas/01_PaymentRequestIdDestination'
          bank_account: '#/components/schemas/02_PaymentBankAccountDestination'
      required:
        - type
      properties:
        type:
          type: string
          description: The payout destination type <br><i>The parameters for `bank_account` depend on the destination country and currency. <a href="https://www.checkout.com/docs/four/bank-payouts/payout-formatting" target="_blank">See our docs for details</a></i>.
          example: 'id'
    PaymentRequestSender:
      type: object
      description: Information about the sender of the payment's funds
      discriminator:
        propertyName: type
        mapping:
          individual: '#/components/schemas/01_PaymentRequestIndividualSender'
          corporate: '#/components/schemas/02_PaymentRequestCorporateSender'
          instrument: '#/components/schemas/03_PaymentRequestInstrumentSender'
      required:
        - type
        - reference
      properties:
        type:
          type: string
          enum:
            - individual
            - corporate
            - instrument
          description: TEST The type of sender
      
        reference:
          type: string
          description: The unique reference for the sender of the payout
    PaymentRequestSource:
      type: object
      description: The source of the payment
      discriminator:
        propertyName: type
        mapping:
          token: '#/components/schemas/01_PaymentRequestTokenSource'
          id: '#/components/schemas/02_PaymentRequestIdSource'
          card: '#/components/schemas/03_PaymentRequestCardSource'
          network_token: '#/components/schemas/04_PaymentRequestNetworkTokenSource'
      required:
        - type
      properties:
        type:
          type: string
          description: The payment source type <br> *Note:* *To make a payment with full card details, you must be <a href="https://www.checkout.com/docs/four/payments/regulation-support/pci-compliance" target="_blank">SAQ D PCI compliant</a>*
          example: 'card'
    PaymentResponse:
      type: object
      description: Payment Response
      required:
        - id
        - action_id
        - amount
        - currency
        - approved
        - status
        - response_code
        - processed_on
        - _links
      properties:
        id:
          description: The payment's unique identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        action_id:
          description: The unique identifier for the action performed against this payment
          allOf:
            - $ref: '#/components/schemas/ActionId'
        amount:
          type: integer
          description: The payment amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        approved:
          type: boolean
          description: Whether or not the authorization or capture was successful
          example: true
        status:
          type: string
          description: The status of the payment
          enum:
            - Authorized
            - Pending
            - Card Verified
            - Declined
          example: Authorized
        auth_code:
          type: string
          description: The acquirer authorization code if the payment was authorized
          example: '643381'
        response_code:
          type: string
          description: The Gateway response code
          example: '10000'
        response_summary:
          type: string
          description: The Gateway response summary
          example: 'Approved'
        expires_on:
          type: string
          description: The timestamp (ISO 8601 code) for when the authorization's validity period expires
        3ds:
          type: object
          description: Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure
          allOf:
            - $ref: '#/components/schemas/3dsEnrollmentData'
          example:
            downgraded: true
            enrolled: N
        risk:
          type: object
          description: Returns the payment's risk assessment results
          properties:
            flagged:
              type: boolean
              description: Whether or not the payment was flagged by a risk check
              default: false
              example: true
        source:
          description: The source of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseSource'
        #destination:
        #description: The destination of the payment
        #type: object
        #allOf:
        # - $ref: '#/components/schemas/PaymentResponseDestination'
        customer:
          type: object
          description: The customer associated with the payment, if provided in the request
          allOf:
            - $ref: '#/components/schemas/CustomerResponse'
        balances:
          type: object
          description: The payment balances
          allOf:
            - $ref: '#/components/schemas/PaymentResponseBalances'
        processed_on:
          description: The date/time the payment was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        processing:
          type: object
          description: Returns information related to the processing of the payment
          properties:
            retrieval_reference_number:
              type: string
              description: 'A unique identifier for the authorization that is submitted to the card scheme during processing'
              example: '909913440644'
            acquirer_transaction_id:
              type: string
              description: 'A unique identifier for the transaction generated by the acquirer'
              example: '440644309099499894406'
            recommendation_code:
              type: string
              description: 'A <a href="https://docs.checkout.com/four/resources/codes/recommendation-codes" target="blank">code</a> that represents the next recommended action for the payment'
              example: "02"
        eci:
          type: string
          description: The final Electronic Commerce Indicator (ECI) security level used to authorize the payment.
            Applicable for 3D Secure and network token payments
          example: '06'
        scheme_id:
          type: string
          description: The scheme transaction identifier
          example: '489341065491658'
        _links:
          type: object
          description: The links related to the payment
          minItems: 2
          required:
            - self
            - actions
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
            actions:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to the payment's associated actions
            authorize:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to increment the authorization, where applicable
            void:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to void the payment, where applicable
            capture:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to capture the payment, where applicable
            refund:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to refund the payment, where applicable
          example:
            self:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44'
            actions:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions'
            authorize:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations'
            void:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/voids'
            capture:
              href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/capture'
    PaymentResponseBalances:
      type: object
      description: The balances of the payment
      required:
        - id
      properties:
        total_authorized:
          type: integer
          description: The total amount that has been authorized
          example: 6540
        total_voided:
          type: integer
          description: The total amount that has been voided
          example: 0
        available_to_void:
          type: integer
          description: The total amount that is still available for voiding
          example: 6540
        total_captured:
          type: integer
          description: The total amount that has been captured
          example: 0
        available_to_capture:
          type: integer
          description: The total amount that is still available for capture
          example: 6540
        total_refunded:
          type: integer
          description: The total amount that has been refunded
          example: 0
        available_to_refund:
          type: integer
          description: The total amount that is still available for refund
          example: 0
    PaymentResponseDestination:
      type: object
      description: Payment destination
      discriminator:
        propertyName: type
        mapping:
          #card: '#/components/schemas/01_PaymentResponseCardDestination'
          bank_account: '#/components/schemas/02_PaymentResponseBankAccountDestination'
      required:
        - type
      properties:
        type:
          type: string
          description: |
            The payment destination type.
          example: 'card'
    PaymentResponseSource:
      type: object
      description: Payment source
      
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/01_PaymentResponseCardSource'
      required:
        - type
      
      properties:
        type:
          type: string
          description: |
            The payment source type. For any payment request sources that result in a card token (token, source ID, etc.),
            this will be `card`
          example: 'card'
    PayoutAcceptedResponse:
      type: object
      description: Payout accepted response
      properties:
        id:
          type: string
          description: The payout's unique identifier.
          pattern: "^(pay)_(\\w{26})$"
          maxLength: 30
          minLength: 30
          example: pay_dvxl6j6stpqufkzfgbaahmfrzm
        status:
          type: string
          description: The status of the payout.
          enum:
            - Pending
          example: Pending
        reference:
          type: string
          description: The payout reference.
          example: PO-215-5721
        instruction:
          allOf:
            - $ref: '#/components/schemas/PaymentInstructionResponse'
        _links:
          type: object
          description: The links related to the payout.
          properties:
            self:
              type: object
              description: The URI of the payout.
              properties:
                href:
                  type: string
                  description: The link URL.
                  example: https://api.sandbox.checkout.com/payments/pay_dvxl6j6stpqufkzfgbaahmfrzm
            actions:
              type: object
              description: The actions URI of the payout.
              properties:
                href:
                  type: string
                  description: The link URL.
                  example: https://api.sandbox.checkout.com/payments/pay_dvxl6j6stpqufkzfgbaahmfrzm/actions
    PayoutBillingDescriptor:
      type: object
      required: [reference]
      description: |
        The dynamic billing descriptor displayed on the recipient's bank account statement
      properties:
        reference:
          type: string
          description: |
            The reference that should be shown on the statement
    PayoutDetails:
      type: object
      description: Payment response
      properties:
        id:
          description: Payment unique identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        requested_on:
          description: The date/time the payment was requested
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        source:
          description: The source of the payout
          type: object
          properties:
            id:
              type: string
              description: The payment source identifier, which can be used for subsequent payments
              example: ca_y3oqhf46pyzuxjbcn2giaqnb44
            type:
              type: string
              description: The payment source type. This is always `currency_account` for payouts.
              example: currency_account
        destination:
          description: The destination of the payout
          type: object
          properties:
            type:
              type: string
              description: The payout destination type
              example: bank_account
            id:
              type: string
              description: The payment instrument identifier
              example: src_4pakgjwmv5re5m5ivqohsqpxnm
        amount:
          type: integer
          description: The original payout amount
          example: 1000
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the payment
          example: GBP
          maxLength: 3
          minLength: 3
        reference:
          type: string
          description: Your reference for the payout
          example: PO-215-5721
        billing_descriptor:
          type: object
          description: Details about the billing descriptor
          properties:
            reference:
              type: string
              description: The reference that is displayed on the account holder's statement
              example: Withdrawal
        status:
          type: string
          description: The status of the payout
          enum:
            - Pending
            - Paid
            - Declined
            - Returned
          example: Pending
        approved:
          type: boolean
          description: Whether the authorization was successful
          example: true
        sender:
          description: Information about the sender of the payment's funds
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentDetailsResponseSender'
        instruction:
          description: Details about the instruction for payouts to bank accounts <br><i>The fields will depend on which ones were included in the request</i>.
          type: object
          properties:
            value_date:
              type: string
              description: The date (in ISO 8601 format) on which the recipient's account will be credited
            purpose:
              type: string
              description: An optional description of the payout purpose, like `Insurance_claim` or `Remittance`
            charge_bearer:
              type: string
              description: Who should be charged the payout fee
              enum:
                - OUR
                - SHA
            repair:
              type: boolean
              description: Determines whether the payout details cna be modified to attempt to prevent a payout from being returned
            scheme:
              type: string
              description: The preferred payment scheme or network the bank transfer will be sent through
              enum:
                - swift
                - local
                - instant
            quote_id:
              type: string
              description: The FX quote identifier
          example:
            value_date: '2020-06-13T01:49:19.1864428Z'
            purpose: Wallet Withdrawal
            quote_id: qte_xrhaw53z5m6ehbbxz2n6n5lk74
        _links:
          type: object
          description: Links related to the payouts
          properties:
            self:
              type: object
              description: The direct link to the payout
              properties:
                href:
                  type: string
                  description: The link URL
                  example: https://api.sandbox.checkout.com/payments/pay_gwlowf7eap7uzm4cyaaqoq62au
            actions:
              type: object
              description: The link to the list of actions related to the payout
              properties:
                href:
                  type: string
                  description: The link URL
                  example: https://api.sandbox.checkout.com/payments/pay_gwlowf7eap7uzm4cyaaqoq62au/actions
    PayoutRequest:
      type: object
      required:
        - source
        - destination
        - amount
        - currency
        - billing_descriptor
        - processing_channel_id
      properties:
        source:
          $ref: '#/components/schemas/PayoutRequestSource'
        destination:
          $ref: '#/components/schemas/PaymentRequestDestination'
        amount:
          type: integer
          description: The amount you want to pay out to the destination account. The exact format <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="_blank">depends on the currency</a>. <br><i>You must specify <b>either</b> `amount` <b>or</b> `source.amount`.</i>
          minimum: 0
          example: 6540
        currency:
          type: string
          description: |
            The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="blank">ISO code</a> of the destination currency <br><i>The currency should match that of the destination account</i>.
          example: USD
          maxLength: 3
          minLength: 3
        reference:
          type: string
          description: An internal reference you can later use to identify this payout
          example: 'Withdrawal'
        billing_descriptor:
          $ref: '#/components/schemas/PayoutBillingDescriptor'
        sender:
          $ref: '#/components/schemas/PayoutSender'
        instruction:
          $ref: '#/components/schemas/PaymentInstruction'
        processing_channel_id:
          type: string
          pattern: "^(pc)_(\\w{26})$"
          description: The processing channel identifier
    PayoutRequestSource:
      type: object
      description: The source of the payout
      discriminator:
        propertyName: type
        mapping:
          currency_account: '#/components/schemas/05_PaymentRequestCurrencyAccountSource'
      required:
        - type
        - amount
      properties:
        amount:
          type: integer
          description: The amount you want to pay out from your currency account. The exact format <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="_blank">depends on the currency</a>. <br><i>You must specify <b>either</b> `source.amount` <b>or</b> `amount`.</i>
        type:
          type: string
          description: The payout source type
          example: 'currency_account'
    PayoutSender:
      type: object
      description: Details about the sender of the payout's funds. **This object is only required if the sender is different from the client entity.**
      discriminator:
        propertyName: type
        mapping:
          individual: '#/components/schemas/01_PaymentRequestIndividualSender'
          corporate: '#/components/schemas/02_PaymentRequestCorporateSender'
          instrument: '#/components/schemas/03_PaymentRequestInstrumentSender'
      properties:
        type:
          type: string
          enum:
            - individual
            - corporate
            - instrument
          description: The type of sender. If set to `instrument`, the sender information (name and address) will be retrieved from the payment instrument. This is for the cases where the sender and recipient are the same entity. The only field that needs to be provided is the sender reference to uniquely identify the sender.
        reference:
          type: string
          description: The unique reference for the sender.
    ProcessingSettings:
      type: object
      description: Use the processing object to influence or override the data sent during card processing
      properties:
        # mid:
        #   type: string
        #   description: Overrides the default merchant/acceptor identifier (MID) configured on your account
        #   example: "1234567"
        # senderInformation:
        #   type: object
        #   description: |
        #     Allows you to send additional data required for Visa Direct Original Credit Transaction (OCT) and Mastercard Moneysend payments.
        aft:
          type: boolean
          description: Indicates whether the payment is an [Account Funding Transaction](https://docs.checkout.com/four/payments/manage-payments/account-funding-transactions)
        # dlocal:
        #   type: object
        #   description: Processing information required for dLocal payments.
        #   properties:
        #     country:
        #       type: string
        #       description: The two-letter ISO code of the cardholder's country.
        #       example: "MX"
        #     payer:
        #       type: object
        #       description: Details about the cardholder.
        #       properties:
        #         document:
        #           type: string
        #           description: The cardholder's personal identification number. The identification required is country-specific. See the <a href="https://docs.dlocal.com/api-documentation/payins-api-reference/country-reference#documents" target="_blank">dLocal documentation</a> for more information.
        #           example: "DocumentId"
        #         name:
        #           type: string
        #           description: The cardholder's full name.
        #           example: "John Doe"
        #         email:
        #           type: string
        #           description: The cardholder's email address.
        #           example: "john.doe@example.com"
        #     installments:
        #       type: object
        #       description: Details about the installments.
        #       properties:
        #         count:
        #           type: string
        #           description: The number of payments to be made in the installment plan.
        #           example: "3"
    RefundAcceptedResponse:
      type: object
      description: Refund response
      required:
        - action_id
      properties:
        action_id:
          description: The unique identifier for the refund action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        reference:
          type: string
          description: Your reference for the refund request
          example: ORD-5023-4E89
        _links:
          type: object
          description: The links related to the refund
          readOnly: true
          minItems: 2
          properties:
            payment:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment to be refunded. Use this to check the status of the payment
              example:
                href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44'
          required:
            - payment
    RefundRequest:
      type: object
      properties:
        amount:
          type: integer
          description: |
            The amount to refund. If not specified, the full payment amount will be refunded
          minimum: 0
          example: 6540
        reference:
          type: string
          description: A reference you can later use to identify this refund request
          maxLength: 50
          example: 'ORD-5023-4E89'
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to the refund request. It can be useful for storing additional information in a structured format. **Note** that this object only allows one level of depth, so cannot accept non-primitive data types such as objects or arrays.
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
    01_PaymentRequestIdDestination:
      type: object
      description: An existing payment instrument
      required:
        - id
      allOf:
        - $ref: '#/components/schemas/PaymentRequestDestination'
        - type: object
          properties:
            id:
              type: string
              description: The payment instrument identifier
              example: src_wmlfc3zyhqzehihu7giusaaawu
    02_PaymentBankAccountDestination:
      type: object
      description: An existing payment instrument
      required:
        - country
      allOf:
        - $ref: '#/components/schemas/PaymentRequestDestination'
        - type: object
          properties:
            account_type:
              description: The type of account
              type: string
              enum:
                - savings
                - current
                - cash
              example: savings
      
            account_number:
              description: Number (which can contain letters) that identifies the account
              type: string
              example: '13654567455'
      
            bank_code:
              description: Code that identifies the bank
              type: string
              example: 123-456
      
            branch_code:
              description: Code that identifies the bank branch
              type: string
              example: '6443'
      
            iban:
              description: Internationally agreed standard for identifying bank account
              type: string
              example: HU93116000060000000012345676
      
            bban:
              description: The combination of bank code and/or branch code and account number
              type: string
              example: 3704 0044 0532 0130 00
      
            swift_bic:
              description: 8 or 11 character code which identifies the bank or bank branch
              type: string
              example: '37040044'
      
            country:
              description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of where the account is based
              type: string
              example: GB
      
            account_holder:
              $ref: '#/components/schemas/AccountHolder'
      
            bank:
              $ref: '#/components/schemas/BankDetails'
    01_PaymentRequestIndividualSender:
      type: object
      description: Store a previously tokenized instrument
      allOf:
        - $ref: '#/components/schemas/PaymentRequestSender'
      required:
        - type
        - first_name
        - last_name
        - address
      properties:
        type:
          type: string
          description: The sender type. If set to `instrument`, the sender information (name and address) will be retrieved from the payment instrument.
        first_name:
          type: string
          description: The sender's first name
          example: 'John'
        last_name:
          type: string
          description: The sender's last name
          example: 'Jones'
        address:
          description: The sender's address
          allOf:
            - $ref: '#/components/schemas/Address'
        identification:
          type: object
          properties:
            type:
              type: string
              description: The type of identification used to identify the sender
              enum:
                - passport
                - driving_licence
                - national_id
              example: driving_licence
            number:
              type: string
              description: The identification number
              example: 1234
            issuing_country:
              type: string
              description: The two-letter ISO country code of the country that issued the identification
              example: GT
    02_PaymentRequestCorporateSender:
      type: object
      description: Store a previously tokenized instrument
      allOf:
        - $ref: '#/components/schemas/PaymentRequestSender'
      required:
        - type
        - company_name
        - address
      properties:
        type:
          type: string
          description: The sender type. If set to `instrument`, the sender information (name and address) will be retrieved from the payment instrument.
        company_name:
          type: string
          description: The sender's company name
        address:
          description: The sender's address
          allOf:
            - $ref: '#/components/schemas/Address'
    03_PaymentRequestInstrumentSender:
      type: object
      description: Store a previously tokenized instrument
      allOf:
        - $ref: '#/components/schemas/PaymentRequestSender'
      required:
        - type
      properties:
        type:
          type: string
          description: The sender type. If set to `instrument`, the sender information (name and address) will be retrieved from the payment instrument.
    01_PaymentRequestTokenSource:
      type: object
      description: A token payment source
      required:
        - token
      allOf:
        - $ref: '#/components/schemas/PaymentRequestSource'
        - type: object
          properties:
            token:
              type: string
              pattern: "^(tok)_(\\w{26})$"
              description: The Checkout.com token (e.g., a card token)
              example: tok_ubfj2q76miwundwlk72vxt2i7q
            billing_address:
              description: The customer's billing address. This will override the billing address specified during tokenization
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The customer's phone number. This will override the phone number specified during tokenization
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    02_PaymentRequestIdSource:
      type: object
      description: An existing payment source
      required:
        - id
      allOf:
        - $ref: '#/components/schemas/PaymentRequestSource'
        - type: object
          properties:
            id:
              type: string
              pattern: "^(src)_(\\w{26})$"
              description: The payment source identifer (e.g., a card source identifier)
              example: src_wmlfc3zyhqzehihu7giusaaawu
            cvv:
              type: string
              description: The card verification value/code (for card sources). 3 digits, except for Amex (4 digits)
              example: '956'
              minLength: 3
              maxLength: 4
    03_PaymentRequestCardSource:
      type: object
      description: A card payment source
      allOf:
        - $ref: '#/components/schemas/PaymentRequestSource'
        - type: object
          required:
            - type
            - number
            - expiry_month
            - expiry_year
          properties:
            number:
              type: string
              description: The card number (without separators)
              example: '4543474002249996'
            expiry_month:
              type: integer
              description: The expiry month of the card
              minimum: 1
              minLength: 1
              maxLength: 2
              example: 6
            expiry_year:
              type: integer
              description: The expiry year of the card
              minLength: 4
              maxLength: 4
              example: 2025
            name:
              type: string
              description: The name of the cardholder
              example: 'Bruce Wayne'
            cvv:
              type: string
              description: The card verification value/code. 3 digits, except for Amex (4 digits)
              example: '956'
              minLength: 3
              maxLength: 4
            stored:
              type: boolean
              description: This must be set to `true` for payments that use <a href="https://www.checkout.com/docs/four/payments/store-payment-details" target="blank">stored card details</a>
              default: false
              example: true
            billing_address:
              description: The billing address of the cardholder
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number of the cardholder
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    04_PaymentRequestNetworkTokenSource:
      type: object
      description: A network token payment source
      allOf:
        - $ref: '#/components/schemas/PaymentRequestSource'
        - type: object
          required:
            - type
            - token
            - expiry_month
            - expiry_year
            - token_type
            - cryptogram
            - eci
          properties:
            token:
              type: string
              description: The network token PAN
              example: '4543474002249996'
            expiry_month:
              type: integer
              description: The expiry month of the token
              minimum: 1
              example: 6
              minLength: 1
              maxLength: 2
            expiry_year:
              type: integer
              description: The expiry year of the token
              example: 2025
              minLength: 4
              maxLength: 4
            token_type:
              type: string
              description: The type of token
              enum:
                - vts
                - mdes
                - applepay
                - googlepay
            cryptogram:
              type: string
              description: The Base64 encoded cryptographic identifier (TAVV) used by card schemes to validate the token verification result. Optional if `previous_payment_id` is specified and `3ds.enabled` is false
              maxLength: 50
              example: hv8mUFzPzRZoCAAAAAEQBDMAAAA=
            eci:
              type: string
              description: |
                The Electronic Commerce Indicator (ECI) security level associated with the token. Optional if `previous_payment_id` is specified and `3ds.enabled` is false
              maxLength: 2
              example: '05'
            stored:
              type: boolean
              description: This must be set to `true` for payments that use <a href="https://www.checkout.com/docs/four/payments/store-payment-details" target="blank">stored card details</a>
              default: false
              example: true
            name:
              type: string
              description: The customer's name
              example: 'Bruce Wayne'
            cvv:
              type: string
              description: The card verification value/code. 3 digits, except for Amex (4 digits)
              example: '956'
              minLength: 3
              maxLength: 4
            billing_address:
              description: The customer's billing address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The customer's phone number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    05_PaymentRequestCurrencyAccountSource:
      type: object
      description: A currency account source
      required:
        - id
      allOf:
        - $ref: '#/components/schemas/PayoutRequestSource'
        - type: object
          properties:
            id:
              type: string
              pattern: "^(ca)_(\\w{26})$"
              description: The ID of the currency account to be debited <br><i>The source currency is inferred from the currency account</i>.
              example: ca_y3oqhf46pyzuxjbcn2giaqnb44
    02_PaymentResponseBankAccountDestination:
      type: object
      description: A bank account payment destination
      allOf:
        - $ref: '#/components/schemas/PaymentResponseDestination'
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              description: The payment instrument identifier
              pattern: ^(src)_(\w{26})$
    01_PaymentResponseIndividualSender:
      type: object
      description: Store a previously tokenized instrument
      allOf:
        - $ref: '#/components/schemas/PaymentDetailsResponseSender'
      required:
        - type
        - first_name
        - last_name
        - address
      properties:
        type:
          type: string
          description: The sender type
        first_name:
          type: string
          description: The sender's first name
          example: 'John'
        last_name:
          type: string
          description: The sender's last name
          example: 'Jones'
        address:
          description: The sender's address
          allOf:
            - $ref: '#/components/schemas/Address'
    02_PaymentResponseCorporateSender:
      type: object
      description: Store a previously tokenized instrument
      allOf:
        - $ref: '#/components/schemas/PaymentDetailsResponseSender'
      required:
        - type
        - company_name
      properties:
        type:
          type: string
          description: The sender type
        company_name:
          type: string
          description: The sender's company name
        address:
          description: The sender's address
          allOf:
            - $ref: '#/components/schemas/Address'
    03_PaymentResponseInstrumentSender:
      type: object
      description: Store a previously tokenized instrument
      allOf:
        - $ref: '#/components/schemas/PaymentDetailsResponseSender'
      required:
        - type
      properties:
        type:
          type: string
          description: The sender type
    01_PaymentResponseCardSource:
      type: object
      description: A card payment source
      allOf:
        - $ref: '#/components/schemas/PaymentResponseSource'
        - type: object
          required:
            - expiry_month
            - expiry_year
            - last4
            - fingerprint
            - bin
          properties:
            id:
              type: string
              description: The payment source identifier that can be used for subsequent payments. For new sources, this will only be returned if the payment was approved
              example: 'src_nwd3m4in3hkuddfpjsaevunhdy'
            billing_address:
              description: The payment source owner's billing address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The payment source owner's phone number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
            expiry_month:
              type: integer
              description: The expiry month
              minimum: 1
              minLength: 1
              maxLength: 2
              example: 6
            expiry_year:
              type: integer
              description: The expiry year
              minLength: 4
              maxLength: 4
              example: 2025
            name:
              type: string
              description: The cardholder's name
              example: 'Bruce Wayne'
            scheme:
              type: string
              description: The card scheme
              example: 'VISA'
            last4:
              type: string
              description: The last four digits of the card number
              example: '9996'
            fingerprint:
              type: string
              description: Uniquely identifies this particular card number. You can use this to compare cards across customers.
              example: 'F639CAB2745BEE4140BF86DF6B6D6'
            bin:
              type: string
              description: The card issuer's Bank Identification Number (BIN)
              maxLength: 6
              example: '454347'
            card_type:
              type: string
              description: The card type
              enum:
                - Credit
                - Debit
                - Prepaid
                - Charge
                - Deferred Debit
              example: Credit
            card_category:
              type: string
              description: The card category
              enum:
                - Consumer
                - Commercial
              example: Consumer
            issuer:
              type: string
              description: The name of the card issuer
              example: 'GOTHAM STATE BANK'
            issuer_country:
              type: string
              maxLength: 2
              minLength: 2
              description: The card issuer's country (<a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">two-letter ISO code</a>)
              example: 'US'
            product_id:
              type: string
              description: The issuer/card scheme product identifier
              example: 'F'
            product_type:
              type: string
              description: The issuer/card scheme product type
              example: CLASSIC
            avs_check:
              type: string
              description: The Address Verification System check result
              example: S
            cvv_check:
              type: string
              description: The card verification value (CVV) check result
              example: Y
            payouts:
              type: boolean
              description: Whether the card supports payouts
              example: true
            fast_funds:
              type: string
              description: The fast funds eligibility of the card
              example: d
            payment_account_reference:
              type: string
              description: A unique reference to the underlying card for network tokens (e.g., Apple Pay, Google Pay)
              example: 'EUNIX9AX7THOOJIEJ2AP6OOFAHGH4'
    02_PaymentResponseCurrencyAccountSource:
      type: object
      description: A currency account source
      allOf:
        - $ref: '#/components/schemas/PaymentResponseSource'
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              description: The ID of the currency account
              pattern: ^(ca)_(\w{26})$
            amount:
              type: integer
              description: If specified, indicates the amount in the source currency to be paid out. If omitted, the root amount in the destination currency will be used.<br>The amount must be provided in the minor currency unit.
    RiskRequest:
      type: object
      description: Configures the risk assessment performed during the processing of the payment
      required:
        - enabled
      properties:
        enabled:
          type: boolean
          description: Whether a risk assessment should be performed
          default: true
          example: false
    VoidAcceptedResponse:
      type: object
      description: Void response
      required:
        - action_id
      properties:
        action_id:
          description: The unique identifier for the void action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        reference:
          type: string
          description: Your reference for the void request
          example: 'ORD-5023-4E89'
        _links:
          type: object
          description: The links related to the void
          readOnly: true
          minItems: 2
          properties:
            payment:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44'
          required:
            - payment
    VoidRequest:
      type: object
      properties:
        reference:
          type: string
          description: A reference you can later use to identify this void request
          maxLength: 50
          example: 'ORD-5023-4E89'
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to the void request. It can be useful for storing additional information in a structured format. **Note** that this object only allows one level of depth, so cannot accept non-primitive data types such as objects or arrays.
          example:
            coupon_code: 'NY2018'
            partner_id: 123989
    VoidResponse:
      type: object
      description: Payment response
      required:
        - id
        - action_id
        - amount
        - currency
        - status
        - response_code
        - processed_on
        - _links
      properties:
        id:
          description: The unique payment identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        action_id:
          description: The unique identifier for the void action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        amount:
          type: integer
          description: The void amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://www.checkout.com/docs/four/resources/codes/currency-codes" target="blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        status:
          type: string
          description: The status of the payment
          example: 'Voided'
        response_code:
          type: string
          description: The Gateway response code
          example: '10000'
        response_summary:
          type: string
          description: The Gateway response summary
          example: 'Approved'
        processed_on:
          description: The date/time the void was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        reference:
          type: string
          description: Your reference for the void request
          example: ORD-5023-4E89
        _links:
          type: object
          description: The links related to the payment
          minItems: 1
          properties:
            payment:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
              example:
                href: 'https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44'
          required:
            - payment
    PhoneNumber:
      type: object
      description: A phone number
      properties:
        country_code:
          type: string
          description: The international <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">country calling code</a>
          minLength: 1
          maxLength: 7
          example: '+1'
        number:
          type: string
          description: The phone number
          minLength: 6
          maxLength: 25
          example: 415 555 2671
    ResourceId:
      type: string
      description: The resource ID. Defaults to UUID v4
      maxLength: 50
      example: '4f6cf35x-2c4y-483z-a0a9-158621f77a21'
    AuthenticationResult:
      type: object
      properties: 
        attempted:
          type: boolean
          description: Authentication was initiated between the issuer and cardholder
          example: true
        challenged:
          type: boolean
          description: The customer was asked to enter a password or biometric authentication
          example: true
        succeeded:
          type: boolean
          description: Did the customer succeed authentication
          example: true
        liability_shifted:
          type: boolean
          description: Was liability shifted
          example: true
        method:
          type: string
          description: Authentication method
          example: 3ds
        version: 
          type: string
          description: The authentication method version
          example: "2.0"
    AuthorizationResult:
      type: object
      properties:
        avs_code: 
          type: string
          example: V
        cvv_result:
          type: string
          example: N
    Customer:
      type: object
      description: The customer making the payment
      properties:
        name:
          type: string
          description: "The full name of the customer"
          example: "John Doe"
        email:
          type: string
          description: "The customer's email address"
          example: "john.doe@checkout.com"
    Device:
      type: object
      properties:
        ip:
          description: The IP V4 address used to make the payment
          allOf:
            - $ref: '#/components/schemas/IPAddress'
        location:
          description: The physical location of the request source
          allOf:
            - $ref: '#/components/schemas/Location'
        os:
          description: The device's operating system
          type: string
          example: ISO
        type: 
          description: The type of device
          type: string
          example: Phone
        model: 
          description: The device model
          type: string
          example: iPhone X
        date:
          description: The device's date in UTC as an ISO 8601 timestamp.
          allOf: 
            - $ref: '#/components/schemas/Timestamp'
        user_agent: 
          description: The device's user-agent
          type: string 
          example: Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1
        fingerprint: 
          description: The device fingerprint
          type: string
          example: 34304a9e3fg09302
    GetRiskAssessmentsResponse:
      type: object
      properties:
        assessment_id:
          type: string
          description: The correlation id across scans for a given transaction
          example: "ras_c4oqhf46pyzuxjbcn2giaqnb44"
        pre_authentication:
          type: object
          $ref: '#/components/schemas/PreAuthenticationDetails'
        pre_capture:
          type: object
          $ref: '#/components/schemas/PreCaptureDetails'
    Location:
      type: object
      properties:
        latitude:
          description: The latitude of the device location
          type: number
          example: 51.5107
        longitude:
          description: The longitude of the device location
          type: number
          example: 0.1313
    Metadata:
      type: object
      description: Allows you to attach additional information to the assessment in key-value pairs. You can reference these properties in your custom risk rules.
      additionalProperties:
        type: string
      example:
        VoucherCode: "loyalty_10"
        discountApplied: "10"
        customer_id: "2190EF321"
    PreAuthenticationAssessmentRequest:
      type: object
      properties:
        date:
          description: An ISO 8601 timestamp of the date of the original payment attempt
          allOf: 
            - $ref: '#/components/schemas/Timestamp'
        source: 
          $ref: '#/components/schemas/RiskPaymentRequestSource'
        customer:
          $ref: '#/components/schemas/Customer'
        payment:
          $ref: '#/components/schemas/RiskPayment'
        shipping:
          description: The shipping details
          allOf:
            - $ref: '#/components/schemas/RiskShippingDetails'
        reference:
          type: string
          description: A reference you can later use to identify this assessment, such as an order number.
          maxLength: 50
          example: "ORD-1011-87AH"
        description:
          type: string
          description: A description of the order
          maxLength: 100
          example: "Set of 3 masks"
        amount:
          type: integer
          description: |
            The payment amount.
            The exact format <a href="https://docs.checkout.com/resources/calculating-the-value" target="blank">depends on the currency</a>.
          minimum: 0
          example: 6540
        currency:
          type: string
          description: |
            The three-letter <a href="https://docs.checkout.com/resources/codes/currency-codes" target="blank">ISO currency code</a>
          example: GBP
          maxLength: 3
          minLength: 3
        device:
          description: Device data
          allOf:
            - $ref: '#/components/schemas/Device'
        metadata:
          $ref: '#/components/schemas/Metadata'
    PreAuthenticationAssessmentResponse:
      type: object
      description: Pre-Authentication Response
      required:
        - assessment_id
        - result
      properties:
        assessment_id:
          type: string
          description: The correlation ID across scans for a given transaction
          example: "ras_c4oqhf46pyzuxjbcn2giaqnb44"
        score: 
          type: integer
          description: The risk score calculated by Checkout. Absent if not enough data provided.
          example: 22
          minimum: 0
          maximum: 100
        result:
          description: The scan result based on your defined pre-authentication risk settings
          allOf:
            - $ref: '#/components/schemas/PreAuthenticationResult'
        warning:
          description: Present when our risk settings are more restrictive
          allOf:
            - $ref: '#/components/schemas/PreAuthenticationWarning'
        _links:
          type: object
          properties:
            self:
              description: The URL of the assessment
              properties:
                href:
                  type: string
                  description: The link URL
                  example: "https://api.checkout.com/risk/assessments/{assessment_id}"
            pre-capture:
              description: A link to perform a pre-capture assessment using the same context. Absent if no pre-capture risk settings configured.
              properties:
                href:
                  type: string 
                  description: The link URL
                  example: "https://api.checkout.com/risk/assessments/{assessment_id}/pre-capture"
    PreAuthenticationDetails:
      type: object
      description: Details of the pre-authentication response
      required:
        - result
      properties:
        score: 
          type: integer
          description: The risk score calculated by Checkout. Absent if not enough data provided.
          example: 22
          minimum: 0
          maximum: 100
        result:
          description: The scan result based on your defined pre-authentication risk settings
          allOf:
            - $ref: '#/components/schemas/PreAuthenticationResult'
        warning:
          description: Present when our risk settings are more restrictive
          allOf:
            - $ref: '#/components/schemas/PreAuthenticationWarning'
    PreAuthenticationResult:
      type: object 
      required: 
        - decision
      description: The assessment result
      properties: 
        decision:
          type: string
          description: The recommended action based on the assessment
          enum: 
          - try_exemptions
          - try_frictionless
          - no_preference
          - force_challenge
          - decline
          example: try_frictionless
        details:
          description: The reasons for the decision
          type: string
          example: "low_value_item_rule"
    PreAuthenticationWarning:
      type: object 
      required: 
        - decision
        - reasons
      properties: 
        decision:
          type: string
          description: The recommended action based on our more restrictive risk settings
          enum: 
          - try_exemptions
          - try_frictionless
          - no_preference
          - force_challenge
          - decline
          example: decline
        reasons:
          description: The reasons for the decision
          type: array
          items:
            type: string
          example: [decline_list_email, decline_list_shipping]
    PreCaptureAssessmentRequest:
      type: object
      properties:
        assessment_id:
          type: string
          pattern: "^(ras)_(\\w{26})$"
          description: The risk assessment identifier returned in the /pre-authentication response
        date:
          description: An ISO 8601 timestamp of the date of the original payment attempt
          allOf: 
            - $ref: '#/components/schemas/Timestamp'
        source: 
          $ref: '#/components/schemas/RiskPaymentRequestSource'
        customer:
          $ref: '#/components/schemas/Customer'
        amount:
          type: integer
          description: |
            The payment amount.
            The exact format <a href="https://docs.checkout.com/resources/calculating-the-value" target="blank">depends on the currency</a>.
          minimum: 0
          example: 6540
        currency:
          type: string
          description: |
            The three-letter <a href="https://docs.checkout.com/resources/codes/currency-codes" target="blank">ISO currency code</a>
          example: GBP
          maxLength: 3
          minLength: 3
        payment:
          $ref: '#/components/schemas/RiskPayment'
        shipping:
          description: The shipping details
          allOf:
            - $ref: '#/components/schemas/RiskShippingDetails'
        device:
          description: Device data
          allOf:
            - $ref: '#/components/schemas/Device'
        metadata:
          $ref: '#/components/schemas/Metadata'
        authentication_result: 
          $ref: '#/components/schemas/AuthenticationResult'
        authorization_result: 
          $ref: '#/components/schemas/AuthorizationResult'
    PreCaptureAssessmentResponse:
      type: object
      description: Pre-Capture Response
      required:
        - assessment_id
        - result
      properties:
        assessment_id:
          type: string
          description: The correlation ID across scans for a given transaction
          example: "ras_c4oqhf46pyzuxjbcn2giaqnb44"
        result:
          description: The scan result based on your pre-capture risk settings
          allOf:
            - $ref: '#/components/schemas/PreCaptureResult'
        warning:
          description: Present when our risk settings are more restrictive
          allOf:
            - $ref: '#/components/schemas/PreCaptureWarning'
        _links:
          type: object
          properties:
            self:
              description: The URL of the assessment
              properties:
                href:
                  type: string
                  description: The link URL
                  example: "https://api.checkout.com/risk/assessments/{assessment_id}"
    PreCaptureDetails:
      type: object 
      description: Details of the pre-capture response
      required:
        - result
      properties:
        score: 
          type: integer
          description: The risk score calculated by Checkout. Absent if not enough data provided.
          example: 22
          minimum: 0
          maximum: 100
        result:
          description: The scan result based on your defined pre-capture risk settings
          allOf:
            - $ref: '#/components/schemas/PreCaptureResult'
        warning:
          description: Present when Checkout scan is more restrictive
          allOf:
            - $ref: '#/components/schemas/PreCaptureWarning'
    PreCaptureResult:
      type: object 
      required: 
        - decision
      description: The assessment result
      properties: 
        decision:
          type: string
          description: The recommended action based on the assessment
          enum: 
          - capture
          - flag
          - void
          example: capture
        details:
          description: The reasons for the decision
          type: string
          example: "risk_profile_1"
    PreCaptureWarning:
      type: object 
      required: 
        - decision
        - reasons
      properties: 
        decision:
          type: string
          description: The recommended action based on our more restrictive risk settings
          enum: 
          - capture
          - void
          - flag
          example: capture
        reasons:
          description: The reasons for the decision
          type: array
          items:
            type: string
          example: [rule_low_risk_postal_address]
    CardSourcePrism:
      type: object
      description: A card payment source
      allOf:
        - $ref: "#/components/schemas/RiskPaymentRequestSource"
        - type: object
          required:
            - type
            - number
            - expiry_month
            - expiry_year
          properties:
            number:
              type: string
              description: The card number (without separators)
              maxLength: 19
              example: "4543474002249996"
            expiry_month:
              type: integer
              description: The expiry month of the card
              minimum: 1
              minLength: 1
              maxLength: 2
              example: 6
            expiry_year:
              type: integer
              description: The expiry year of the card
              minLength: 4
              maxLength: 4
              example: 2025
            name:
              type: string
              description: The name of the cardholder
              maxLength: 255
              example: "Bruce Wayne"
            billing_address:
              description: The billing address of the cardholder
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number of the cardholder
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    CustomerSourcePrism:
      type: object
      description: A customer source
      required:
        - id
      allOf:
        - $ref: "#/components/schemas/RiskPaymentRequestSource"
        - type: object
          properties:
            id:
              type: string
              pattern: "^(cus)_(\\w{26})$"
              description: The customer's identifier.
              example: "cus_y3oqhf46pyzuxjbcn2giaqnb44"
            # email:
            #   type: string
            #   format: email
            #   description: The customer's email address. Required if `id` is not provided
            #   maxLength: 255
            #   example: "brucewayne@gmail.com"
      
    IdSourcePrism:
      type: object
      description: An existing payment source
      required:
        - id
      allOf:
        - $ref: "#/components/schemas/RiskPaymentRequestSource"
        - type: object
          properties:
            id:
              type: string
              pattern: "^(src)_(\\w{26})$"
              description: The payment source identifer (e.g., a card source identifier)
              example: src_wmlfc3zyhqzehihu7giusaaawu
            cvv:
              type: string
              description: The card verification value/code (for card sources). 3 digits, except for Amex (4 digits)
              example: "956"
              minLength: 3
              maxLength: 4
    RiskCardInfo:
      type: object
      required:
        - type
      description: The details of the card being used
      properties:
        cardholder_name:
          type: string
          description: The cardholder name provided
          example: Mrs Jane Doe
        bin:
          type: string
          description: The card issuer's Bank Identification Number (BIN)
          maxLength: 6
          example: "454540"
        expiry_month:
          type: integer
          description: The expiry month
          minimum: 1
          example: 6
          maxLength: 2
        expiry_year:
          type: integer
          description: The expiry year
          example: 2025
          minLength: 4
          maxLength: 4
        last4:
          type: string
          description: The last four digits of the card number
          example: "9996"
          minLength: 4
          maxLength: 4
        scheme:
          type: string
          enum: 
          - Mastercard
          - Visa
          description: The card scheme
          example: VISA
        card_type:
          type: string
          description: The card type
          enum:
          - Credit
          - Debit
          - Prepaid
          - Charge
          example: Credit
        type:
          type: string
          description: The payment method type
          example: card
    RiskPayment:
      type: object
      description: The details of the payment being processed
      properties:
        psp:
          type: string
          description: "The payment service provider processing this transaction"
          example: "Checkout.com"
        id:
          type: string
          description: "The PSP's transaction identifier. Can be back-filled at a later step, e.g /pre-capture"
          example: "78453878"
          maxLength: 32
    RiskPaymentRequestSource:
      type: object
      description: The source of the payment.<br>
      discriminator:
        propertyName: type
        mapping:
          token: '#/components/schemas/01_PaymentRequestTokenSource'
          id: '#/components/schemas/IdSourcePrism'
          card: '#/components/schemas/CardSourcePrism'
          customer: '#/components/schemas/CustomerSourcePrism'
          # network_token: '#/components/schemas/05_PaymentRequestNetworkTokenSource'
          # alipay: '#/components/schemas/PaymentRequestAlipaySource'
          # benefitpay: '#/components/schemas/PaymentRequestBenefitPaySource'
          # baloto: '#/components/schemas/PaymentRequestBalotoSource'
          # boleto: '#/components/schemas/PaymentRequestBoletoSource'
          # eps: '#/components/schemas/PaymentRequestEpsSource'
          # giropay: '#/components/schemas/PaymentRequestGiropaySource'
          # ideal: '#/components/schemas/PaymentRequestIdealSource'
          # klarna: '#/components/schemas/PaymentRequestKlarnaSource'
          # knet: '#/components/schemas/PaymentRequestKnetSource'
          # oxxo: '#/components/schemas/PaymentRequestOXXOSource'
          # p24: '#/components/schemas/PaymentRequestP24Source'
          # pagofacil: '#/components/schemas/PaymentRequestPagoFacilSource'
          # paypal: '#/components/schemas/PaymentRequestPayPalSource'
          # poli: '#/components/schemas/PaymentRequestPoliSource'
          # rapipago: '#/components/schemas/PaymentRequestRapiPagoSource'
          # bancontact: '#/components/schemas/PaymentRequestBancontactSource'
          # fawry: '#/components/schemas/PaymentRequestFawrySource'
          # qpay: '#/components/schemas/PaymentRequestQPaySource'
          # multibanco: '#/components/schemas/PaymentRequestMultibancoSource'
          # dLocal: '#/components/schemas/06_PaymentRequestdLocalSource'
          # sofort: '#/components/schemas/PaymentRequestSofortSource'
      required:
        - type
      properties:
        type:
          type: string
          description: The payment source type
          example: "card"
    RiskShippingDetails:
      type: object
      description: The shipping details
      properties:
        address:
          description: The shipping address
          allOf:
            - $ref: '#/components/schemas/Address'
    ServerTimestamp:
      type: string
      description: Read-only UTC timestamp, automatically assigned by us
      format: date-time
      readOnly: true
    3dsId:
      description: Universally unique transaction identifier assigned by the 3DS Server to identify a single transaction.
      type: string
      minLength: 36
      maxLength: 36
      example: sid_y3oqhf46pyzuxjbcn2giaqnb441
    Acs:
      type: object
      required:
        - reference_number
        - transaction_id
        - operator_id
        - challenge_mandated
      description: 'The access control server (ACS) information. Can be empty if the session is still pending or if communication with the ACS failed. This will be available when the channel data and issuer fingerprint result have been provided.'
      properties:
        reference_number:
          description: EMVCo-assigned unique identifier to track approved ACS
          type: string
          maxLength: 32
          example: ACSRefNum1234
        transaction_id:
          description: Universally unique transaction identifier assigned by the ACS
          type: string
          minLength: 36
          maxLength: 36
          example: be481bd1-1f1d-4ef8-9fa8-0fb2a38e3c87
        operator_id:
          description: DS assigned ACS identifier
          type: string
          maxLength: 32
          example: ACSRefNum1234
        url:
          description: Fully qualified URL of the ACS to be used for the challenge
          type: string
          maxLength: 2048
          example: https://server.acsdomainname.com
        signed_content:
          description: >
            Contains the JSON web signature (JWS) compact serialization created by the ACS for a challenged app authentication.
            (Example has been truncated for readability.)
          type: string
          maxLength: 512
          example: eyJ4NWMiOlsiTUlJQjdEQ0NBWktnQXdJQkFnSVZBSzIxWEc5SVBCL083QzZjUTBvRlJJUkIwWDI0TUFvR0NDcUdTTTQ5QkFNQ01INHhDekFKQm
        challenge_mandated:
          type: boolean
          description: Indicates whether a challenge is required for the transaction to be authorized
        authentication_type:
          type: string
          pattern: "^\\d{2}$"
          description: >
            The type of authentication as returned from the ACS provider. <br/>
            • 01 = Static <br/>
            • 02 = Dynamic <br/>
            • 03 = OOB <br/>
            • 04-79 = Reserved for EMVCo future use <br/>
            • 80-99 = Reserved for DS use
        challenge_cancel_reason:
          type: string
          description: Indicator informing the ACS and the DS that the authentication has been cancelled
          enum:
            - cardholder_cancel
            - transaction_timed_out
            - challenge_timed_out
            - transaction_error
            - unknown
            - sdk_timed_out
        interface:
          type: string
          enum:
            - native_ui
            - html
        ui_template:
          type: string
          enum:
            - text
            - single_select
            - multi_select
            - oob
            - html_other
    Amount:
      type: integer
      description: 'The amount in the major currency'
      example: 120
      minimum: 0
      maximum: 18446744073709551615
    App:
      allOf:
        - $ref: '#/components/schemas/ChannelData'
        - type: object
          required:
            - sdk_app_id
            - sdk_max_timeout
            - sdk_ephem_pub_key
            - sdk_encrypted_data
            - sdk_reference_number
            - sdk_transaction_id
            - sdk_interface_type
            - sdk_ui_elements
          properties:
            channel:
              type: string
              enum:
                - app
            sdk_app_id:
              description: >
                Universally unique ID created upon all installations and updates of the 3DS Requestor App on a consumer device. This will be newly generated and stored by the 3DS SDK for each installation or update.
              type: string
              minLength: 36
              maxLength: 36
              example: dbd64fcb-c19a-4728-8849-e3d50bfdde39
            sdk_max_timeout:
              description: >
                Indicates maximum amount of time (in minutes) for all exchanges
              type: integer
              minimum: 5
              example: 5
            sdk_ephem_pub_key:
              $ref: '#/components/schemas/SdkEphemeralPublicKey'
            sdk_reference_number:
              description: >
                Identifies the vendor and version for the 3DS SDK that is integrated in a 3DS Requestor App, assigned by EMVCo when the 3DS SDK is approved.
              type: string
              maxLength: 32
              example: '3DS_LOA_SDK_PPFU_020100_00007'
            sdk_encrypted_data:
              description: >
                A JSON web encryption (JWE) object in compact serialization, containing data encrypted by the SDK for the Directory Server to decrypt.
              type: string
              maxLength: 64000
              example: '<device-information>'
            sdk_transaction_id:
              description: >
                Universally unique transaction identifier assigned by the 3DS SDK to identify a single transaction
              type: string
              minLength: 36
              maxLength: 36
              example: 'b2385523-a66c-4907-ac3c-91848e8c0067'
            sdk_interface_type:
              description: >
                Lists all of the SDK interface types that the device supports for displaying specific challenge user interfaces within the SDK
              type: string
              enum:
                - native
                - html
                - both
            sdk_ui_elements:
              description: >
                Lists all the user interface elements that the cardholder's device supports for displaying specific challenge user interfaces within the SDK
              type: array
              items:
                type: string
                enum:
                  - text
                  - single_select
                  - multi_select
                  - oob
                  - html_other
    Approved:
      type: boolean
      description: 'Whether the authentication was successful. This will only be set if the Session is in a final state'
      example: false
    AuthenticationType:
      type: string
      enum:
        - regular
      description: Indicates the type of payment this session is for
      example: regular
      default: regular
    Browser:
      allOf:
        - $ref: '#/components/schemas/ChannelData'
        - type: object
          required:
            - accept_header
            - java_enabled
            - language
            - color_depth
            - screen_height
            - screen_width
            - timezone
            - user_agent
            - ip_address
          properties:
            channel:
              type: string
              enum:
                - browser
            three_ds_method_completion:
              type: string
              description: >
                Indicates whether the 3DS Method successfully completed<br/>
                • Y = Successfully completed <br/>
                • N = Did not successfully complete <br/>
                • U = Unavailable (3DS Method URL was not present in the preperation response (PRes) message data for the card range associated with the cardholder's account number)
              enum:
                - Y
                - N
                - U
              minLength: 1
              maxLength: 1
              default: U
              example: U
            accept_header:
              type: string
              maxLength: 2048
              description: >
                Exact content of the HTTP accept headers as sent to the 3DS Requestor from the cardholder’s browser
              example: 'Accept:  *.*, q=0.1'
            java_enabled:
              type: boolean
              description: >
                Boolean that represents the ability of the cardholder's browser to execute Java. Value is returned from the `navigator.javaEnabled` property.
              example: true
            language:
              type: string
              minLength: 1
              maxLength: 12
              description: >
                Value representing the browser language as defined in IETF BCP47. Returned from the `navigator.language` property.
              example: 'FR-fr'
            color_depth:
              type: string
              minLength: 1
              maxLength: 2
              description: >
                Value representing the bit depth of the colour palette for displaying images, in bits per pixel. Obtained from the cardholder's browser from the `screen.colorDepth` property.
              example: '16'
            screen_height:
              type: string
              minLength: 1
              maxLength: 6
              description: >
                Total height of the cardholder’s screen in pixels. Value is returned from the `screen.height` property.
              example: '1080'
            screen_width:
              type: string
              minLength: 1
              maxLength: 6
              description: >
                Total width of the cardholder’s screen in pixels. Value is returned from the `screen.width` property.
              example: '1920'
            timezone:
              type: string
              minLength: 1
              maxLength: 5
              description: >
                Time difference between UTC time and the local time of the cardholder's browser, in minutes.
              example: '60'
            user_agent:
              type: string
              maxLength: 2048
              description: >
                Exact content of the HTTP user-agent header
              example: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'
            ip_address:
              description: >
                IP address of the browser as returned by the HTTP headers to the 3DS Requestor
              type: string
              maxLength: 45
              example: '1.12.123.255'
    Cardholder:
      type: object
      description: 'The cardholder information'
      properties:
        name:
          description: Name of the Cardholder.
          type: string
          minLength: 2
          maxLength: 45
          example: Cardholder Name
        email:
          type: string
          description: The email address associated with the account that is either entered by the Cardholder, or is on file with the 3DS Requestor.
          maxLength: 254
          example: 'example@example.com'
        billing_address:
          $ref: '#/components/schemas/Address'
    CardInfo:
      type: object
      description: Details related to the Session source. This property should always be in the response, unless a `card` source was used and communication with Checkout.com's Vault was not possible.
      required:
        - instrument_id
        - fingerprint
      properties:
        instrument_id:
          type: string
          description: The identifier of the card instrument.
          example: src_ubfj2q76miwundwlk72vxt2i7q
        fingerprint:
          type: string
          description: A token that can uniquely identify this card across all customers.
          example: vnsdrvikkvre3dtrjjvlm5du4q
        metadata:
          type: object
          description: Additional details for this card
          properties:
            card_type:
              type: string
              description: The card type.
              enum: ['DEBIT', 'CREDIT', 'PREPAID', 'CHARGE', 'DEFERRED DEBIT']
              example: CREDIT
            card_category:
              type: string
              description: The card category.
              enum: ['COMMERCIAL', 'CONSUMER']
              example: CONSUMER
            issuer_name:
              type: string
              description: The card issuer's name.
              example: Checkout
            issuer_country:
              type: string
              pattern: ^[A-Z]{2}
              description: The two letter alpha country code of the card issuer.
              example: GB
            product_id:
              type: string
              description: The issuer/card scheme product identifier.
              example: MDS
            product_type:
              type: string
              description: The issuer/card scheme product type.
              example: 'Debit MasterCard® Card'
    CardSource:
      type: object
      allOf:
        - $ref: '#/components/schemas/SessionSource'
        - type: object
          required:
            - type
            - number
            - expiry_month
            - expiry_year
          properties:
            number:
              type: string
              description: The card number (without separators)
              example: '4543474002249996'
              minLength: 13
              maxLength: 19
            expiry_month:
              type: integer
              description: The expiry month of the card
              minimum: 1
              minLength: 1
              maxLength: 2
              example: 6
            expiry_year:
              type: integer
              description: The expiry year of the card
              minLength: 4
              maxLength: 4
              example: 2025
            name:
              type: string
              description: The name of the cardholder. Any special characters will be replaced.
              minLength: 2
              maxLength: 45
              example: 'Bruce Wayne'
            email:
              type: string
              description: The email of the cardholder
              maxLength: 254
              example: 'bruce.wayne@email.com'
    Category:
      type: string
      enum:
        - payment
        - non_payment
      description: Indicates the category of the authentication request
      default: payment
    ChallengeIndicator:
      type: string
      enum:
        - no_preference
        - no_challenge_requested
        - challenge_requested
        - challenge_requested_mandate
      description: Indicates whether a challenge is requested for this session
      maxLength: 50
      example: no_preference
      default: no_preference
    ChannelData:
      required:
        - channel
      description: The information gathered from the environment used to initiate the session
      discriminator:
        propertyName: channel
        mapping:
          browser: '#/components/schemas/Browser'
          app: '#/components/schemas/App'
      properties:
        channel:
          type: string
          description: Indicates the type of channel interface being used to initiate the transaction.</br>
            If the channel is `app` then `501 Not Implemented` is returned.
          default: 'browser'
      example:
        channel: browser
        accept_header: 'Accept:  *.*, q=0.1'
        java_enabled: true
        language: 'FR-fr'
        color_depth: '16'
        screen_height: '1080'
        screen_width: '1920'
        timezone: '60'
        user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'
        three_ds_method_completion: 'Y'
        ip_address: '1.12.123.255'
    CompletionInfo:
      required:
        - type
      description: The redirect information needed for callbacks or redirects after the payment is completed
      discriminator:
        propertyName: type
        mapping:
          hosted: '#/components/schemas/HostedCompletionInfo'
          non_hosted: '#/components/schemas/NonHostedCompletionInfo'
      properties:
        type:
          type: string
          enum:
            - hosted
            - non_hosted
          description: >
            Whether the session should be hosted by Checkout.com.</br>
            When this value is `hosted`, the response will be `501 Not Implemented`.
          maxLength: 10
          example: non_hosted
      example:
        type: non_hosted
        callback_url: https://merchant.com/callback
    CreateSessionAcceptedResponse:
      required:
        - session_secret
        - id
        - transaction_id
        - scheme
        - amount
        - currency
        - authentication_type
        - authentication_category
        - status
        - protocol_version
        - _links
      properties:
        session_secret:
          $ref: '#/components/schemas/SessionSecret'
        id:
          $ref: '#/components/schemas/SessionId'
        transaction_id:
          description: The transaction identifier that needs to be provided when communicating directly with the Access Control Server (ACS)
          type: string
          minLength: 36
          maxLength: 36
          example: 9aea641d-0549-4222-9ca9-d90b43a4f38c
        scheme:
          type: string
          description: Indicates the scheme this authentication is carried out against
          enum:
            - visa
            - mastercard
            - jcb
            - amex
            - diners
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          $ref: '#/components/schemas/Currency'
        authentication_type:
          $ref: '#/components/schemas/AuthenticationType'
        authentication_category:
          $ref: '#/components/schemas/Category'
        status:
          $ref: '#/components/schemas/Status'
        status_reason:
          $ref: '#/components/schemas/StatusReason'
        next_actions:
          $ref: '#/components/schemas/NextActions'
        protocol_version:
          $ref: '#/components/schemas/ProtocolVersion'
        reference:
          $ref: '#/components/schemas/Reference'
        card:
          $ref: '#/components/schemas/CardInfo'
        _links:
          $ref: '#/components/schemas/CreateSessionLinks'
    CreateSessionLinks:
      allOf:
        - $ref: '#/components/schemas/GetSessionLinks'
      properties:
        redirect_url:
          type: object
          description: >
            The link to which the cardholder should be redirected. </br>
            Only available when the `hosted` value is `true`.
          properties:
            href:
              type: string
              maxLength: 100
              example: http://3ds2.checkout.com/interceptor/sid_y3oqhf46pyzuxjbcn2giaqnb44
          required:
            - href
        collect_channel_data:
          type: object
          description: The URI to send device information to. Only available if `next_actions` contains `collect_data`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data
          required:
            - href
    CreateSessionOkResponse:
      allOf:
        - $ref: '#/components/schemas/GetSessionResponse'
      required:
        - session_secret
      properties:
        session_secret:
          $ref: '#/components/schemas/SessionSecret'
    Cryptogram:
      description: >
        Payment system-specific value provided as part of the ACS registration for each supported DS.
        Please be advised that this field will only be included in responses when authenticating with a valid OAuth token and not when authenticating 
          with `session_secret`.
      type: string
      minLength: 28
      maxLength: 28
      example: 'MTIzNDU2Nzg5MDA5ODc2NTQzMjE='
    Currency:
      type: string
      description: The three-letter ISO currency code
      example: USD
    Ds:
      type: object
      description: 'The directory server (DS) information. Can be empty if the session is pending or communication with the DS failed'
      required:
        - reference_number
        - transaction_id
      properties:
        ds_id:
          description: Required if the session is deemed app-based. Registered application provider identifier (RID) that is unique to the payment system. RIDs are defined by the ISO 7816-5 standard. Used as part of the device data encryption process.
          type: string
          maxLength: 32
          example: A000000003
        reference_number:
          description: EMVCo-assigned unique identifier to track approved DS
          type: string
          maxLength: 32
          example: VISA.V 17 0003
        transaction_id:
          description: Universally unique transaction identifier assigned by the DS
          type: string
          minLength: 36
          maxLength: 36
          example: 9aea641d-0549-4222-9ca9-d90b43a4f38c
    DsPublicKeys:
      type: object
      description: Public certificates specific to a Directory Server (DS) for encrypting device data and verifying ACS signed content. Required when channel is `app`.
      required:
        - ds_public
        - ca_public
      properties:
        ds_public:
          type: string
          maxLength: 1024
          description: A public certificate provided by the DS for encrytion of device data. It is a base64 URL encoded <a href="https://tools.ietf.org/html/rfc7517" target="_blank">JSON web key</a>.
          example: eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6Ik1LQkNUTkljS1VTRGlpMTF5U3MzNTI2aURaOEFpVG83VHU2S1BBcXY3RDQiLCJ5IjoiNEV0bDZTUlcyWWlMVXJONXZmdlZIdWhwN3g4UHhsdG1XV2xiYk00SUZ5TSIsInVzZSI6ImVuYyIsImtpZCI6IjEifQ
        ca_public:
          type: string
          maxLength: 1024
          description: Certificate authority (CA) public certificate (root) of the DS-CA. This certificate is used to validate the ACS signed content JSON web signature (JWS) object. It is a base64 URL encoded DER encoded X.509.
          example: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxWEvDZRhKEefZ5sQS7RJZXWbSOPxus-ZyLQjtmrrAQawnKI-AG8BKpVdZVGlpcdxCnGbCIy8CKk2Oi7Mgdqfv5R_4_jI7yl4j7Svmh1Sw934eeF9RyB59Ihl36Y0pNfVW9hBqJuq2o8ulrA1TOtpTpje23CY8sjFE5QnJm1evZRB_ZZQ1txl4nrAiHkno4cVJPouBesryVGVQ0zi1bM0P-05Ydgksvph-1nyjnDldD68mejVF69Tijxa22b6BUCXEuPfbXZcW2NpM_W3msnvKiTWFaMlnIzGYIoFnAnCIVU7Min6CPn565tv0iyIt8BrcezsGzefUw17NEq0J4tCvWwIDAQAB
    Eci:
      description: >
        Electronic Commerce Indicator. 
        Please be advised that this field will only be included in responses when authenticating with a valid OAuth token and not when authenticating
        with `session_secret`.
      type: string
      minLength: 2
      maxLength: 2
      example: '05'
    ErrorResponse:
      type: object
      required:
        - request_id
        - error_type
        - error_codes
      properties:
        request_id:
          type: string
          example: 5342217f-7fa2-4626-a6c9-c979a04671a6
        error_type:
          type: string
          description: >
            The type of error. <br/>
            • operation_not_allowed = Usually with an http status code 403. The request is not allowed by business rules. <br/>
            • not_implemented = Usually with an http status code 501. This particular feature is not implemented yet. <br/>
            • not_found = Usually with an http status code 404. The resource requested was not found. <br/>
            • forbidden = Usually with an http status code 401. You do not have permissions for the requested operation. <br/>
            • callback_failed = (Non Hosted Only) Only during the complete request. The callback_url responded with a non-success status code. <br/>
            • internal_server_error = Usually with an http status code 500. Unexpected error during the request or an upstream service failure. <br/>
            • unprocessable_entity = Usually with an http status code 422. The request payload failed validation. <br/>
            • conflict = Usually with an http status code 409 during the creation of a resource. The resource already exists. <br/>
            • duplicate_requests_detected = Usually with an http status code 409. This is returned when a Session is currently being processed. <br />
            • service_not_available = Usually with an http status code 503. Triggered given an upstream service failure.<br />
          enum:
            - operation_not_allowed
            - not_implemented
            - not_found
            - forbidden
            - callback_failed
            - internal_server_error
            - unprocessable_entity
            - conflict
            - duplicate_requests_detected
            - service_not_available
        error_codes:
          description: >
            Error response code. Full list of error codes below: <br/>
            • unknown_error = Usually with an error type `internal_server_error`. An unexpected/unhandled error occured. <br/>
            • operation_not_allowed = Usually with an error type `operation_not_allowed`. The request is not allowed by business rules. <br/>
            • scheme_not_supported = The processor was setup with a scheme not supported by the server. <br/>
            • card_not_enrolled = The card number was not enrolled for 3DS2 and 3DS1 was either not enabled or not supported for Session (eg amount is 0). <br/>
            • card_not_eligible = The card number was not eligible for 3DS1. <br/>
            • card_eligibility_unavailable = A technical issue prevented the 3DS1 transaction from completing. <br />
            • issuer_not_enrolled = The card issuer  was not enrolled for 3DS2 and 3DS1 was either not enabled or not supported for Session (eg amount is 0). <br/>
            • card_protocol_version_not_supported = The protocol version provided is not enabled for the processor being used. <br/>
            • update_not_allowed_due_to_state = The Session was in a state that did not allow for the operation attempted. <br/>
            • source_not_supported = Support for the Session Source used is not implemented yet. <br/>
            • session_callback_failed = (Non Hosted Only) Only during the complete request. The callback_url responded with a non-success status code. <br/>
            • session_persistence_failed = Usually with an error type `internal_server_error`. The API failed to persist the Session. Can be retried. <br/>
            • hosted_not_supported_for_app = You tried to create a Hosted Session with app channel data which is not allowed. <br/>
            • three_ds_method_not_supported_for_app = You tried to perform issuer fingerprint on a Session with app channel data which is not allowed. <br/>
            • three_ds_method_not_supported_without_url = You tried to perform issuer fingerprint on a Session without a 3DS method URL which is not allowed. <br/>
            • operation_not_allowed_for_scope = You are using an OAuth2.0 token that does not contain the right scope. <br/>
            • protocol_version_not_supported_by_sdk = You created an App channel Session with a protocol version not supported by the relevant mobile SDK. <br/>
            • ds_error = The Directory Server (schemes) responded with an unexpected error or timed out. <br/>
            • processing_channel_disabled = The Processing Channel or processor used for this Session is not active. <br/>
            • vault_not_configured_for_processing_channel = Using a Processing Channel not configured for use with Checkout.com Vault offering but trying to use a relevant source (`id` or `token`). <br/>
            • error_getting_instrument = Getting an instrument responded with an unexpected error or timed out. Only relevant for sources `id` or `token`. <br/>
            • invalid_token = The token used in the source object was invalid. <br/>
            • instrument_used_is_not_card = Using an `id` type source that is not a card (only card type instruments are supported in 3DS) . <br/>
            • no_processor_configured_for_card_scheme = Using a card that belongs to a scheme that is not configured in the Processing Channel being used. <br/>
            • currency_not_supported = An Amex SE number is not associated with the currency in the request. <br/>
            • scheme_outage = With error type `operation_not_allowed`. This is returned when there is a technical issue on the scheme's platform. <br/>
            • session_already_in_use = With error type `duplicate_requests_detected`. More than one action requests have been sent in parallel for the same session. <br/><br/>
      
            Also, there is a number of generic error codes as described below: <br/>
            • some_field_required = Usually with an error type `unprocessable_entity`. The field `some_field` is required but not provided in the payload. <br/>
            • some_field_invalid = Usually with an error type `unprocessable_entity`. The field `some_field` failed validation. Please consult the API spec. <br/>
            • unable_to_verify_some_field = Usually with an error type `service_not_available`. The field `some_field` could not be validated due to an upstream service failure. <br/>
            • some_resource_already_exists = Usually with an error type `conflict`. The resource you are trying to create already exists (not relevant for Sessions with an auto-generated id). <br/>
            • some_resource_not_found = Usually with an error type `not_found`. The resource you are trying to get does not exist. <br/>
      
          type: array
          items:
            type: string
    GetBaseSessionLinks:
      type: object
      description: The links related to the session
      required:
        - self
      properties:
        self:
          type: object
          description: The URI of the session
          required:
            - href
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441
    GetCompleteSessionLinks:
      type: object
      description: The links related to the session
      allOf:
        - $ref: '#/components/schemas/GetBaseSessionLinks'
      properties:
        complete:
          type: object
          description: The URI to signal the session as complete. Only available if `next_actions` contains `complete`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete
          required:
            - href
    GetFingerprintSessionLinks:
      type: object
      description: The links related to the session
      allOf:
        - $ref: '#/components/schemas/GetBaseSessionLinks'
      properties:
        complete:
          type: object
          description: The URI to signal the session as complete. Only available if `next_actions` contains `complete`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete
          required:
            - href
        issuer_fingerprint:
          type: object
          description: >
            The URI to send the 3ds method completion indicator to. Use this if device information was sent when requesting a session. 
            Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/issuer-fingerprint
          required:
            - href
        collect_channel_data:
          type: object
          description: The URI to send device information to. Only available if `next_actions` contains `collect_data`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data
          required:
            - href
        three_ds_method_url:
          type: object
          description: The URI of the issuer fingerprint (3DS method). Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.hbsc.com/3dsmethod?tx=123456
          required:
            - href
    GetSessionLinks:
      type: object
      description: The links related to the session
      allOf:
        - $ref: '#/components/schemas/GetBaseSessionLinks'
      properties:
        issuer_fingerprint:
          type: object
          description: >
            The URI to send the 3ds method completion indicator to. Use this if device information was sent when requesting a session. 
            Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/issuer-fingerprint
          required:
            - href
        collect_channel_data:
          type: object
          description: The URI to send device information to. Only available if `next_actions` contains `collect_data`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data
          required:
            - href
        three_ds_method_url:
          type: object
          description: The URI of the issuer fingerprint (3DS method). Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.hbsc.com/3dsmethod?tx=123456
          required:
            - href
        acs_url:
          type: object
          description: Fully qualified URL of the ACS to be used for the challenge. Only available if `next_actions` contains `authenticate`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.hbsc.com/challenge
          required:
            - href
        term_url:
          type: object
          description: Fully qualified URL that will receive and process the PaReq (payer authentication response). Only available if `next_actions` contains `authenticate`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.hbsc.com/challenge
          required:
            - href
        complete:
          type: object
          description: The URI to signal the session as complete. Only available if `next_actions` contains `complete`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete
          required:
            - href
        success_url:
          type: object
          description: The cardholder will be redirected to this URI given an authentication was approved or attempted. Only available if the completion type is `hosted`.
          properties:
            href:
              type: string
              maxLength: 300
          required:
            - href
        failure_url:
          type: object
          description: The cardholder will be redirected to this URI given an authentication was not approved or attempted. Only available if the completion type is `hosted`.
          properties:
            href:
              type: string
              maxLength: 300
          required:
            - href
        callback_url:
          type: object
          description: An endpoint which will receive a POST request highlighting the result of an authentication. See the "Complete a Session" request for more details. Only available if the completion type is `non_hosted`.
          properties:
            href:
              type: string
              maxLength: 300
          required:
            - href
    GetSessionResponse:
      required:
        - id
        - transaction_id
        - scheme
        - amount
        - currency
        - authentication_type
        - authentication_category
        - status
        - protocol_version
        - _links
      properties:
        id:
          $ref: '#/components/schemas/SessionId'
        session_secret:
          $ref: '#/components/schemas/SessionSecret'
        transaction_id:
          description: The transaction identifier that needs to be provided when communicating directly with the Access Control Server (ACS)
          type: string
          minLength: 36
          maxLength: 36
          example: 9aea641d-0549-4222-9ca9-d90b43a4f38c
        scheme:
          type: string
          description: Indicates the scheme this authentication is carried out against
          enum:
            - visa
            - mastercard
            - jcb
            - amex
            - diners
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          $ref: '#/components/schemas/Currency'
        completed:
          type: boolean
          description: Indicates whether this session has been completed
          example: false
        challenged:
          type: boolean
          description: Indicates whether this session involved a challenge. This will only be set after communication with the scheme is finished.
          example: true
        authentication_type:
          $ref: '#/components/schemas/AuthenticationType'
        authentication_category:
          $ref: '#/components/schemas/Category'
        certificates:
          $ref: '#/components/schemas/DsPublicKeys'
        status:
          $ref: '#/components/schemas/Status'
        status_reason:
          $ref: '#/components/schemas/StatusReason'
        approved:
          $ref: '#/components/schemas/Approved'
        protocol_version:
          $ref: '#/components/schemas/ProtocolVersion'
        reference:
          $ref: '#/components/schemas/Reference'
        transaction_type:
          $ref: '#/components/schemas/TransactionType'
        next_actions:
          $ref: '#/components/schemas/NextActions'
        ds:
          $ref: '#/components/schemas/Ds'
        acs:
          $ref: '#/components/schemas/Acs'
        response_code:
          $ref: '#/components/schemas/ResponseCode'
        response_status_reason:
          $ref: '#/components/schemas/ResponseStatusReason'
        pareq:
          $ref: '#/components/schemas/Pareq'
        cryptogram:
          $ref: '#/components/schemas/Cryptogram'
        eci:
          $ref: '#/components/schemas/Eci'
        xid:
          type: string
          description: The xid value to use for authorization
          example: XSUErNftqkiTdlkpSk8p32GWOFA
        cardholder_info:
          type: string
          description: May provide cardholder information from the DS to be presented to the cardholder
          example: Card declined. Please contact your issuing bank.
        card:
          $ref: '#/components/schemas/CardInfo'
        _links:
          $ref: '#/components/schemas/GetSessionLinks'
    GetSessionResponseAfterChannelDataSupplied:
      required:
        - id
        - transaction_id
        - scheme
        - amount
        - currency
        - authentication_type
        - authentication_category
        - status
        - protocol_version
        - _links
      properties:
        id:
          $ref: '#/components/schemas/SessionId'
        session_secret:
          $ref: '#/components/schemas/SessionSecret'
        transaction_id:
          description: The transaction identifier that needs to be provided when communicating directly with the Access Control Server (ACS)
          type: string
          minLength: 36
          maxLength: 36
          example: 9aea641d-0549-4222-9ca9-d90b43a4f38c
        scheme:
          type: string
          description: Indicates the scheme this authentication is carried out against
          enum:
            - visa
            - mastercard
            - jcb
            - amex
            - diners
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          $ref: '#/components/schemas/Currency'
        completed:
          type: boolean
          description: Indicates whether this session has been completed
          example: false
        challenged:
          type: boolean
          description: Indicates whether this session involved a challenge. This will only be set after communication with the scheme is finished.
          example: true
        authentication_type:
          $ref: '#/components/schemas/AuthenticationType'
        authentication_category:
          $ref: '#/components/schemas/Category'
        status:
          $ref: '#/components/schemas/Status'
        status_reason:
          $ref: '#/components/schemas/StatusReason'
        approved:
          $ref: '#/components/schemas/Approved'
        protocol_version:
          $ref: '#/components/schemas/ProtocolVersion'
        reference:
          $ref: '#/components/schemas/Reference'
        transaction_type:
          $ref: '#/components/schemas/TransactionType'
        next_actions:
          $ref: '#/components/schemas/NextActions'
        ds:
          $ref: '#/components/schemas/Ds'
        acs:
          $ref: '#/components/schemas/Acs'
        response_code:
          $ref: '#/components/schemas/ResponseCode'
        response_status_reason:
          $ref: '#/components/schemas/ResponseStatusReason'
        pareq:
          $ref: '#/components/schemas/Pareq'
        cryptogram:
          $ref: '#/components/schemas/Cryptogram'
        eci:
          $ref: '#/components/schemas/Eci'
        xid:
          type: string
          description: The xid value to use for authorization
          example: XSUErNftqkiTdlkpSk8p32GWOFA
        card:
          $ref: '#/components/schemas/CardInfo'
        _links:
          $ref: '#/components/schemas/GetFingerprintSessionLinks'
    GetUpdateSessionLinks:
      type: object
      description: The links related to the session
      allOf:
        - $ref: '#/components/schemas/GetBaseSessionLinks'
      properties:
        issuer_fingerprint:
          type: object
          description: >
            The URI to send the 3ds method completion indicator to. Use this if device information was sent when requesting a session. 
            Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/issuer-fingerprint
          required:
            - href
        collect_channel_data:
          type: object
          description: The URI to send device information to. Only available if `next_actions` contains `collect_data`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data
          required:
            - href
        three_ds_method_url:
          type: object
          description: The URI of the Issuer FingerPrint (3DS Method). Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.hbsc.com/3dsmethod?tx=123456
          required:
            - href
        complete:
          type: object
          description: The URI to signal the session as complete. Only available if `next_actions` contains `complete`
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete
          required:
            - href
    HostedCompletionInfo:
      allOf:
        - $ref: '#/components/schemas/CompletionInfo'
        - type: object
          required:
            - success_url
            - failure_url
          properties:
            success_url:
              type: string
              format: uri
              description: For `hosted` sessions, this overrides the default success redirect URL configured on your account
              maxLength: 256
              example: 'http://example.com/payments/success'
            failure_url:
              type: string
              format: uri
              description: For `hosted` sessions, this overrides the default failure redirect URL configured on your account
              maxLength: 256
              example: 'http://example.com/payments/fail'
    IdSource:
      type: object
      allOf:
        - $ref: '#/components/schemas/SessionSource'
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              description: The card instrument id
              example: 'src_4gzeau5o2uqubbk6fufs3m7p54'
              maxLength: 100
    NetworkTokenSource:
      type: object
      allOf:
        - $ref: '#/components/schemas/SessionSource'
        - type: object
          required:
            - type
            - token
            - expiry_month
            - expiry_year
            - token_type
            - cryptogram
          properties:
            token:
              type: string
              description: The network token PAN
              example: '4543474002249996'
              minLength: 9
              maxLength: 19
            expiry_month:
              type: integer
              description: The expiry month of the token
              minimum: 1
              example: 6
              minLength: 1
              maxLength: 2
            expiry_year:
              type: integer
              description: The expiry year of the token
              example: 2025
              minLength: 4
              maxLength: 4
            name:
              type: string
              description: The customer's name. Any special characters will be replaced.
              minLength: 2
              maxLength: 45
              example: 'Bruce Wayne'
    NextActions:
      type: array
      description: >
        Identifies what actions to take in order to complete the session. `redirect_cardholder` only applies to hosted sessions.
        `authenticate` only applies to sessions that have been downgraded to 3DS1 (`protocol_version 1.0.2`)
      items:
        enum:
          - collect_channel_data
          - issuer_fingerprint
          - challenge_cardholder
          - redirect_cardholder
          - complete
          - authenticate
    NonHostedCompletionInfo:
      allOf:
        - $ref: '#/components/schemas/CompletionInfo'
        - type: object
          required:
            - callback_url
          properties:
            callback_url:
              type: string
              format: uri
              description: For `non-hosted` sessions, you can define a URL to be called once the session is complete
              maxLength: 256
              example: 'http://example.com/payments/callback/pay_mbabizu24mvu3mela5njyhpit4'
    Pareq:
      type: string
      description: Payer authentication request required in the form post to the `acs.url` given a 3DS1 transaction
      example: eJyNVF1vmzAUfd+vQLwTOzbgJDKu0mZVk6pTvtXuzTN3CWqBxMCW/fsZN6k2rSvmBa59zuWe+8WvTvmL9wN0lZVF4vd72PegUGWaFbvE36xvg4F/JT55/z58vdcAkxWoRsO7CIt6gKqSO/CyNPElpXJIyCCIYKiCUEY0GELcDwjDISMyZt++Y/+/rqy7+XgJxw8hFnYWJIyeHuHoYnbyHkCrvSzqTqRFS3W8nn4RlDEWYY7OphM1Bz2dCHx5CA4pZRy9Hjt5KGQOIj/H622zSno0rTzSM5HYOycvqmyKWv8SAxJzdDGcmI1+Efu6PlQjhOy7lnWvqRDBJoD2sjPZyDnbfN60yMpR1ClLxf1sGpfRCTb4CE8r9Vkdv7LBXIf34SLhqEU4uUplDYKY+uAhxV6fjfrhiEYc2XO3JsnbrIq+t1lNTI+8Wk7MQyt6fKa3Wf3zwK26jdZmmk15Q0N/s5y4cDqUBZg/mfl5++6uqXOl+M2d65Sp2gwFmm2vl+rpbr2NF4+7m9nj8ieoxeZ2vHtO2tmzIFdlmelyQjGz0jKHlueoI1yj/MPV1Ha73YTvL1P01zb9DeVWJeg=
    ProcessedOn:
      type: string
      description: The date/time the authentication was processed
      example: '2019-01-15T12:44:33Z'
    ProtocolVersion:
      type: string
      description: The protocol version number of the specification used by the API for authentication
      maxLength: 50
      example: '2.2.0'
    RedirectUrl:
      type: string
      description: >
        Fully qualified URL where the cardholder will be redirected after the authentication is complete in the Interceptor.
      example: 'https://www.xml.com'
    Reference:
      type: string
      description: A reference you can later use to identify this payment, such as an order number
      maxLength: 100
      example: 'ORD-5023-4E89'
    ResponseCode:
      description: >
        Only available as a result of a 3DS2 authentication. 
      
        The response from the DS or ACS which indicates whether a transaction qualifies as an authenticated transaction or account verification. <br/>
        Only available if communication with the scheme was successful and the Session is in a final state. <br/><br/>
        • Y = Authentication Verification Successful. <br/>
        • N = Not Authenticated /Account Not Verified; Transaction denied. <br/>
        • U = Authentication/ Account Verification Could Not Be Performed; Technical or other problem, as indicated in ARes or RReq. <br/>
        • A = Attempts Processing Performed; Not Authenticated/Verified, but a proof of attempted authentication/verification is provided. <br/>
        • C = Challenge Required; Additional authentication is required using the CReq/CRes. <br/>
        • D = Challenge Required; Decoupled Authentication confirmed. <br/>
        • R = Authentication/ Account Verification Rejected; Issuer is rejecting authentication/verification and request that authorization not be attempted. <br/>
        • I = Informational Only; 3DS Requestor challenge preference acknowledged.
      type: string
      enum:
        - 'Y'
        - 'N'
        - 'U'
        - 'A'
        - 'C'
        - 'D'
        - 'R'
        - 'I'
    ResponseStatusReason:
      description: >
        Only available as a result of a 3DS2 authentication. 
      
        The response from the DS or ACS which provides information on why the `response_code` field has the specified value.  <br/>
        Only available when `response_code` is not `Y`.  <br/><br/>
      
        • 01 = Card authentication failed <br/>
        • 02 = Unknown Device <br/>
        • 03 = Unsupported Device <br/>
        • 04 = Exceeds authentication frequency limit <br/>
        • 05 = Expired card <br/>
        • 06 = Invalid card number <br/>
        • 07 = Invalid transaction <br/>
        • 08 = No Card record <br/>
        • 09 = Security failure <br/>
        • 10 = Stolen card <br/>
        • 11 = Suspected fraud <br/>
        • 12 = Transaction not permitted to cardholder <br/>
        • 13 = Cardholder not enrolled in service <br/>
        • 14 = Transaction timed out at the ACS <br/>
        • 15 = Low confidence <br/>
        • 16 = Medium confidence <br/>
        • 17 = High confidence <br/>
        • 18 = Very High confidence <br/>
        • 19 = Exceeds ACS maximum challenges <br/>
        • 20 = Non-Payment transaction not supported <br/>
        • 21 = 3RI transaction not supported <br/>
        • 22 = ACS technical issue <br/>
        • 23 = Decoupled Authentication required by ACS but not requested by 3DS Requestor <br/>
        • 24 = 3DS Requestor Decoupled Max Expiry Time exceeded <br/>
        • 25 = Decoupled Authentication was provided insufficient time to authenticate cardholder. ACS will not make attempt <br/>
        • 26 = Authentication attempted but not performed by the cardholder <br/>
      example: '01'
      type: string
    SchemeToken:
      type: string
      description: 'The scheme generated token (replaces the `card` object)'
    SdkEphemeralPublicKey:
      type: object
      description: 'Public key component of the ephemeral key pair generated by the 3DS SDK and used to establish session keys between the 3DS SDK and ACS. Refer to https://tools.ietf.org/html/rfc7517#appendix-A.1'
      properties:
        kty:
          description: The key type.
          type: string
          enum: ['EC']
          example: EC
        crv:
          type: string
          description: The type of elliptic curve.
          maxLength: 40
          example: 'P-256'
        x:
          type: string
          description: x coordinate of the elliptic curve that is base64url-encoded.
          maxLength: 100
          example: 'f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU'
        y:
          type: string
          description: y coordinate of the elliptic curve that is base64url-encoded.
          maxLength: 100
          example: 'x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0'
    Session:
      type: object
      description: The session information
      properties:
        id:
          description: Session Id generated for external usage
          type: string
          minLength: 36
          maxLength: 36
          example: sid_y3oqhf46pyzuxjbcn2giaqnb44
        expires_on:
          description: Expiration date of the session id
          type: string
          example: 01-09-2019 10:12:30
    SessionAddress:
      type: object
      description: The shipping address. Any special characters will be replaced.
      properties:
        address_line1:
          type: string
          description: The first line of the address
          maxLength: 50
          example: Checkout.com
        address_line2:
          type: string
          description: The second line of the address
          maxLength: 50
          example: ABC building
        address_line3:
          type: string
          description: The third line of the address
          maxLength: 50
          example: 14 Wells Mews
        city:
          type: string
          description: The address city
          maxLength: 50
          example: London
        state:
          type: string
          description: The country subdivision code defined in ISO 3166-2
          minLength: 3
          maxLength: 3
          example: ENG
        zip:
          type: string
          description: The address zip/postal code
          maxLength: 16
          example: W1T 4TJ
        country:
          type: string
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of the address
          example: GB
          maxLength: 2
          minLength: 2
    SessionId:
      description: Session unique identifier
      type: string
      pattern: "^(sid)_(\\w{26})$"
      minLength: 30
      maxLength: 30
      example: sid_y3oqhf46pyzuxjbcn2giaqnb441
    SessionMarketplaceData:
      type: object
      description: Information related to authentication for payfac payments
      properties:
        sub_entity_id:
          type: string
          description: The sub-entity that the authentication is being processed on behalf of
          example: 'ent_rgyzti4x74xubmu72m6r3pvksa'
    SessionPhone:
      type: object
      required:
        - country_code
        - number
      properties:
        country_code:
          description: Country code. According to ITU-E.164
          type: string
          minLength: 1
          maxLength: 3
          pattern: '^\d{1,3}$'
          example: 234
        number:
          type: string
          description: The rest of the number. According to ITU-E.164
          maxLength: 15
          pattern: '^\d{1,15}$'
          example: '0204567895'
    SessionRequest:
      type: object
      required:
        - currency
        - source
        - completion
      properties:
        source:
          $ref: '#/components/schemas/SessionSource'
        amount:
          type: integer
          description: |
            The payment amount in the major currency.
      
            This value is required for 3DS1 authentications.
      
      
            Omitting this value will set `authentication_category` to `non_payment` and renders the authentication as 3DS2 only.
          minimum: 0
          maxLength: 48
          example: 6540
        currency:
          type: string
          description: |
            The three-letter ISO currency code
          example: USD
          maxLength: 3
          minLength: 3
        processing_channel_id:
          type: string
          pattern: "^(pc)_(\\w{26})$"
          description: |
            The processing channel to be used for the session. Required if this was not set in the request for the OAuth token.
        marketplace:
          $ref: '#/components/schemas/SessionMarketplaceData'
        authentication_type:
          $ref: '#/components/schemas/AuthenticationType'
        authentication_category:
          $ref: '#/components/schemas/Category'
        challenge_indicator:
          $ref: '#/components/schemas/ChallengeIndicator'
        billing_descriptor:
          $ref: '#/components/schemas/SessionsBillingDescriptor'
        reference:
          $ref: '#/components/schemas/Reference'
        transaction_type:
          $ref: '#/components/schemas/TransactionType'
        shipping_address:
          $ref: '#/components/schemas/SessionAddress'
        completion:
          $ref: '#/components/schemas/CompletionInfo'
        channel_data:
          $ref: '#/components/schemas/ChannelData'
    SessionSecret:
      description: >
        A base64 encoded value prefixed with `sek_` that gives access to client-side operations for a single authentication within the Sessions API. 
        This value is returned as the `session_secret` when requesting a session. 
        Client-side operations include getting session details and those specified in `next_actions`. 
        Please be advised that this field will only be included in responses when authenticating with a valid OAuth token and not when authenticating 
        with `session_secret`.
      type: string
      pattern: '^(sek)_(.{44})$'
      minLength: 48
      maxLength: 48
      example: sek_Dal7UyiH8rIFXA4PfgiIk2jUyQkVDeEWgVBEL4TsRTE=
    SessionSource:
      type: object
      description: The source of the authentication. Using a `network_token` will return `501 Not Implemented`.
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/CardSource'
          id: '#/components/schemas/IdSource'
          token: '#/components/schemas/TokenSource'
          network_token: '#/components/schemas/NetworkTokenSource'
      required:
        - type
      properties:
        type:
          type: string
          default: 'card'
          description: The payment source type
          example: 'card'
        billing_address:
          description: The customer's billing address. Any special characters will be replaced.
          allOf:
            - $ref: '#/components/schemas/SessionAddress'
        home_phone:
          description: The cardholder's home phone number
          allOf:
            - $ref: '#/components/schemas/SessionPhone'
        mobile_phone:
          description: The cardholder's mobile phone number
          allOf:
            - $ref: '#/components/schemas/SessionPhone'
        work_phone:
          description: The cardholder's work phone number
          allOf:
            - $ref: '#/components/schemas/SessionPhone'
    Status:
      type: string
      enum:
        - pending
        - processing
        - challenged
        - challenge_abandoned
        - expired
        - approved
        - attempted
        - unavailable
        - declined
        - rejected
      description: Indicates the status of the session
    StatusReason:
      type: string
      description: >
        When the Session is unavailable this will point to the reason it is so.  <br/><br/>
      
        • ares_error = There was an issue in the Authentication response we got back from the Directory Server (scheme server - 3DS2) <br/>
        • ares_status = The status was set to the status in the Authentication response we got back from the Directory Server (scheme server - 3DS2) <br/>
        • veres_error = There was an issue in the Verification response we got back from the Directory Server (scheme server - 3DS1) <br/>
        • veres_status = The status was set to the status in the Verification response we got back from the Directory Server (scheme server - 3DS1) <br/>
        • pares_error = There was an issue in the Payer Authentication response we got back from the Access Control Server (issuer server - 3DS1) <br/>
        • pares_status = The status was set to the status in the Payer Authentication response we got back from the Access Control Server (issuer server - 3DS1) <br/>
        • rreq_error = There was an issue in the Response we got back from the Access Control Server (issuer server - 3DS2) <br/>
        • rreq_status = The status was set to the status in the Response we got back from the Access Control Server (issuer server - 3DS2) <br/>
        • risk_declined = The status was set to declined because the Risk engine recommended we decline the authentication <br/>
      enum:
        - ares_error
        - ares_status
        - veres_error
        - veres_status
        - pares_error
        - pares_status
        - rreq_error
        - rreq_status
        - risk_declined
    ThreeDsMethodCompletion:
      required:
        - three_ds_method_completion
      description: The result of the 3DS method url
      properties:
        three_ds_method_completion:
          type: string
          enum:
            - Y
            - N
            - U
          description: >
            The result of the 3DS method URL.<br> 
            Default to `U` if a response is not received from the 3DS Method URL within 10 seconds.
          minLength: 1
          maxLength: 1
          example: Y
      example:
        three_ds_method_completion: Y
    TokenSource:
      type: object
      allOf:
        - $ref: '#/components/schemas/SessionSource'
        - type: object
          required:
            - token
          properties:
            token:
              type: string
              description: The Checkout.com card token
              example: 'tok_4gzeau5o2uqubbk6fufs3m7p54'
              maxLength: 100
    TransactionType:
      type: string
      enum:
        - goods_service
        - check_acceptance
        - account_funding
        - quashi_card_transaction
        - prepaid_activation_and_load
      description: Identifies the type of transaction being authenticated
      maxLength: 50
      example: goods_service
      default: goods_service
    Type:
      type: string
      enum:
        - payment_transaction
        - recurring_transaction
        - instalment_transaction
        - add_card
        - maintain_card
        - token_cardholder_verification
      description: Indicates the type of Authentication request.
      default: payment_transaction
    SessionsBillingDescriptor:
      type: object
      description: An optional dynamic billing descriptor.
      properties:
        name:
          type: string
          description: "A dynamic description of the payment that replaces the Merchant Name that is displayed in 3DS Challenge window. Applies to card payments only. Special characters allowed: `.` `!` `*` `-` `=` `_`"
          example: "SUPERHEROES.COM"    
          maxLength: 25
    01_SepaSource:
      type: object
      description: A SEPA payment source
      required:
        - billing_address
        - source_data
      allOf:
        - $ref: '#/components/schemas/SourceRequest'
        - type: object
          properties:
            source_data:
              type: object
              description: Additional data required to create SEPA payment sources
              required:
                - first_name
                - last_name
                - account_iban
                - bic
                - billing_descriptor
                - mandate_type
              properties:
                first_name:
                  type: string
                  description: The account holder's first name
                  example: 'Marcus'
                last_name:
                  type: string
                  description: The account holder's last name
                  example: 'Barrilius Maximus'
                account_iban:
                  type: string
                  description: The account IBAN
                  example: 'DE25100100101234567893'
                bic:
                  type: string
                  description: The account BIC
                  example: 'PBNKDEFFXXX'
                billing_descriptor:
                  type: string
                  description: The billing descriptor
                  example: 'ExampleCompany.com'
                mandate_type:
                  type: string
                  description: The type of mandate
                  enum:
                    - 'single'
                    - 'recurring'
                  example: 'recurring'
    01_SepaSourceResponse:
      type: object
      description: The SEPA mandate details
      allOf:
        - $ref: '#/components/schemas/AddSourceResponse'
        - type: object
          properties:
            response_data:
              type: object
              description: SEPA Direct Debit details
              properties:
                mandate_reference:
                  type: string
                  description: The Direct Debit mandate reference
                  example: 'MANDXI9809809'
            _links:
              type: object
              description: The links related to the SEPA payment source
              readOnly: true
              minItems: 1
              properties:
                self:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/Link'
                  description: The URI of the payment source
                cancel:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/Link'
                  description: A link to cancel the SEPA Direct Debit mandate
    02_AchSource:
      type: object
      description: An ACH payment source
      required:
        - billing_address
        - source_data
      allOf:
        - $ref: '#/components/schemas/SourceRequest'
        - type: object
          properties:
            source_data:
              type: object
              description: Additional data required to create ACH payment sources
              required:
                - account_type
                - account_number
                - routing_number
                - account_holder_name
                - billing_descriptor
              properties:
                account_type:
                  type: string
                  description: The type of Direct Debit account
                  enum:
                    - 'Checking'
                    - 'Savings'
                    - 'Corporate'
                    - 'CorpSavings'
                  example: 'Checking'
                account_number:
                  type: integer
                  description: The account number of the Direct Debit account
                  minLength: 4
                  maxLength: 17
                  example: 4099999992
                routing_number:
                  type: integer
                  description: The routing number of the Direct Debit account
                  minLength: 8
                  maxLength: 9
                  example: 211370545
                account_holder_name:
                  type: string
                  description: The account holder's full name
                  minLength: 1
                  maxLength: 100
                  example: 'John Doe'
                billing_descriptor:
                  type: string
                  description: The billing descriptor
                  minLength: 1
                  maxLength: 15
                  example: 'ExampleCompany.com'
                company_name:
                  type: string
                  description: The name of the company (required for corporate accounts)
                  minLength: 1
                  maxLength: 40
                  example: 'Checkout.com'
    AddSourceResponse:
      type: object
      discriminator:
        propertyName: type
        mapping:
          sepa: '#/components/schemas/01_SepaSourceResponse'
          ach: '#/components/schemas/AddSourceResponse'
      required:
        - type
        - response_code
      properties:
        id:
          type: string
          description: The unique identifier of the payment source that can be used later for payments
          example: src_y3oqhf46pyzuxjbcn2giaqnb44
        type:
          type: string
          description: The payment source type
          example: 'sepa'
        response_code:
          type: string
          description: The Gateway response code
          example: '10000'
        customer:
          type: object
          description: The customer associated with the payment source if provided in the request
          allOf:
            - $ref: '#/components/schemas/SourceResponseCustomer'
    Source:
      type: object
      required:
        - type
      properties:
        id:
          type: string
          description: The unique identifier of the payment source that can be later used for payments
          example: src_y3oqhf46pyzuxjbcn2giaqnb44
        type:
          type: string
          description: The payment source type
          example: 'sepa'
        _links:
          type: object
          description: The links related to the payment source
          readOnly: true
          minItems: 1
          required:
            - self
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment source
              example:
                href: https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44
          example:
            self:
              href: https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44
            'sepa:mandate':
              href: https://api.checkout.com/sepa/mandates/src_y3oqhf46pyzuxjbcn2giaqnb44
    SourceRequest:
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          sepa: '#/components/schemas/01_SepaSource'
          ach: '#/components/schemas/02_AchSource'
      properties:
        type:
          type: string
          description: The payment source type
          example: sepa
        reference:
          type: string
          description: A reference you can later use to identify the source
          example: 'X-080957-N34'
        billing_address:
          description: The payment source owner's billing address
          allOf:
            - $ref: '#/components/schemas/Address'
        phone:
          description: The payment source owner's phone number
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
        customer:
          type: object
          description: Details of the customer to associate with the source
          properties:
            id:
              type: string
              pattern: "^(cus)_(\\w{26})$"
              description: |
                The identifier of an existing customer. If neither customer `id` or `email` is provided, then 
                a new customer will be registered
              example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
            email:
              type: string
              format: email
              description: An optional email address to associate with the customer
              example: 'brucewayne@gmail.com'
            name:
              type: string
              description: The customer's name. This will only set the name for *new* customers
              example: 'Bruce Wayne'
    SourceResponseCustomer:
      type: object
      description: The customer to which the payment source is linked
      required:
        - id
      properties:
        id:
          type: string
          pattern: "^(cus)_(\\w{26})$"
          description: The unique identifier of the customer
          example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
        email:
          type: string
          description: The customer's email address
          example: 'brucewayne@gmail.com'
        name:
          type: string
          description: The customer's name
          example: 'Bruce Wayne'
    Timestamp:
      type: string
      description: ISO 8601 timestamp
      format: date-time
    01_CardTokenRequest:
      type: object
      description: Card Token Request
      allOf:
        - $ref: '#/components/schemas/TokenRequest'
        - type: object
          required:
            - number
            - expiry_month
            - expiry_year
          properties:
            number:
              type: string
              description: The card number
              example: '4543474002249996'
            expiry_month:
              type: integer
              description: The expiry month of the card
              minimum: 1
              example: 6
              minLength: 1
              maxLength: 2
            expiry_year:
              type: integer
              description: The expiry year of the card
              example: 2025
              minLength: 4
              maxLength: 4
            name:
              type: string
              description: The cardholder's name
              example: 'Bruce Wayne'
            cvv:
              type: string
              description: The card verification value/code. 3 digits, except for Amex (4 digits)
              example: '956'
              minLength: 3
              maxLength: 4
            billing_address:
              description: The payment source owner's billing address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The payment source owner's phone number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    01_CardTokenResponse:
      type: object
      description: Card Token Response
      required:
        - expiry_month
        - expiry_year
        - last4
        - bin
      allOf:
        - $ref: '#/components/schemas/TokenResponse'
        - type: object
          properties:
            billing_address:
              description: The payment source owner's billing address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The payment source owner's phone number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
            expiry_month:
              type: integer
              description: The expiry month
              minimum: 1
              example: 6
              minLength: 1
              maxLength: 2
            expiry_year:
              type: integer
              description: The expiry year
              example: 2025
              minLength: 4
              maxLength: 4
            name:
              type: string
              description: The cardholder's name
              example: 'Bruce Wayne'
            scheme:
              type: string
              description: The card scheme
              example: 'VISA'
            last4:
              type: string
              description: The last four digits of the card number
              example: '9996'
              minLength: 4
              maxLength: 4
            bin:
              type: string
              description: The card issuer's Bank Identification Number (BIN)
              example: '454347'
              maxLength: 6
            card_type:
              type: string
              description: The card type
              enum:
                - Credit
                - Debit
                - Prepaid
                - Charge
                - Deferred Debit
              example: Credit
            card_category:
              type: string
              description: The card category
              enum:
                - Consumer
                - Commercial
              example: Consumer
            issuer:
              type: string
              description: The name of the card issuer
              example: 'GOTHAM STATE BANK'
            issuer_country:
              type: string
              maxLength: 2
              minLength: 2
              description: The card issuer's country (<a href="https://www.checkout.com/docs/four/resources/codes/country-codes" target="blank">two-letter ISO code</a>)
              example: 'US'
            product_id:
              type: string
              description: The issuer/card scheme product identifier
              example: 'F'
            product_type:
              type: string
              description: The issuer/card scheme product type
              example: CLASSIC
    02_GooglePayTokenRequest:
      type: object
      description: Google Pay Token Request
      allOf:
        - $ref: '#/components/schemas/TokenRequest'
        - type: object
          properties:
            token_data:
              type: object
              description: The Google Pay payment token
              properties:
                signature:
                  type: string
                  description: Verifies the message came from Google. The signature is created using ECDSA
                protocolVersion:
                  type: string
                  description: Identifies which encryption/signing scheme created this message. In this way, the protocol can evolve over time if needed. If it is not set, assume ECv0
                signedMessage:
                  type: string
                  description: A serialized JSON string containing the encryptedMessage, ephemeralPublicKey, and tag. To simplify the signature verification process, this value is serialized
              example:
                {
                  'protocolVersion': 'ECv1',
                  'signature': 'TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ',
                  'signedMessage': '{"encryptedMessage":
                    "ZW5jcnlwdGVkTWVzc2FnZQ==",
                    "ephemeralPublicKey": "ZXBoZW1lcmFsUHVibGljS2V5",
                    "tag": "c2lnbmF0dXJl"}',
                }
    02_GooglePayTokenResponse:
      type: object
      description: Google Pay Token Response
      allOf:
        - $ref: '#/components/schemas/TokenResponse'
    03_ApplePayTokenRequest:
      type: object
      description: Apple Pay Token Request
      allOf:
        - $ref: '#/components/schemas/TokenRequest'
        - type: object
          properties:
            token_data:
              type: object
              description: The Apple Pay payment token
              properties:
                version:
                  type: string
                  description: Version information about the payment token. The token uses `EC_v1` for ECC-encrypted data, and `RSA_v1` for RSA-encrypted data
                data:
                  type: string
                  description: Encrypted payment data. Base64 encoded as a string
                signature:
                  type: string
                  description: Signature of the payment and header data. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm
                header:
                  type: object
                  description: Additional version-dependent information used to decrypt and verify the payment
              example:
                {
                  'version': 'EC_v1',
                  'data': 't7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzvebKp3P0TekUslSQ8nkuacUgLdks2IKyCm7U3OL/PEYLXE7w60VkQ8WE6FXs/cqHkwtSW9vkzZNDxSLDg9slgLYxAH2/iztdipPpyIYKl0Kb6Rn9rboF+lwgRxM1B3n84miApwF5Pxl8ZOOXGY6F+3DsDo7sMCUTaJK74DUJJcjIXrigtINWKW6RFa/4qmPEC/Y+syg04x7B99mbLQQzWFm7z6HfRmynPM9/GA0kbsqd/Kn5Mkqssfhn/m6LuNKsqEmbKi85FF6kip+F17LRawG48bF/lT8wj/QEuDY0G7t/ryOnGLtKteXmAf0oJnwkelIyfyj2KI8GChBuTJonGlXKr5klPE89/ycmkgDl+T6Ms7PhiNZpuGEE2QE=',
                  'signature': 'MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgEFADCABgkqhkiG9w0BBwEAAKCAMIID5jCCA4ugAwIBAgIIaGD2mdnMpw8wCgYIKoZIzj0EAwIwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTE2MDYwMzE4MTY0MFoXDTIxMDYwMjE4MTY0MFowYjEoMCYGA1UEAwwfZWNjLXNtcC1icm9rZXItc2lnbl9VQzQtU0FOREJPWDEUMBIGA1UECwwLaU9TIFN5c3RlbXMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEgjD9q8Oc914gLFDZm0US5jfiqQHdbLPgsc1LUmeY+M9OvegaJajCHkwz3c6OKpbC9q+hkwNFxOh6RCbOlRsSlaOCAhEwggINMEUGCCsGAQUFBwEBBDkwNzA1BggrBgEFBQcwAYYpaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZWFpY2EzMDIwHQYDVR0OBBYEFAIkMAua7u1GMZekplopnkJxghxFMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUI/JJxE+T5O8n5sT2KGw/orv9LkswggEdBgNVHSAEggEUMIIBEDCCAQwGCSqGSIb3Y2QFATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMDQGA1UdHwQtMCswKaAnoCWGI2h0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlYWljYTMuY3JsMA4GA1UdDwEB/wQEAwIHgDAPBgkqhkiG92NkBh0EAgUAMAoGCCqGSM49BAMCA0kAMEYCIQDaHGOui+X2T44R6GVpN7m2nEcr6T6sMjOhZ5NuSo1egwIhAL1a+/hp88DKJ0sv3eT3FxWcs71xmbLKD/QJ3mWagrJNMIIC7jCCAnWgAwIBAgIISW0vvzqY2pcwCgYIKoZIzj0EAwIwZzEbMBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTQwNTA2MjM0NjMwWhcNMjkwNTA2MjM0NjMwWjB6MS4wLAYDVQQDDCVBcHBsZSBBcHBsaWNhdGlvbiBJbnRlZ3JhdGlvbiBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATwFxGEGddkhdUaXiWBB3bogKLv3nuuTeCN/EuT4TNW1WZbNa4i0Jd2DSJOe7oI/XYXzojLdrtmcL7I6CmE/1RFo4H3MIH0MEYGCCsGAQUFBwEBBDowODA2BggrBgEFBQcwAYYqaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZXJvb3RjYWczMB0GA1UdDgQWBBQj8knET5Pk7yfmxPYobD+iu/0uSzAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFLuw3qFYM4iapIqZ3r6966/ayySrMDcGA1UdHwQwMC4wLKAqoCiGJmh0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlcm9vdGNhZzMuY3JsMA4GA1UdDwEB/wQEAwIBBjAQBgoqhkiG92NkBgIOBAIFADAKBggqhkjOPQQDAgNnADBkAjA6z3KDURaZsYb7NcNWymK/9Bft2Q91TaKOvvGcgV5Ct4n4mPebWZ+Y1UENj53pwv4CMDIt1UQhsKMFd2xd8zg7kGf9F3wsIW2WT8ZyaYISb1T4en0bmcubCYkhYQaZDwmSHQAAMYIBjTCCAYkCAQEwgYYwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTAghoYPaZ2cynDzANBglghkgBZQMEAgEFAKCBlTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNzA4MDIxNjA5NDZaMCoGCSqGSIb3DQEJNDEdMBswDQYJYIZIAWUDBAIBBQChCgYIKoZIzj0EAwIwLwYJKoZIhvcNAQkEMSIEIGEfVr+4x9RQXyfF8IYA0kraoK0pcZEaBlINo6EGrOReMAoGCCqGSM49BAMCBEgwRgIhAKunK47QEr/ZjxPlVl+etzVzbKA41xPLWtO01oUOlulmAiEAiaFH9F9LK6uqTFAUW/WIDkHWiFuSm5a3NVox7DlyIf0AAAAAAAA=',
                  'header':
                    {
                      'ephemeralPublicKey': 'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEX1ievoT8DRB8T5zGkhHZHeDr0oBmYEgsDSxyT0MD0IZ2Mpfjz2LdWq6LUwSH9EmxdPEzMunsZKWMyOr3K/zlsw==',
                      'publicKeyHash': 'tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6Nl0=',
                      'transactionId': '3cee89679130a4b2617c76118a1c62fd400cd45b49dc0916d5b951b560cd17b4',
                    },
                }
    03_ApplePayTokenResponse:
      type: object
      description: Apple Pay Token Response
      allOf:
        - $ref: '#/components/schemas/TokenResponse'
    TokenRequest:
      type: object
      description: The source of the payment
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/01_CardTokenRequest'
          googlepay: '#/components/schemas/02_GooglePayTokenRequest'
          applepay: '#/components/schemas/03_ApplePayTokenRequest'
      required:
        - type
      properties:
        type:
          type: string
          description: The type of card details to be tokenized
          example: 'card'
    TokenResponse:
      type: object
      description: The source of the payment
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/01_CardTokenResponse'
          googlepay: '#/components/schemas/02_GooglePayTokenResponse'
          applepay: '#/components/schemas/03_ApplePayTokenResponse'
      required:
        - type
        - token
        - expires_on
        - expiry_month
        - expiry_year
        - last4
        - bin
      properties:
        type:
          type: string
          description: The type of card details to be tokenized
          example: 'card'
        token:
          type: string
          description: The reference token
          example: tok_ubfj2q76miwundwlk72vxt2i7q
        expires_on:
          description: The date/time the token will expire
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        expiry_month:
          type: integer
          description: The expiry month
          minimum: 1
          example: 6
          minLength: 1
          maxLength: 2
        expiry_year:
          type: integer
          description: expiry year
          example: 2025
          minLength: 4
          maxLength: 4
        scheme:
          type: string
          description: The card scheme
          example: 'VISA'
        last4:
          type: string
          description: The last four digits of the card number
          example: '9996'
        bin:
          type: string
          description: The card issuer BIN
          example: '454347'
        card_type:
          type: string
          description: The card type
          enum:
            - Credit
            - Debit
            - Prepaid
            - Charge
            - Deferred Debit
          example: Credit
        card_category:
          type: string
          description: The card category
          enum:
            - Consumer
            - Commercial
          example: Consumer
        issuer:
          type: string
          description: The name of the card issuer
          example: 'GOTHAM STATE BANK'
        issuer_country:
          type: string
          maxLength: 2
          minLength: 2
          description: The card issuer country ISO-2 code
          example: 'US'
        product_id:
          type: string
          description: The issuer/card scheme product identifier
          example: 'F'
        product_type:
          type: string
          description: The issuer/card scheme product type
          example: CLASSIC
    CreateTransferRequest:
      type: object
      title: Create transfer request
      properties:
        reference:
          type: string
          description: A unique reference you can later use to identify this transfer.
          maxLength: 50
          example: superhero1234
        transfer_type:
          $ref: '#/components/schemas/TransferType'
        source:
          allOf:
            - $ref: '#/components/schemas/TransferSource'
          required:
            - id
            - amount
        destination:
          allOf:
            - $ref: '#/components/schemas/TransferDestination'
          required:
            - id
      required:
        - transfer_type
        - source
        - destination
    CreateTransferResponse:
      type: object
      title: Create transfer response
      properties:
        id:
          type: string
          description: The `id` representing the initiated transfer.
          example: trs_y3oqhf46pyzuxjbcn2giaqnb4
        status:
          $ref: '#/components/schemas/TransferStatus'
    ListTransfersResponse:
      type: object
      title: List transfers response
      properties:
        count:
          type: number
          description: The number of transfers in the response.
          example: 1
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: The `id` of the transfer.
                example: trs_y3oqhf46pyzuxjbcn2giaqnb4
              reference:
                type: string
                description: A unique reference you can later use to identify this transfer.
                example: superhero1234
              transfer_type:
                $ref: '#/components/schemas/TransferType'
              requested_on:
                type: string
                description: The date the transfer was requested on.
                example: '2021-12-15T09:15:02.3845763Z'
              source:
                type: object
                description: The object representing the source of the funds involved in the transfer.
                properties:
                  entity_id:
                    type: string
                    description: The `id` of the entity that funds are being transfer from.
                    example: ent_azsiyswl7bwe2ynjzujy7lcjca
                  amount:
                    description: The amount to be transferred, in the minor unit of the currency represented by the `id`.
                    type: integer
                    example: 100
                  currency:
                    description: The ISO currency of the funds being transferred.
                    type: string
                    example: GBR
              destination:
                type: object
                description: The object representing the destination of the funds involved in the transfer.
                properties:
                  entity_id:
                    type: string
                    description: The `id` of the entity that funds are being transfer to.
                    example: ent_bqik7gxoavwhmy3ot6kvmbx6py
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/TransferLink'
          example:
            self: 'http://test:1234/transfers?query=entity_id:ent_azsiyswl7bwe2ynjzujy7lcjca'
    TransferDestination:
      type: object
      title: Transfer destination
      description: The object representing the destination of the funds involved in the transfer.
      properties:
        id:
          type: string
          description: The identifier representing the destination of the funds. Currently this should be an entity ID.
          example: ent_w4jelhppmfiufdnatam37wrfc4
    TransferLink:
      type: object
      title: Transfer link
      properties:
        href:
          description: The link URL.
          type: string
    TransferSource:
      type: object
      title: Transfer source
      description: The object representing the source of the funds involved in the transfer.
      properties:
        id:
          type: string
          description: The identifier representing the source of the funds. Currently this should be an entity ID.
          example: ent_azsiyswl7bwe2ynjzujy7lcjca
        amount:
          description: The amount to be transferred, in the minor unit of the currency represented by the `id`.
          type: integer
          example: 100
    TransferStatus:
      type: string
      title: Transfer status
      description: The current state of the initiated transfer.
      enum:
        - pending
    TransferType:
      type: string
      title: Transfer type
      description: The type of transfer being requested.
      enum:
        - commission
        - promotion
        - refund
    UpdateCustomerRequest:
      type: object
      description: The customer's details
      properties:
        id:
          type: string
          pattern: "^(cus)_(\\w{26})$"
          description: The identifier of an existing customer
          example: 'cus_y3oqhf46pyzuxjbcn2giaqnb44'
        default:
          type: boolean
          description: 'If true, sets this instrument as the default for the customer'
          example: true
    ValidationError:
      type: object
      properties:
        request_id:
          type: string
          example: 0HL80RJLS76I7
        error_type:
          type: string
          example: request_invalid
        error_codes:
          type: array
          items:
            type: string
            example: payment_source_required
  headers:
    Cko-Request-Id:
      description: The unique identifier of the request
      schema:
        type: string
    Cko-Version:
      description: The version of the API
      schema:
        type: string
  parameters:
    ckoIdempotencyKey:
      in: header
      name: Cko-Idempotency-Key
      schema:
        type: string
      required: false
      description: An optional idempotency key for safely retrying payment requests
    collectionCriteria:
      name: criteria
      in: query
      schema:
        type: string
      description: The json criteria for collection
    collectionExpand:
      name: expand
      in: query
      schema:
        type: string
      description: >-
        Expand response to get full related object intead of ID.  See the expand
        guide for more info.
    collectionFields:
      name: fields
      in: query
      schema:
        type: string
      description: >-
        Limit the returned fields to the list specified, separated by comma.  Note
        that id is always returned.
    collectionFilter:
      name: filter
      in: query
      schema:
        type: string
      description: |
        The collection items filter requires a special format.
        Use "," for multiple allowed values.  Use ";" for multiple fields.
        See the filter guide for more options and examples about this format.
    collectionLimit:
      name: limit
      in: query
      description: The collection items limit
      schema:
        type: integer
        minimum: 0
        maximum: 1000
    collectionOffset:
      name: offset
      in: query
      description: The collection items offset
      schema:
        type: integer
        minimum: 0
    collectionQuery:
      name: q
      in: query
      schema:
        type: string
      description: The partial search of the text fields.
    collectionSort:
      name: sort
      in: query
      style: form
      schema:
        type: array
        items:
          type: string
      description: >-
        The collection items sort field and order (prefix with "-" for descending
        sort).
    EntityId:
      name: id
      in: path
      description: The ID of the entity.
      required: true
      allowEmptyValue: false
      example: ent_w4jelhppmfiufdnatam37wrfc4
      style: simple
      schema:
        type: string
    hash:
      name: hash
      in: path
      description: The token identifier string
      schema:
        type: string
      required: true
    mediaType:
      name: Accept
      in: header
      schema:
        type: string
        enum:
          - application/json
        default: application/json
      description: The response media type
    Query:
      name: query
      in: query
      description: The query to apply to limit the currency accounts.
      required: false
      allowEmptyValue: false
      example: currency:EUR
      style: form
      schema:
        type: string
    resourceId:
      name: id
      in: path
      description: The resource identifier string
      schema:
        type: string
      required: true
    rulesVersion:
      name: version
      in: path
      schema:
        type: integer
        minimum: 1
      required: true
      description: >-
        The rule set version. Expand response to get full related object instead
        of ID.  See the expand guide for more info.
    systemEventType:
      name: eventType
      in: path
      description: The event type
      schema:
        type: string
      required: true
  responses:
    AccessForbidden:
      description: 'Access forbidden, invalid API-KEY was used'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidDataError:
      description: Invalid data was sent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    NotFound:
      description: Resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    ApiPublicKey:
      description: |
        Public keys are used for client-side authentication, and should only be used in JavaScript or native applications.
      
        #### Format
      
        - Sandbox `pk_sbox_xxxxxxxxxxxxxxxxxxxxxxxxxx`
      
        - Production `pk_xxxxxxxxxxxxxxxxxxxxxxxxxx`
      
        When specifying your public key in the Authorization header, you must include the `Bearer` prefix. For example, `Bearer {{public API key}}`.
      name: Authorization
      type: apiKey
      in: header
      x-cko-type: publicKey
    ApiSecretKey:
      description: |
        You can use your secret API key in the Authorization header of your API requests for <a href="https://docs.checkout.com/four/resources/api-authentication/api-keys#APIkeys-Secretkeys" target="_blank">supported endpoints</a>.
      
        #### Format
      
        - Sandbox `sk_sbox_xxxxxxxxxxxxxxxxxxxxxxxxxx`
      
        - Production `sk_xxxxxxxxxxxxxxxxxxxxxxxxxx`
      
        ```
        curl --location --request POST 'https://api.checkout.com/payments' \
        --header 'Content-Type: application/json' \
        --header 'Accept: application/json' \
        --header 'Authorization: Bearer {{AccessToken}}' \
        --data-raw '{
        "amount": 10000,
        "currency": "USD",
        "reference": "Visa-USD-Test",
        ...
        }'
        ```
      
        When specifying your secret key in the Authorization header, you must include the `Bearer ` prefix. For example, `Bearer {{secret API key}}`.
      
      name: Authorization
      type: apiKey
      in: header
      x-cko-type: secretKey
    OAuth:
      type: oauth2
      description: |
        Your client credentials consist of an access key ID and an access key secret (corresponding to OAuth 2.0 client ID and client secret). You can exchange these for an access token by calling the [request an access token](#tag/Access/paths/~1connect~1token/post) endpoint. 
        You will need to authenticate using basic authentication, using your access key ID and access key secret as your username and password:
      
        ```
        curl --location --request POST 'https://access.checkout.com/connect/token' \
        --header 'Content-Type: application/x-www-form-urlencoded' \
        --header 'Authorization: Basic dGVzdC1hY2Nlc3Mta2V5LWlkOnRlc3QtYWNjZXNzLWtleS1zZWNyZXQ=' \
        --data-urlencode 'grant_type=client_credentials' \
        --data-urlencode 'scope=gateway'
        ```
      
        The token server will return a Bearer `access_token` in JSON Web Token (JWT) format which you should use in the `Authorization`
        header of your API requests:
      
        ```
        curl --location --request POST 'https://api.checkout.com/payments' \
        --header 'Content-Type: application/json' \
        --header 'Accept: application/json' \
        --header 'Authorization: Bearer {{AccessToken}}' \
        --data-raw '{
          "amount": 10000,
          "currency": "USD",
          "reference": "Visa-USD-Test",
          ...
        }'
        ```
      
        Your access token will be valid for a length of time (in seconds) indicated by the `expires_in` field in the response. When it expires, you'll need to request a new one.
      
        Depending on the Environment against which you're making your requests against you'll need to request the token from a different Authorization Server.
      
        | Environment   |      Authorization Server                            |
        |---------------|------------------------------------------------------|
        | Sandbox       |  https://access.sandbox.checkout.com/connect/token   |
        | Production    |  https://access.checkout.com/connect/token           |
      
      flows:
        clientCredentials:
          tokenUrl: string
          scopes:
            vault: Access to all Vault resources
            'vault:instruments': Create instruments
            'vault:tokenization': Tokenize payment instruments
            gateway: Access to all Gateway resources
            'gateway:payment': Request payments
            'gateway:payment-details': Get payment details
            'gateway:payment-authorizations': Increment authorizations
            'gateway:payment-voids': Void payments
            'gateway:payment-captures': Capture payments
            'gateway:payment-refunds': Refund payments
            'fx': Foreign exchange services
            'payouts:bank-details': Get bank details
            sessions: Access to all Sessions resources
            'sessions:app': App-based authentication
            'sessions:browser': Browser-based authentication
            disputes: Access to all Disputes resources
            'disputes:view': View disputes
            'disputes:provide-evidence': Provide dispute evidence
            'disputes:accept': Accept disputes
            marketplace: Manage sub-entities
            flow: Access to all Flow resources
            'flow:workflows': Manage workflows
            'flow:events': Retrieve events
            files: Access to all Files resources
            'files:retrieve': Retrieve files
            'files:upload': Upload files
            'issuing:client': Access to all client-related resources
            'issuing:partner': Access to all partner-related resources
            risk: Access to all Risk resources
            'risk:assessment': Manage risk assessment
            'risk:settings': Manage risk settings
    SessionSecret:
      name: Authorization
      type: apiKey
      in: header
      description: >
        A base64 encoded value prefixed with `sek_` that gives access to client-side operations for a single authentication within the Sessions API. This value is returned as the `session_secret` when requesting a session.
